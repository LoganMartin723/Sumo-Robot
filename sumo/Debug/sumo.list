
sumo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af04  080002d0  080002d0  000012d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000273c  0800b1d4  0800b1d4  0000c1d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800d910  0800d910  0000e910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0800d914  0800d914  0000e914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000018  24000000  0800d918  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000254  24000018  0800d930  0000f018  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400026c  0800d930  0000f26c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0000f018  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002172f  00000000  00000000  0000f046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00003b52  00000000  00000000  00030775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001240  00000000  00000000  000342c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000e71  00000000  00000000  00035508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003d187  00000000  00000000  00036379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0001839d  00000000  00000000  00073500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0016a7f0  00000000  00000000  0008b89d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001f608d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004c48  00000000  00000000  001f60d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005d  00000000  00000000  001fad18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000018 	.word	0x24000018
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b1bc 	.word	0x0800b1bc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400001c 	.word	0x2400001c
 800030c:	0800b1bc 	.word	0x0800b1bc

08000310 <_ZN8BLDC_ESCC1EP11TIM_TypeDefh>:
//#include "stm32h7xx_hal_tim.h"
#include "stm32h7xx_ll_tim.h"



BLDC_ESC::BLDC_ESC(TIM_TypeDef *tim, uint8_t chan)
 8000310:	b480      	push	{r7}
 8000312:	b085      	sub	sp, #20
 8000314:	af00      	add	r7, sp, #0
 8000316:	60f8      	str	r0, [r7, #12]
 8000318:	60b9      	str	r1, [r7, #8]
 800031a:	4613      	mov	r3, r2
 800031c:	71fb      	strb	r3, [r7, #7]
{
	if((chan != CC1E ) && (chan != CC2E) && (chan != CC3E) && (chan != CC4E))
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d00a      	beq.n	800033a <_ZN8BLDC_ESCC1EP11TIM_TypeDefh+0x2a>
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	2b04      	cmp	r3, #4
 8000328:	d007      	beq.n	800033a <_ZN8BLDC_ESCC1EP11TIM_TypeDefh+0x2a>
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	2b08      	cmp	r3, #8
 800032e:	d004      	beq.n	800033a <_ZN8BLDC_ESCC1EP11TIM_TypeDefh+0x2a>
 8000330:	79fb      	ldrb	r3, [r7, #7]
 8000332:	2b0c      	cmp	r3, #12
 8000334:	d001      	beq.n	800033a <_ZN8BLDC_ESCC1EP11TIM_TypeDefh+0x2a>
		return;
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	e01b      	b.n	8000372 <_ZN8BLDC_ESCC1EP11TIM_TypeDefh+0x62>

	this -> timer = tim;
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	68ba      	ldr	r2, [r7, #8]
 800033e:	601a      	str	r2, [r3, #0]
	this -> channel = chan;
 8000340:	68fb      	ldr	r3, [r7, #12]
 8000342:	79fa      	ldrb	r2, [r7, #7]
 8000344:	711a      	strb	r2, [r3, #4]
	ENABLE_PWM(timer,channel);
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	681a      	ldr	r2, [r3, #0]
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	f042 0201 	orr.w	r2, r2, #1
 8000354:	601a      	str	r2, [r3, #0]
 8000356:	68fb      	ldr	r3, [r7, #12]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	6a1a      	ldr	r2, [r3, #32]
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	791b      	ldrb	r3, [r3, #4]
 8000360:	4619      	mov	r1, r3
 8000362:	2301      	movs	r3, #1
 8000364:	408b      	lsls	r3, r1
 8000366:	4619      	mov	r1, r3
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	430a      	orrs	r2, r1
 800036e:	621a      	str	r2, [r3, #32]

	return;
 8000370:	68fb      	ldr	r3, [r7, #12]
}
 8000372:	4618      	mov	r0, r3
 8000374:	3714      	adds	r7, #20
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
	...

08000380 <_ZN8BLDC_ESC13speed_controlEm>:


//The value of speed must be between 100 and 200.
void BLDC_ESC::speed_control(uint32_t speed)
{
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
 8000388:	6039      	str	r1, [r7, #0]
	if(speed < 100 || speed > 200)
 800038a:	683b      	ldr	r3, [r7, #0]
 800038c:	2b63      	cmp	r3, #99	@ 0x63
 800038e:	d939      	bls.n	8000404 <_ZN8BLDC_ESC13speed_controlEm+0x84>
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	2bc8      	cmp	r3, #200	@ 0xc8
 8000394:	d836      	bhi.n	8000404 <_ZN8BLDC_ESC13speed_controlEm+0x84>
	{
		return;
	}

	switch (this -> channel)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	791b      	ldrb	r3, [r3, #4]
 800039a:	2b0c      	cmp	r3, #12
 800039c:	d830      	bhi.n	8000400 <_ZN8BLDC_ESC13speed_controlEm+0x80>
 800039e:	a201      	add	r2, pc, #4	@ (adr r2, 80003a4 <_ZN8BLDC_ESC13speed_controlEm+0x24>)
 80003a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003a4:	080003d9 	.word	0x080003d9
 80003a8:	08000401 	.word	0x08000401
 80003ac:	08000401 	.word	0x08000401
 80003b0:	08000401 	.word	0x08000401
 80003b4:	080003e3 	.word	0x080003e3
 80003b8:	08000401 	.word	0x08000401
 80003bc:	08000401 	.word	0x08000401
 80003c0:	08000401 	.word	0x08000401
 80003c4:	080003ed 	.word	0x080003ed
 80003c8:	08000401 	.word	0x08000401
 80003cc:	08000401 	.word	0x08000401
 80003d0:	08000401 	.word	0x08000401
 80003d4:	080003f7 	.word	0x080003f7
	{
		case CC1E:
			timer->CCR1 = speed;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	683a      	ldr	r2, [r7, #0]
 80003de:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80003e0:	e00f      	b.n	8000402 <_ZN8BLDC_ESC13speed_controlEm+0x82>

		case CC2E:
			timer->CCR2 = speed;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	683a      	ldr	r2, [r7, #0]
 80003e8:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 80003ea:	e00a      	b.n	8000402 <_ZN8BLDC_ESC13speed_controlEm+0x82>

		case CC3E:
			timer->CCR3 = speed;
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	683a      	ldr	r2, [r7, #0]
 80003f2:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 80003f4:	e005      	b.n	8000402 <_ZN8BLDC_ESC13speed_controlEm+0x82>

		case CC4E:
			timer->CCR4 = speed;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	683a      	ldr	r2, [r7, #0]
 80003fc:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 80003fe:	e000      	b.n	8000402 <_ZN8BLDC_ESC13speed_controlEm+0x82>

		default:
			break;
 8000400:	bf00      	nop
	}
	return;
 8000402:	e000      	b.n	8000406 <_ZN8BLDC_ESC13speed_controlEm+0x86>
		return;
 8000404:	bf00      	nop
}
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr

08000410 <_ZN10Sumo_RobotC1EP19__SPI_HandleTypeDefP19__I2C_HandleTypeDefS3_S3_S3_S3_P11TIM_TypeDef>:
extern volatile uint16_t test4;
extern volatile uint16_t test5;

uint8_t directionReadings = 0;

Sumo_Robot::Sumo_Robot(
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
 800041c:	603b      	str	r3, [r7, #0]
		I2C_HandleTypeDef *MiddleI2Chandler,
		I2C_HandleTypeDef *Left30I2Chandler,
		I2C_HandleTypeDef *Left60I2Chandler,
		TIM_TypeDef *ESCtimerHandler
		):
		onboardButtonMatrix(),
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	4618      	mov	r0, r3
 8000422:	f004 f8f3 	bl	800460c <_ZN6btnMatC1Ev>
		onboardDisplay(SPIHandler),
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	3304      	adds	r3, #4
 800042a:	68b9      	ldr	r1, [r7, #8]
 800042c:	4618      	mov	r0, r3
 800042e:	f002 f925 	bl	800267c <_ZN9WaveShareC1EP19__SPI_HandleTypeDef>
		Right60Sensor(Right60I2Chandler),
 8000432:	68fb      	ldr	r3, [r7, #12]
 8000434:	33b8      	adds	r3, #184	@ 0xb8
 8000436:	6879      	ldr	r1, [r7, #4]
 8000438:	4618      	mov	r0, r3
 800043a:	f000 ff3b 	bl	80012b4 <_ZN7VL53L0XC1EP19__I2C_HandleTypeDef>
		Right30Sensor(Right30I2Chandler),
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8000444:	6839      	ldr	r1, [r7, #0]
 8000446:	4618      	mov	r0, r3
 8000448:	f000 ff34 	bl	80012b4 <_ZN7VL53L0XC1EP19__I2C_HandleTypeDef>
		MiddleSensor(MiddleI2Chandler),
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8000452:	69b9      	ldr	r1, [r7, #24]
 8000454:	4618      	mov	r0, r3
 8000456:	f000 ff2d 	bl	80012b4 <_ZN7VL53L0XC1EP19__I2C_HandleTypeDef>
		Left30Sensor(Left30I2Chandler),
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8000460:	69f9      	ldr	r1, [r7, #28]
 8000462:	4618      	mov	r0, r3
 8000464:	f000 ff26 	bl	80012b4 <_ZN7VL53L0XC1EP19__I2C_HandleTypeDef>
		Left60Sensor(Left60I2Chandler),
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800046e:	6a39      	ldr	r1, [r7, #32]
 8000470:	4618      	mov	r0, r3
 8000472:	f000 ff1f 	bl	80012b4 <_ZN7VL53L0XC1EP19__I2C_HandleTypeDef>
		FrontRightESC(ESCtimerHandler, CC2E),
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 800047c:	2204      	movs	r2, #4
 800047e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000480:	4618      	mov	r0, r3
 8000482:	f7ff ff45 	bl	8000310 <_ZN8BLDC_ESCC1EP11TIM_TypeDefh>
		FrontLeftESC(ESCtimerHandler, CC1E),
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 800048c:	2200      	movs	r2, #0
 800048e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000490:	4618      	mov	r0, r3
 8000492:	f7ff ff3d 	bl	8000310 <_ZN8BLDC_ESCC1EP11TIM_TypeDefh>
		RearRightESC(ESCtimerHandler, CC4E),
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 800049c:	220c      	movs	r2, #12
 800049e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80004a0:	4618      	mov	r0, r3
 80004a2:	f7ff ff35 	bl	8000310 <_ZN8BLDC_ESCC1EP11TIM_TypeDefh>
		RearLeftESC(ESCtimerHandler, CC3E)
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 80004ac:	2208      	movs	r2, #8
 80004ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff ff2d 	bl	8000310 <_ZN8BLDC_ESCC1EP11TIM_TypeDefh>
//		FrontRightESC(TIM3, CC2E),
//		FrontLeftESC(TIM3, CC1E),
//		RearRightESC(TIM3, CC4E),
//		RearLeftESC(TIM3, CC3E)
{
	this -> MasterSumoRobotState = setup;
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	2200      	movs	r2, #0
 80004ba:	f883 2329 	strb.w	r2, [r3, #809]	@ 0x329
	this -> SetupPhaseState = boot;
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	2200      	movs	r2, #0
 80004c2:	f883 232a 	strb.w	r2, [r3, #810]	@ 0x32a
	this -> SumoRobotStartOrientation = orientation1;
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	2200      	movs	r2, #0
 80004ca:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
	this -> RobotSpeedFactor = 0;
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	2200      	movs	r2, #0
 80004d2:	f883 2327 	strb.w	r2, [r3, #807]	@ 0x327
	this -> readingsTransition = 0;
 80004d6:	68fb      	ldr	r3, [r7, #12]
 80004d8:	2200      	movs	r2, #0
 80004da:	f883 2332 	strb.w	r2, [r3, #818]	@ 0x332
	this -> initialEntry = 0;
 80004de:	68fb      	ldr	r3, [r7, #12]
 80004e0:	2200      	movs	r2, #0
 80004e2:	f883 2331 	strb.w	r2, [r3, #817]	@ 0x331
	this -> currentState = no_readings;
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	2200      	movs	r2, #0
 80004ea:	f883 2334 	strb.w	r2, [r3, #820]	@ 0x334
	this -> previousState = no_readings;
 80004ee:	68fb      	ldr	r3, [r7, #12]
 80004f0:	2200      	movs	r2, #0
 80004f2:	f883 2335 	strb.w	r2, [r3, #821]	@ 0x335
	this -> Readings.Left60 = 0;
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	2200      	movs	r2, #0
 80004fa:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
	this -> Readings.Left30 = 0;
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	2200      	movs	r2, #0
 8000502:	f883 232d 	strb.w	r2, [r3, #813]	@ 0x32d
	this -> Readings.Middle = 0;
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	2200      	movs	r2, #0
 800050a:	f883 232e 	strb.w	r2, [r3, #814]	@ 0x32e
	this -> Readings.Right30 = 0;
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	2200      	movs	r2, #0
 8000512:	f883 232f 	strb.w	r2, [r3, #815]	@ 0x32f
	this -> Readings.Right60 = 0;
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	2200      	movs	r2, #0
 800051a:	f883 2330 	strb.w	r2, [r3, #816]	@ 0x330
	this -> middleVerification = 0;
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	2200      	movs	r2, #0
 8000522:	f883 2336 	strb.w	r2, [r3, #822]	@ 0x336
	this -> currentDirection = stopped;
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	2200      	movs	r2, #0
 800052a:	f883 2337 	strb.w	r2, [r3, #823]	@ 0x337
	this -> directionLastSeen = none;
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	2200      	movs	r2, #0
 8000532:	f883 2333 	strb.w	r2, [r3, #819]	@ 0x333

}
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	4618      	mov	r0, r3
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}

08000540 <_ZN10Sumo_Robot13MotorShutdownEv>:


//
void Sumo_Robot::MotorShutdown()
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
	this -> FrontRightESC.speed_control(MIN_SPEED);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 800054e:	2164      	movs	r1, #100	@ 0x64
 8000550:	4618      	mov	r0, r3
 8000552:	f7ff ff15 	bl	8000380 <_ZN8BLDC_ESC13speed_controlEm>
	this -> FrontLeftESC.speed_control(MIN_SPEED);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 800055c:	2164      	movs	r1, #100	@ 0x64
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff ff0e 	bl	8000380 <_ZN8BLDC_ESC13speed_controlEm>
	this -> RearRightESC.speed_control(MIN_SPEED);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 800056a:	2164      	movs	r1, #100	@ 0x64
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff ff07 	bl	8000380 <_ZN8BLDC_ESC13speed_controlEm>
	this -> RearLeftESC.speed_control(MIN_SPEED);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8000578:	2164      	movs	r1, #100	@ 0x64
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff ff00 	bl	8000380 <_ZN8BLDC_ESC13speed_controlEm>
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <_ZN10Sumo_Robot13EstopActivateEv>:


void Sumo_Robot::EstopActivate()
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	MasterSumoRobotState = estop;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2202      	movs	r2, #2
 8000594:	f883 2329 	strb.w	r2, [r3, #809]	@ 0x329
	/***************TESTING CODE BEGIN******************/
	CLEAR(PA,3);
 8000598:	4b0b      	ldr	r3, [pc, #44]	@ (80005c8 <_ZN10Sumo_Robot13EstopActivateEv+0x40>)
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	4a0a      	ldr	r2, [pc, #40]	@ (80005c8 <_ZN10Sumo_Robot13EstopActivateEv+0x40>)
 800059e:	f023 0308 	bic.w	r3, r3, #8
 80005a2:	6153      	str	r3, [r2, #20]
	CLEAR(PC,3);
 80005a4:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <_ZN10Sumo_Robot13EstopActivateEv+0x44>)
 80005a6:	695b      	ldr	r3, [r3, #20]
 80005a8:	4a08      	ldr	r2, [pc, #32]	@ (80005cc <_ZN10Sumo_Robot13EstopActivateEv+0x44>)
 80005aa:	f023 0308 	bic.w	r3, r3, #8
 80005ae:	6153      	str	r3, [r2, #20]
	CLEAR(PC,0);
 80005b0:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <_ZN10Sumo_Robot13EstopActivateEv+0x44>)
 80005b2:	695b      	ldr	r3, [r3, #20]
 80005b4:	4a05      	ldr	r2, [pc, #20]	@ (80005cc <_ZN10Sumo_Robot13EstopActivateEv+0x44>)
 80005b6:	f023 0301 	bic.w	r3, r3, #1
 80005ba:	6153      	str	r3, [r2, #20]
	/****************TESTING CODE END*******************/
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr
 80005c8:	58020000 	.word	0x58020000
 80005cc:	58020800 	.word	0x58020800

080005d0 <_ZN10Sumo_Robot16SetupPhaseUpdateEv>:


void Sumo_Robot::SetupPhaseUpdate()
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b088      	sub	sp, #32
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	6078      	str	r0, [r7, #4]
	switch (SetupPhaseState)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f893 332a 	ldrb.w	r3, [r3, #810]	@ 0x32a
 80005de:	2b07      	cmp	r3, #7
 80005e0:	f200 8245 	bhi.w	8000a6e <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x49e>
 80005e4:	a201      	add	r2, pc, #4	@ (adr r2, 80005ec <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x1c>)
 80005e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ea:	bf00      	nop
 80005ec:	0800060d 	.word	0x0800060d
 80005f0:	08000633 	.word	0x08000633
 80005f4:	080008c1 	.word	0x080008c1
 80005f8:	08000975 	.word	0x08000975
 80005fc:	08000a6f 	.word	0x08000a6f
 8000600:	08000a6f 	.word	0x08000a6f
 8000604:	080009cf 	.word	0x080009cf
 8000608:	08000a4f 	.word	0x08000a4f
	{
		case (boot):
		{
			MotorShutdown();
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f7ff ff97 	bl	8000540 <_ZN10Sumo_Robot13MotorShutdownEv>
			onboardDisplay.showScreen(BootScreen);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	3304      	adds	r3, #4
 8000616:	2200      	movs	r2, #0
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fc04 	bl	8002e28 <_ZN9WaveShare10showScreenE6Screenh>
			HAL_Delay(5000);
 8000620:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000624:	f005 feec 	bl	8006400 <HAL_Delay>
			SetupPhaseState = chooseStartingOrientation;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2201      	movs	r2, #1
 800062c:	f883 232a 	strb.w	r2, [r3, #810]	@ 0x32a
			break;
 8000630:	e22d      	b.n	8000a8e <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4be>
		}
		case (chooseStartingOrientation):
		{

			switch (SumoRobotStartOrientation)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f893 3328 	ldrb.w	r3, [r3, #808]	@ 0x328
 8000638:	2b04      	cmp	r3, #4
 800063a:	f200 812b 	bhi.w	8000894 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2c4>
 800063e:	a201      	add	r2, pc, #4	@ (adr r2, 8000644 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x74>)
 8000640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000644:	08000659 	.word	0x08000659
 8000648:	080006cd 	.word	0x080006cd
 800064c:	08000741 	.word	0x08000741
 8000650:	080007b5 	.word	0x080007b5
 8000654:	08000825 	.word	0x08000825
			{
				case (orientation1):
				{
					onboardDisplay.showScreen(OrientationScreen1);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3304      	adds	r3, #4
 800065c:	2200      	movs	r2, #0
 800065e:	2102      	movs	r1, #2
 8000660:	4618      	mov	r0, r3
 8000662:	f002 fbe1 	bl	8002e28 <_ZN9WaveShare10showScreenE6Screenh>

					uint16_t temp = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	82fb      	strh	r3, [r7, #22]
					onboardButtonMatrix.update(&temp);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f107 0216 	add.w	r2, r7, #22
 8000670:	4611      	mov	r1, r2
 8000672:	4618      	mov	r0, r3
 8000674:	f003 ffdc 	bl	8004630 <_ZN6btnMat6updateEPt>

					if( !(temp & ((1 << 1) | (1 << 4) | (1 << 6) | (1 << 9))) )
 8000678:	8afb      	ldrh	r3, [r7, #22]
 800067a:	461a      	mov	r2, r3
 800067c:	f240 2352 	movw	r3, #594	@ 0x252
 8000680:	4013      	ands	r3, r2
 8000682:	2b00      	cmp	r3, #0
 8000684:	f000 8108 	beq.w	8000898 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2c8>
						break;

					if(temp == 0x0002)
 8000688:	8afb      	ldrh	r3, [r7, #22]
 800068a:	2b02      	cmp	r3, #2
 800068c:	d104      	bne.n	8000698 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0xc8>
						SumoRobotStartOrientation = orientation5;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	2204      	movs	r2, #4
 8000692:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
					else if(temp == 0x0010)
						SetupPhaseState = wheelClean;
					else if(temp == 0x0040)
						SetupPhaseState = chooseSpeed;

					break;
 8000696:	e101      	b.n	800089c <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2cc>
					else if(temp == 0x0200)
 8000698:	8afb      	ldrh	r3, [r7, #22]
 800069a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800069e:	d104      	bne.n	80006aa <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0xda>
						SumoRobotStartOrientation = orientation2;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2201      	movs	r2, #1
 80006a4:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
					break;
 80006a8:	e0f8      	b.n	800089c <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2cc>
					else if(temp == 0x0010)
 80006aa:	8afb      	ldrh	r3, [r7, #22]
 80006ac:	2b10      	cmp	r3, #16
 80006ae:	d104      	bne.n	80006ba <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0xea>
						SetupPhaseState = wheelClean;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2206      	movs	r2, #6
 80006b4:	f883 232a 	strb.w	r2, [r3, #810]	@ 0x32a
					break;
 80006b8:	e0f0      	b.n	800089c <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2cc>
					else if(temp == 0x0040)
 80006ba:	8afb      	ldrh	r3, [r7, #22]
 80006bc:	2b40      	cmp	r3, #64	@ 0x40
 80006be:	f040 80ed 	bne.w	800089c <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2cc>
						SetupPhaseState = chooseSpeed;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2202      	movs	r2, #2
 80006c6:	f883 232a 	strb.w	r2, [r3, #810]	@ 0x32a
					break;
 80006ca:	e0e7      	b.n	800089c <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2cc>
				}
				case (orientation2):
				{
					onboardDisplay.showScreen(OrientationScreen2);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3304      	adds	r3, #4
 80006d0:	2200      	movs	r2, #0
 80006d2:	2103      	movs	r1, #3
 80006d4:	4618      	mov	r0, r3
 80006d6:	f002 fba7 	bl	8002e28 <_ZN9WaveShare10showScreenE6Screenh>

					uint16_t temp = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	82bb      	strh	r3, [r7, #20]
					onboardButtonMatrix.update(&temp);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f107 0214 	add.w	r2, r7, #20
 80006e4:	4611      	mov	r1, r2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 ffa2 	bl	8004630 <_ZN6btnMat6updateEPt>

					if( !(temp & ((1 << 1) | (1 << 4) | (1 << 6) | (1 << 9))) )
 80006ec:	8abb      	ldrh	r3, [r7, #20]
 80006ee:	461a      	mov	r2, r3
 80006f0:	f240 2352 	movw	r3, #594	@ 0x252
 80006f4:	4013      	ands	r3, r2
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	f000 80d2 	beq.w	80008a0 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2d0>
						break;

					if(temp == 0x0002)
 80006fc:	8abb      	ldrh	r3, [r7, #20]
 80006fe:	2b02      	cmp	r3, #2
 8000700:	d104      	bne.n	800070c <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x13c>
						SumoRobotStartOrientation = orientation1;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2200      	movs	r2, #0
 8000706:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
					else if(temp == 0x0010)
						SetupPhaseState = wheelClean;
					else if(temp == 0x0040)
						SetupPhaseState = chooseSpeed;

					break;
 800070a:	e0cb      	b.n	80008a4 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2d4>
					else if(temp == 0x0200)
 800070c:	8abb      	ldrh	r3, [r7, #20]
 800070e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000712:	d104      	bne.n	800071e <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x14e>
						SumoRobotStartOrientation = orientation3;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2202      	movs	r2, #2
 8000718:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
					break;
 800071c:	e0c2      	b.n	80008a4 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2d4>
					else if(temp == 0x0010)
 800071e:	8abb      	ldrh	r3, [r7, #20]
 8000720:	2b10      	cmp	r3, #16
 8000722:	d104      	bne.n	800072e <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x15e>
						SetupPhaseState = wheelClean;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2206      	movs	r2, #6
 8000728:	f883 232a 	strb.w	r2, [r3, #810]	@ 0x32a
					break;
 800072c:	e0ba      	b.n	80008a4 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2d4>
					else if(temp == 0x0040)
 800072e:	8abb      	ldrh	r3, [r7, #20]
 8000730:	2b40      	cmp	r3, #64	@ 0x40
 8000732:	f040 80b7 	bne.w	80008a4 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2d4>
						SetupPhaseState = chooseSpeed;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	2202      	movs	r2, #2
 800073a:	f883 232a 	strb.w	r2, [r3, #810]	@ 0x32a
					break;
 800073e:	e0b1      	b.n	80008a4 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2d4>
				}
				case (orientation3):
				{
					onboardDisplay.showScreen(OrientationScreen3);
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3304      	adds	r3, #4
 8000744:	2200      	movs	r2, #0
 8000746:	2104      	movs	r1, #4
 8000748:	4618      	mov	r0, r3
 800074a:	f002 fb6d 	bl	8002e28 <_ZN9WaveShare10showScreenE6Screenh>

					uint16_t temp = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	827b      	strh	r3, [r7, #18]
					onboardButtonMatrix.update(&temp);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f107 0212 	add.w	r2, r7, #18
 8000758:	4611      	mov	r1, r2
 800075a:	4618      	mov	r0, r3
 800075c:	f003 ff68 	bl	8004630 <_ZN6btnMat6updateEPt>

					if( !(temp & ((1 << 1) | (1 << 4) | (1 << 6) | (1 << 9))) )
 8000760:	8a7b      	ldrh	r3, [r7, #18]
 8000762:	461a      	mov	r2, r3
 8000764:	f240 2352 	movw	r3, #594	@ 0x252
 8000768:	4013      	ands	r3, r2
 800076a:	2b00      	cmp	r3, #0
 800076c:	f000 809c 	beq.w	80008a8 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2d8>
						break;

					if(temp == 0x0002)
 8000770:	8a7b      	ldrh	r3, [r7, #18]
 8000772:	2b02      	cmp	r3, #2
 8000774:	d104      	bne.n	8000780 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x1b0>
						SumoRobotStartOrientation = orientation2;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	2201      	movs	r2, #1
 800077a:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
					else if(temp == 0x0010)
						SetupPhaseState = wheelClean;
					else if(temp == 0x0040)
						SetupPhaseState = chooseSpeed;

					break;
 800077e:	e095      	b.n	80008ac <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2dc>
					else if(temp == 0x0200)
 8000780:	8a7b      	ldrh	r3, [r7, #18]
 8000782:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000786:	d104      	bne.n	8000792 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x1c2>
						SumoRobotStartOrientation = orientation4;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2203      	movs	r2, #3
 800078c:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
					break;
 8000790:	e08c      	b.n	80008ac <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2dc>
					else if(temp == 0x0010)
 8000792:	8a7b      	ldrh	r3, [r7, #18]
 8000794:	2b10      	cmp	r3, #16
 8000796:	d104      	bne.n	80007a2 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x1d2>
						SetupPhaseState = wheelClean;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2206      	movs	r2, #6
 800079c:	f883 232a 	strb.w	r2, [r3, #810]	@ 0x32a
					break;
 80007a0:	e084      	b.n	80008ac <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2dc>
					else if(temp == 0x0040)
 80007a2:	8a7b      	ldrh	r3, [r7, #18]
 80007a4:	2b40      	cmp	r3, #64	@ 0x40
 80007a6:	f040 8081 	bne.w	80008ac <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2dc>
						SetupPhaseState = chooseSpeed;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2202      	movs	r2, #2
 80007ae:	f883 232a 	strb.w	r2, [r3, #810]	@ 0x32a
					break;
 80007b2:	e07b      	b.n	80008ac <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2dc>
				}
				case (orientation4):
				{
					onboardDisplay.showScreen(OrientationScreen4);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	3304      	adds	r3, #4
 80007b8:	2200      	movs	r2, #0
 80007ba:	2105      	movs	r1, #5
 80007bc:	4618      	mov	r0, r3
 80007be:	f002 fb33 	bl	8002e28 <_ZN9WaveShare10showScreenE6Screenh>

					uint16_t temp = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	823b      	strh	r3, [r7, #16]
					onboardButtonMatrix.update(&temp);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	f107 0210 	add.w	r2, r7, #16
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 ff2e 	bl	8004630 <_ZN6btnMat6updateEPt>

					if( !(temp & ((1 << 1) | (1 << 4) | (1 << 6) | (1 << 9))) )
 80007d4:	8a3b      	ldrh	r3, [r7, #16]
 80007d6:	461a      	mov	r2, r3
 80007d8:	f240 2352 	movw	r3, #594	@ 0x252
 80007dc:	4013      	ands	r3, r2
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d066      	beq.n	80008b0 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2e0>
						break;

					if(temp == 0x0002)
 80007e2:	8a3b      	ldrh	r3, [r7, #16]
 80007e4:	2b02      	cmp	r3, #2
 80007e6:	d104      	bne.n	80007f2 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x222>
						SumoRobotStartOrientation = orientation3;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2202      	movs	r2, #2
 80007ec:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
					else if(temp == 0x0010)
						SetupPhaseState = wheelClean;
					else if(temp == 0x0040)
						SetupPhaseState = chooseSpeed;

					break;
 80007f0:	e060      	b.n	80008b4 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2e4>
					else if(temp == 0x0200)
 80007f2:	8a3b      	ldrh	r3, [r7, #16]
 80007f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80007f8:	d104      	bne.n	8000804 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x234>
						SumoRobotStartOrientation = orientation5;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	2204      	movs	r2, #4
 80007fe:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
					break;
 8000802:	e057      	b.n	80008b4 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2e4>
					else if(temp == 0x0010)
 8000804:	8a3b      	ldrh	r3, [r7, #16]
 8000806:	2b10      	cmp	r3, #16
 8000808:	d104      	bne.n	8000814 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x244>
						SetupPhaseState = wheelClean;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2206      	movs	r2, #6
 800080e:	f883 232a 	strb.w	r2, [r3, #810]	@ 0x32a
					break;
 8000812:	e04f      	b.n	80008b4 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2e4>
					else if(temp == 0x0040)
 8000814:	8a3b      	ldrh	r3, [r7, #16]
 8000816:	2b40      	cmp	r3, #64	@ 0x40
 8000818:	d14c      	bne.n	80008b4 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2e4>
						SetupPhaseState = chooseSpeed;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2202      	movs	r2, #2
 800081e:	f883 232a 	strb.w	r2, [r3, #810]	@ 0x32a
					break;
 8000822:	e047      	b.n	80008b4 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2e4>
				}
				case (orientation5):
				{
					onboardDisplay.showScreen(OrientationScreen5);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	3304      	adds	r3, #4
 8000828:	2200      	movs	r2, #0
 800082a:	2106      	movs	r1, #6
 800082c:	4618      	mov	r0, r3
 800082e:	f002 fafb 	bl	8002e28 <_ZN9WaveShare10showScreenE6Screenh>

					uint16_t temp = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	81fb      	strh	r3, [r7, #14]
					onboardButtonMatrix.update(&temp);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f107 020e 	add.w	r2, r7, #14
 800083c:	4611      	mov	r1, r2
 800083e:	4618      	mov	r0, r3
 8000840:	f003 fef6 	bl	8004630 <_ZN6btnMat6updateEPt>

					if( !(temp & ((1 << 1) | (1 << 4) | (1 << 6) | (1 << 9))) )
 8000844:	89fb      	ldrh	r3, [r7, #14]
 8000846:	461a      	mov	r2, r3
 8000848:	f240 2352 	movw	r3, #594	@ 0x252
 800084c:	4013      	ands	r3, r2
 800084e:	2b00      	cmp	r3, #0
 8000850:	d032      	beq.n	80008b8 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2e8>
						break;

					if(temp == 0x0002)
 8000852:	89fb      	ldrh	r3, [r7, #14]
 8000854:	2b02      	cmp	r3, #2
 8000856:	d104      	bne.n	8000862 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x292>
						SumoRobotStartOrientation = orientation4;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2203      	movs	r2, #3
 800085c:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
					else if(temp == 0x0010)
						SetupPhaseState = wheelClean;
					else if(temp == 0x0040)
						SetupPhaseState = chooseSpeed;

					break;
 8000860:	e02c      	b.n	80008bc <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2ec>
					else if(temp == 0x0200)
 8000862:	89fb      	ldrh	r3, [r7, #14]
 8000864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000868:	d104      	bne.n	8000874 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2a4>
						SumoRobotStartOrientation = orientation1;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2200      	movs	r2, #0
 800086e:	f883 2328 	strb.w	r2, [r3, #808]	@ 0x328
					break;
 8000872:	e023      	b.n	80008bc <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2ec>
					else if(temp == 0x0010)
 8000874:	89fb      	ldrh	r3, [r7, #14]
 8000876:	2b10      	cmp	r3, #16
 8000878:	d104      	bne.n	8000884 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2b4>
						SetupPhaseState = wheelClean;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2206      	movs	r2, #6
 800087e:	f883 232a 	strb.w	r2, [r3, #810]	@ 0x32a
					break;
 8000882:	e01b      	b.n	80008bc <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2ec>
					else if(temp == 0x0040)
 8000884:	89fb      	ldrh	r3, [r7, #14]
 8000886:	2b40      	cmp	r3, #64	@ 0x40
 8000888:	d118      	bne.n	80008bc <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2ec>
						SetupPhaseState = chooseSpeed;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2202      	movs	r2, #2
 800088e:	f883 232a 	strb.w	r2, [r3, #810]	@ 0x32a
					break;
 8000892:	e013      	b.n	80008bc <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x2ec>
				}
				default:
				{
					break;
 8000894:	bf00      	nop
 8000896:	e0fa      	b.n	8000a8e <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4be>
						break;
 8000898:	bf00      	nop
 800089a:	e0f8      	b.n	8000a8e <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4be>
					break;
 800089c:	bf00      	nop
 800089e:	e0f6      	b.n	8000a8e <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4be>
						break;
 80008a0:	bf00      	nop
 80008a2:	e0f4      	b.n	8000a8e <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4be>
					break;
 80008a4:	bf00      	nop
 80008a6:	e0f2      	b.n	8000a8e <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4be>
						break;
 80008a8:	bf00      	nop
 80008aa:	e0f0      	b.n	8000a8e <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4be>
					break;
 80008ac:	bf00      	nop
 80008ae:	e0ee      	b.n	8000a8e <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4be>
						break;
 80008b0:	bf00      	nop
 80008b2:	e0ec      	b.n	8000a8e <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4be>
					break;
 80008b4:	bf00      	nop
 80008b6:	e0ea      	b.n	8000a8e <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4be>
						break;
 80008b8:	bf00      	nop
 80008ba:	e0e8      	b.n	8000a8e <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4be>
					break;
 80008bc:	bf00      	nop
				}
			} // End of SumoRobotStartOrientation switch
			break;
 80008be:	e0e6      	b.n	8000a8e <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4be>
		} // End of chooseStartingOrientation case
		case (chooseSpeed):
		{
			onboardDisplay.showScreen(SpeedScreen, RobotSpeedFactor);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	1d18      	adds	r0, r3, #4
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	f893 3327 	ldrb.w	r3, [r3, #807]	@ 0x327
 80008ca:	461a      	mov	r2, r3
 80008cc:	2101      	movs	r1, #1
 80008ce:	f002 faab 	bl	8002e28 <_ZN9WaveShare10showScreenE6Screenh>

			uint16_t temp = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	81bb      	strh	r3, [r7, #12]
			onboardButtonMatrix.update(&temp);
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	f107 020c 	add.w	r2, r7, #12
 80008dc:	4611      	mov	r1, r2
 80008de:	4618      	mov	r0, r3
 80008e0:	f003 fea6 	bl	8004630 <_ZN6btnMat6updateEPt>

			if( !(temp & ((1 << 1) | (1 << 4) | (1 << 6) | (1 << 9))) )
 80008e4:	89bb      	ldrh	r3, [r7, #12]
 80008e6:	461a      	mov	r2, r3
 80008e8:	f240 2352 	movw	r3, #594	@ 0x252
 80008ec:	4013      	ands	r3, r2
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	f000 80c2 	beq.w	8000a78 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4a8>
				break;

			if(temp == 0x0002)
 80008f4:	89bb      	ldrh	r3, [r7, #12]
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d113      	bne.n	8000922 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x352>
				RobotSpeedFactor = (RobotSpeedFactor < 2) ? RobotSpeedFactor + 1 : RobotSpeedFactor = 2; //Increment speed
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f893 3327 	ldrb.w	r3, [r3, #807]	@ 0x327
 8000900:	2b01      	cmp	r3, #1
 8000902:	d805      	bhi.n	8000910 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x340>
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	f893 3327 	ldrb.w	r3, [r3, #807]	@ 0x327
 800090a:	3301      	adds	r3, #1
 800090c:	b2da      	uxtb	r2, r3
 800090e:	e004      	b.n	800091a <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x34a>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	2202      	movs	r2, #2
 8000914:	f883 2327 	strb.w	r2, [r3, #807]	@ 0x327
 8000918:	2202      	movs	r2, #2
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f883 2327 	strb.w	r2, [r3, #807]	@ 0x327
			else if(temp == 0x0010)
				SetupPhaseState = chooseStartingOrientation;
			else if(temp == 0x0040)
				SetupPhaseState = armConfirmation;

			break;
 8000920:	e0ac      	b.n	8000a7c <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4ac>
			else if(temp == 0x0200)
 8000922:	89bb      	ldrh	r3, [r7, #12]
 8000924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000928:	d113      	bne.n	8000952 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x382>
				RobotSpeedFactor = (RobotSpeedFactor > 0) ? RobotSpeedFactor - 1 : RobotSpeedFactor = 0; //Decrement speed
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	f893 3327 	ldrb.w	r3, [r3, #807]	@ 0x327
 8000930:	2b00      	cmp	r3, #0
 8000932:	d005      	beq.n	8000940 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x370>
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f893 3327 	ldrb.w	r3, [r3, #807]	@ 0x327
 800093a:	3b01      	subs	r3, #1
 800093c:	b2da      	uxtb	r2, r3
 800093e:	e004      	b.n	800094a <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x37a>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	2200      	movs	r2, #0
 8000944:	f883 2327 	strb.w	r2, [r3, #807]	@ 0x327
 8000948:	2200      	movs	r2, #0
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f883 2327 	strb.w	r2, [r3, #807]	@ 0x327
			break;
 8000950:	e094      	b.n	8000a7c <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4ac>
			else if(temp == 0x0010)
 8000952:	89bb      	ldrh	r3, [r7, #12]
 8000954:	2b10      	cmp	r3, #16
 8000956:	d104      	bne.n	8000962 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x392>
				SetupPhaseState = chooseStartingOrientation;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2201      	movs	r2, #1
 800095c:	f883 232a 	strb.w	r2, [r3, #810]	@ 0x32a
			break;
 8000960:	e08c      	b.n	8000a7c <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4ac>
			else if(temp == 0x0040)
 8000962:	89bb      	ldrh	r3, [r7, #12]
 8000964:	2b40      	cmp	r3, #64	@ 0x40
 8000966:	f040 8089 	bne.w	8000a7c <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4ac>
				SetupPhaseState = armConfirmation;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2203      	movs	r2, #3
 800096e:	f883 232a 	strb.w	r2, [r3, #810]	@ 0x32a
			break;
 8000972:	e083      	b.n	8000a7c <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4ac>
		}
		case (armConfirmation):
		{
			onboardDisplay.showScreen(ArmConfirmationScreen);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3304      	adds	r3, #4
 8000978:	2200      	movs	r2, #0
 800097a:	2107      	movs	r1, #7
 800097c:	4618      	mov	r0, r3
 800097e:	f002 fa53 	bl	8002e28 <_ZN9WaveShare10showScreenE6Screenh>

			uint16_t temp = 0;
 8000982:	2300      	movs	r3, #0
 8000984:	817b      	strh	r3, [r7, #10]
			onboardButtonMatrix.update(&temp);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f107 020a 	add.w	r2, r7, #10
 800098c:	4611      	mov	r1, r2
 800098e:	4618      	mov	r0, r3
 8000990:	f003 fe4e 	bl	8004630 <_ZN6btnMat6updateEPt>

			if( !(temp & ((1 << 4) | (1 << 5) | (1 << 6))) )
 8000994:	897b      	ldrh	r3, [r7, #10]
 8000996:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800099a:	2b00      	cmp	r3, #0
 800099c:	d070      	beq.n	8000a80 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4b0>
				break;

			if(temp == 0x0020)
 800099e:	897b      	ldrh	r3, [r7, #10]
 80009a0:	2b20      	cmp	r3, #32
 80009a2:	d104      	bne.n	80009ae <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x3de>
				SetupPhaseState = armed;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2207      	movs	r2, #7
 80009a8:	f883 232a 	strb.w	r2, [r3, #810]	@ 0x32a
			else if(temp == 0x0010)
				SetupPhaseState = chooseSpeed;
			else if(temp == 0x0040)
				SetupPhaseState = wheelClean;

			break;
 80009ac:	e06a      	b.n	8000a84 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4b4>
			else if(temp == 0x0010)
 80009ae:	897b      	ldrh	r3, [r7, #10]
 80009b0:	2b10      	cmp	r3, #16
 80009b2:	d104      	bne.n	80009be <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x3ee>
				SetupPhaseState = chooseSpeed;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2202      	movs	r2, #2
 80009b8:	f883 232a 	strb.w	r2, [r3, #810]	@ 0x32a
			break;
 80009bc:	e062      	b.n	8000a84 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4b4>
			else if(temp == 0x0040)
 80009be:	897b      	ldrh	r3, [r7, #10]
 80009c0:	2b40      	cmp	r3, #64	@ 0x40
 80009c2:	d15f      	bne.n	8000a84 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4b4>
				SetupPhaseState = wheelClean;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2206      	movs	r2, #6
 80009c8:	f883 232a 	strb.w	r2, [r3, #810]	@ 0x32a
			break;
 80009cc:	e05a      	b.n	8000a84 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4b4>
		}
		case (wheelClean):
		{
			onboardDisplay.showScreen(wheelCleanScreen);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	3304      	adds	r3, #4
 80009d2:	2200      	movs	r2, #0
 80009d4:	210b      	movs	r1, #11
 80009d6:	4618      	mov	r0, r3
 80009d8:	f002 fa26 	bl	8002e28 <_ZN9WaveShare10showScreenE6Screenh>

			uint16_t temp = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	813b      	strh	r3, [r7, #8]
			onboardButtonMatrix.update(&temp);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	f107 0208 	add.w	r2, r7, #8
 80009e6:	4611      	mov	r1, r2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f003 fe21 	bl	8004630 <_ZN6btnMat6updateEPt>

			if( !(temp & ((1 << 1) | (1 << 4) | (1 << 6) | (1 << 9))) )
 80009ee:	893b      	ldrh	r3, [r7, #8]
 80009f0:	461a      	mov	r2, r3
 80009f2:	f240 2352 	movw	r3, #594	@ 0x252
 80009f6:	4013      	ands	r3, r2
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d045      	beq.n	8000a88 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4b8>
				break;

			if(temp == 0x0002)
 80009fc:	893b      	ldrh	r3, [r7, #8]
 80009fe:	2b02      	cmp	r3, #2
 8000a00:	d108      	bne.n	8000a14 <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x444>
				SetSpeeds(SPEED1, SPEED1, SPEED1, SPEED1);
 8000a02:	2373      	movs	r3, #115	@ 0x73
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	2373      	movs	r3, #115	@ 0x73
 8000a08:	2273      	movs	r2, #115	@ 0x73
 8000a0a:	2173      	movs	r1, #115	@ 0x73
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 f885 	bl	8000b1c <_ZN10Sumo_Robot9SetSpeedsEhhhh>
			else if(temp == 0x0010)
				SetupPhaseState = armConfirmation;
			else if(temp == 0x0040)
				SetupPhaseState = chooseStartingOrientation;

			break;
 8000a12:	e03b      	b.n	8000a8c <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4bc>
			else if(temp == 0x0200)
 8000a14:	893b      	ldrh	r3, [r7, #8]
 8000a16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000a1a:	d108      	bne.n	8000a2e <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x45e>
				SetSpeeds(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 8000a1c:	2364      	movs	r3, #100	@ 0x64
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2364      	movs	r3, #100	@ 0x64
 8000a22:	2264      	movs	r2, #100	@ 0x64
 8000a24:	2164      	movs	r1, #100	@ 0x64
 8000a26:	6878      	ldr	r0, [r7, #4]
 8000a28:	f000 f878 	bl	8000b1c <_ZN10Sumo_Robot9SetSpeedsEhhhh>
			break;
 8000a2c:	e02e      	b.n	8000a8c <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4bc>
			else if(temp == 0x0010)
 8000a2e:	893b      	ldrh	r3, [r7, #8]
 8000a30:	2b10      	cmp	r3, #16
 8000a32:	d104      	bne.n	8000a3e <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x46e>
				SetupPhaseState = armConfirmation;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2203      	movs	r2, #3
 8000a38:	f883 232a 	strb.w	r2, [r3, #810]	@ 0x32a
			break;
 8000a3c:	e026      	b.n	8000a8c <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4bc>
			else if(temp == 0x0040)
 8000a3e:	893b      	ldrh	r3, [r7, #8]
 8000a40:	2b40      	cmp	r3, #64	@ 0x40
 8000a42:	d123      	bne.n	8000a8c <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4bc>
				SetupPhaseState = chooseStartingOrientation;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2201      	movs	r2, #1
 8000a48:	f883 232a 	strb.w	r2, [r3, #810]	@ 0x32a
			break;
 8000a4c:	e01e      	b.n	8000a8c <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4bc>
		}
		case (armed):
		{
			MasterSumoRobotState = run;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2201      	movs	r2, #1
 8000a52:	f883 2329 	strb.w	r2, [r3, #809]	@ 0x329
			RunPhaseState = RunStateEntry;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f883 232b 	strb.w	r2, [r3, #811]	@ 0x32b
			onboardDisplay.showScreen(ArmedScreen);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2200      	movs	r2, #0
 8000a64:	2108      	movs	r1, #8
 8000a66:	4618      	mov	r0, r3
 8000a68:	f002 f9de 	bl	8002e28 <_ZN9WaveShare10showScreenE6Screenh>
//			this -> FrontRightESC.speed_control(200);
//			this -> FrontLeftESC.speed_control(200);
//			this -> RearLeftESC.speed_control(200);
//			this -> RearRightESC.speed_control(200);

			break;
 8000a6c:	e00f      	b.n	8000a8e <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4be>
		}
		default:
		{
			MasterSumoRobotState = estop;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	2202      	movs	r2, #2
 8000a72:	f883 2329 	strb.w	r2, [r3, #809]	@ 0x329
			break;
 8000a76:	e00a      	b.n	8000a8e <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4be>
				break;
 8000a78:	bf00      	nop
 8000a7a:	e008      	b.n	8000a8e <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4be>
			break;
 8000a7c:	bf00      	nop
 8000a7e:	e006      	b.n	8000a8e <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4be>
				break;
 8000a80:	bf00      	nop
 8000a82:	e004      	b.n	8000a8e <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4be>
			break;
 8000a84:	bf00      	nop
 8000a86:	e002      	b.n	8000a8e <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4be>
				break;
 8000a88:	bf00      	nop
 8000a8a:	e000      	b.n	8000a8e <_ZN10Sumo_Robot16SetupPhaseUpdateEv+0x4be>
			break;
 8000a8c:	bf00      	nop
		}
	}
}
 8000a8e:	bf00      	nop
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop

08000a98 <_ZN10Sumo_Robot11updateStateEv>:


// This is the master state machine. One of these cases is always run.
void Sumo_Robot::updateState()
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	switch(MasterSumoRobotState)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f893 3329 	ldrb.w	r3, [r3, #809]	@ 0x329
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d00e      	beq.n	8000ac8 <_ZN10Sumo_Robot11updateStateEv+0x30>
 8000aaa:	2b02      	cmp	r3, #2
 8000aac:	dc30      	bgt.n	8000b10 <_ZN10Sumo_Robot11updateStateEv+0x78>
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d002      	beq.n	8000ab8 <_ZN10Sumo_Robot11updateStateEv+0x20>
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d004      	beq.n	8000ac0 <_ZN10Sumo_Robot11updateStateEv+0x28>

		break;
	}

	}
}
 8000ab6:	e02b      	b.n	8000b10 <_ZN10Sumo_Robot11updateStateEv+0x78>
		SetupPhaseUpdate();
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff fd89 	bl	80005d0 <_ZN10Sumo_Robot16SetupPhaseUpdateEv>
		break;
 8000abe:	e027      	b.n	8000b10 <_ZN10Sumo_Robot11updateStateEv+0x78>
		RunPhaseUpdate();
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f000 f8f1 	bl	8000ca8 <_ZN10Sumo_Robot14RunPhaseUpdateEv>
		break;
 8000ac6:	e023      	b.n	8000b10 <_ZN10Sumo_Robot11updateStateEv+0x78>
		MotorShutdown();
 8000ac8:	6878      	ldr	r0, [r7, #4]
 8000aca:	f7ff fd39 	bl	8000540 <_ZN10Sumo_Robot13MotorShutdownEv>
		onboardDisplay.showScreen(ESTOP);
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3304      	adds	r3, #4
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	210c      	movs	r1, #12
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f002 f9a6 	bl	8002e28 <_ZN9WaveShare10showScreenE6Screenh>
		uint16_t temp = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	81fb      	strh	r3, [r7, #14]
			onboardButtonMatrix.update(&temp);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f107 020e 	add.w	r2, r7, #14
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f003 fda1 	bl	8004630 <_ZN6btnMat6updateEPt>
		while ( !(temp & (1 << 0)) );
 8000aee:	89fb      	ldrh	r3, [r7, #14]
 8000af0:	f003 0301 	and.w	r3, r3, #1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d0f3      	beq.n	8000ae0 <_ZN10Sumo_Robot11updateStateEv+0x48>
		SetupPhaseState = boot;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	f883 232a 	strb.w	r2, [r3, #810]	@ 0x32a
		MasterSumoRobotState = setup;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2200      	movs	r2, #0
 8000b04:	f883 2329 	strb.w	r2, [r3, #809]	@ 0x329
		SloppyTopEstopFlag = 0;
 8000b08:	4b03      	ldr	r3, [pc, #12]	@ (8000b18 <_ZN10Sumo_Robot11updateStateEv+0x80>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	701a      	strb	r2, [r3, #0]
		break;
 8000b0e:	bf00      	nop
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	24000037 	.word	0x24000037

08000b1c <_ZN10Sumo_Robot9SetSpeedsEhhhh>:

void Sumo_Robot::SetSpeeds(uint8_t FrontRight,uint8_t FrontLeft, uint8_t RearRight, uint8_t RearLeft)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
 8000b24:	4608      	mov	r0, r1
 8000b26:	4611      	mov	r1, r2
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	70fb      	strb	r3, [r7, #3]
 8000b2e:	460b      	mov	r3, r1
 8000b30:	70bb      	strb	r3, [r7, #2]
 8000b32:	4613      	mov	r3, r2
 8000b34:	707b      	strb	r3, [r7, #1]
	/***************TESTING COMMENTED OUT BEGIN******************/
	FrontRightESC.speed_control(FrontRight);
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 8000b3c:	78fa      	ldrb	r2, [r7, #3]
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f7ff fc1d 	bl	8000380 <_ZN8BLDC_ESC13speed_controlEm>
	FrontLeftESC.speed_control(FrontLeft);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8000b4c:	78ba      	ldrb	r2, [r7, #2]
 8000b4e:	4611      	mov	r1, r2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fc15 	bl	8000380 <_ZN8BLDC_ESC13speed_controlEm>
	RearRightESC.speed_control(RearRight);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8000b5c:	787a      	ldrb	r2, [r7, #1]
 8000b5e:	4611      	mov	r1, r2
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff fc0d 	bl	8000380 <_ZN8BLDC_ESC13speed_controlEm>
	RearLeftESC.speed_control(RearLeft);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8000b6c:	7c3a      	ldrb	r2, [r7, #16]
 8000b6e:	4611      	mov	r1, r2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fc05 	bl	8000380 <_ZN8BLDC_ESC13speed_controlEm>
	/****************TESTING COMMENTED OUT  END*******************/

	return;
 8000b76:	bf00      	nop
}
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <_ZN10Sumo_Robot11ReadSensorsEv>:

void Sumo_Robot::ReadSensors()
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
	 * sensor 4 = Left30Sensor
	 * sensor 5 = Left60Sensor
	 */

	//The return reading will be in millimeters.
	Readings.Left60  = (Left60Sensor.readRangeSingleMillimeters(&Left60Stats) < MAX_RANGE) ? 1 : 0;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f503 721a 	add.w	r2, r3, #616	@ 0x268
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8000b92:	4619      	mov	r1, r3
 8000b94:	4610      	mov	r0, r2
 8000b96:	f001 fd08 	bl	80025aa <_ZN7VL53L0X26readRangeSingleMillimetersEP18statInfo_t_VL53L0X>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000ba0:	d201      	bcs.n	8000ba6 <_ZN10Sumo_Robot11ReadSensorsEv+0x28>
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	e000      	b.n	8000ba8 <_ZN10Sumo_Robot11ReadSensorsEv+0x2a>
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	f883 232c 	strb.w	r2, [r3, #812]	@ 0x32c
	Readings.Left30  = (Left30Sensor.readRangeSingleMillimeters(&Left30Stats) < MAX_RANGE) ? 1 : 0;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f503 72fe 	add.w	r2, r3, #508	@ 0x1fc
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f203 3312 	addw	r3, r3, #786	@ 0x312
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4610      	mov	r0, r2
 8000bbe:	f001 fcf4 	bl	80025aa <_ZN7VL53L0X26readRangeSingleMillimetersEP18statInfo_t_VL53L0X>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000bc8:	d201      	bcs.n	8000bce <_ZN10Sumo_Robot11ReadSensorsEv+0x50>
 8000bca:	2201      	movs	r2, #1
 8000bcc:	e000      	b.n	8000bd0 <_ZN10Sumo_Robot11ReadSensorsEv+0x52>
 8000bce:	2200      	movs	r2, #0
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f883 232d 	strb.w	r2, [r3, #813]	@ 0x32d
	Readings.Middle  = (MiddleSensor.readRangeSingleMillimeters(&MiddleStats) < MAX_RANGE) ? 1 : 0;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f503 72c8 	add.w	r2, r3, #400	@ 0x190
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f503 7342 	add.w	r3, r3, #776	@ 0x308
 8000be2:	4619      	mov	r1, r3
 8000be4:	4610      	mov	r0, r2
 8000be6:	f001 fce0 	bl	80025aa <_ZN7VL53L0X26readRangeSingleMillimetersEP18statInfo_t_VL53L0X>
 8000bea:	4603      	mov	r3, r0
 8000bec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000bf0:	d201      	bcs.n	8000bf6 <_ZN10Sumo_Robot11ReadSensorsEv+0x78>
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	e000      	b.n	8000bf8 <_ZN10Sumo_Robot11ReadSensorsEv+0x7a>
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f883 232e 	strb.w	r2, [r3, #814]	@ 0x32e
	Readings.Right30 = (Right30Sensor.readRangeSingleMillimeters(&Right30Stats) < MAX_RANGE) ? 1 : 0;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f503 7292 	add.w	r2, r3, #292	@ 0x124
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f203 23fe 	addw	r3, r3, #766	@ 0x2fe
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4610      	mov	r0, r2
 8000c0e:	f001 fccc 	bl	80025aa <_ZN7VL53L0X26readRangeSingleMillimetersEP18statInfo_t_VL53L0X>
 8000c12:	4603      	mov	r3, r0
 8000c14:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c18:	d201      	bcs.n	8000c1e <_ZN10Sumo_Robot11ReadSensorsEv+0xa0>
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	e000      	b.n	8000c20 <_ZN10Sumo_Robot11ReadSensorsEv+0xa2>
 8000c1e:	2200      	movs	r2, #0
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f883 232f 	strb.w	r2, [r3, #815]	@ 0x32f
	Readings.Right60 = (Right60Sensor.readRangeSingleMillimeters(&Right60Stats) < MAX_RANGE) ? 1 : 0;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f503 733d 	add.w	r3, r3, #756	@ 0x2f4
 8000c32:	4619      	mov	r1, r3
 8000c34:	4610      	mov	r0, r2
 8000c36:	f001 fcb8 	bl	80025aa <_ZN7VL53L0X26readRangeSingleMillimetersEP18statInfo_t_VL53L0X>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000c40:	d201      	bcs.n	8000c46 <_ZN10Sumo_Robot11ReadSensorsEv+0xc8>
 8000c42:	2201      	movs	r2, #1
 8000c44:	e000      	b.n	8000c48 <_ZN10Sumo_Robot11ReadSensorsEv+0xca>
 8000c46:	2200      	movs	r2, #0
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f883 2330 	strb.w	r2, [r3, #816]	@ 0x330

	readingsTransition = (Readings.Left60 << 4) | (Readings.Left30 << 3) | (Readings.Middle << 2) | (Readings.Right30 << 1) | Readings.Right60;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f893 332c 	ldrb.w	r3, [r3, #812]	@ 0x32c
 8000c54:	b25b      	sxtb	r3, r3
 8000c56:	011b      	lsls	r3, r3, #4
 8000c58:	b25a      	sxtb	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f893 332d 	ldrb.w	r3, [r3, #813]	@ 0x32d
 8000c60:	b25b      	sxtb	r3, r3
 8000c62:	00db      	lsls	r3, r3, #3
 8000c64:	b25b      	sxtb	r3, r3
 8000c66:	4313      	orrs	r3, r2
 8000c68:	b25a      	sxtb	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	f893 332e 	ldrb.w	r3, [r3, #814]	@ 0x32e
 8000c70:	b25b      	sxtb	r3, r3
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	b25b      	sxtb	r3, r3
 8000c76:	4313      	orrs	r3, r2
 8000c78:	b25a      	sxtb	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	f893 332f 	ldrb.w	r3, [r3, #815]	@ 0x32f
 8000c80:	b25b      	sxtb	r3, r3
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	b25b      	sxtb	r3, r3
 8000c86:	4313      	orrs	r3, r2
 8000c88:	b25a      	sxtb	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f893 3330 	ldrb.w	r3, [r3, #816]	@ 0x330
 8000c90:	b25b      	sxtb	r3, r3
 8000c92:	4313      	orrs	r3, r2
 8000c94:	b25b      	sxtb	r3, r3
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f883 2332 	strb.w	r2, [r3, #818]	@ 0x332
//	Readings.Middle  = MiddleSensor.readRangeSingleMillimeters(&MiddleStats);
//	Readings.Right30 = Right30Sensor.readRangeSingleMillimeters(&Right30Stats);
//	Readings.Right60 = Right60Sensor.readRangeSingleMillimeters(&Right60Stats);
	/****************TESTING CODE END*******************/

	return;
 8000c9e:	bf00      	nop
}
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <_ZN10Sumo_Robot14RunPhaseUpdateEv>:

void Sumo_Robot::RunPhaseUpdate()
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	6078      	str	r0, [r7, #4]
/**
 * If range is less than 1000 mm (1.0 m) then something is in front us
 *
 */
	static uint8_t enterSearching = 0;
	switch(RunPhaseState)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f893 332b 	ldrb.w	r3, [r3, #811]	@ 0x32b
 8000cb6:	2b03      	cmp	r3, #3
 8000cb8:	f200 8271 	bhi.w	800119e <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4f6>
 8000cbc:	a201      	add	r2, pc, #4	@ (adr r2, 8000cc4 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x1c>)
 8000cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc2:	bf00      	nop
 8000cc4:	08000cd5 	.word	0x08000cd5
 8000cc8:	08000ce7 	.word	0x08000ce7
 8000ccc:	08000d7b 	.word	0x08000d7b
 8000cd0:	08000e8f 	.word	0x08000e8f
		case (RunStateEntry):
		{
			//To test the attack routine just directly jump to attack
			//Full testing with search transition to start
			//RunPhaseState = Attack;
			RunPhaseState = Start;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f883 232b 	strb.w	r2, [r3, #811]	@ 0x32b
			HAL_Delay(5000);
 8000cdc:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000ce0:	f005 fb8e 	bl	8006400 <HAL_Delay>
			break;
 8000ce4:	e261      	b.n	80011aa <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x502>
		}

		case (Start):
		{
			switch(SumoRobotStartOrientation)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f893 3328 	ldrb.w	r3, [r3, #808]	@ 0x328
 8000cec:	2b04      	cmp	r3, #4
 8000cee:	d842      	bhi.n	8000d76 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0xce>
 8000cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8000cf8 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x50>)
 8000cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cf6:	bf00      	nop
 8000cf8:	08000d0d 	.word	0x08000d0d
 8000cfc:	08000d25 	.word	0x08000d25
 8000d00:	08000d3d 	.word	0x08000d3d
 8000d04:	08000d55 	.word	0x08000d55
 8000d08:	08000d6d 	.word	0x08000d6d
			/**
			 * Strategy for this one is to pull forward and transition to turn around
			 */
				case(orientation1):
				{
					Searching_Left();
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f000 fa55 	bl	80011bc <_ZN10Sumo_Robot14Searching_LeftEv>
					directionLastSeen = left;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2201      	movs	r2, #1
 8000d16:	f883 2333 	strb.w	r2, [r3, #819]	@ 0x333
					RunPhaseState = Search;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	f883 232b 	strb.w	r2, [r3, #811]	@ 0x32b
					break;
 8000d22:	e029      	b.n	8000d78 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0xd0>
				/**
				 * Strategy for this one is to turn right and hopefully pick up the bot and attack
				 */
				case(orientation2):
				{
					Searching_Left();
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f000 fa49 	bl	80011bc <_ZN10Sumo_Robot14Searching_LeftEv>
					directionLastSeen = left;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	f883 2333 	strb.w	r2, [r3, #819]	@ 0x333
					RunPhaseState = Search;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2202      	movs	r2, #2
 8000d36:	f883 232b 	strb.w	r2, [r3, #811]	@ 0x32b
					break;
 8000d3a:	e01d      	b.n	8000d78 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0xd0>
				/**
				 * Strategy for this one is to turn left and hopefully pick up the bot and attack
				 */
				case(orientation3):
				{
					Searching_Right();
 8000d3c:	6878      	ldr	r0, [r7, #4]
 8000d3e:	f000 fa7b 	bl	8001238 <_ZN10Sumo_Robot15Searching_RightEv>
					directionLastSeen = right;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2202      	movs	r2, #2
 8000d46:	f883 2333 	strb.w	r2, [r3, #819]	@ 0x333
					RunPhaseState = Search;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2202      	movs	r2, #2
 8000d4e:	f883 232b 	strb.w	r2, [r3, #811]	@ 0x32b
					break;
 8000d52:	e011      	b.n	8000d78 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0xd0>
				/**
				 * Strategy for this one is to turn around and attack
				 */
				case(orientation4):
				{
					Searching_Left();
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f000 fa31 	bl	80011bc <_ZN10Sumo_Robot14Searching_LeftEv>
					directionLastSeen = left;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f883 2333 	strb.w	r2, [r3, #819]	@ 0x333
					RunPhaseState = Search;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2202      	movs	r2, #2
 8000d66:	f883 232b 	strb.w	r2, [r3, #811]	@ 0x32b
					break;
 8000d6a:	e005      	b.n	8000d78 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0xd0>
				 * Strategy for this one is to full send (for now)
				 * This is a bad idea but it is ok to start here and improve
				 */
				case(orientation5):
				{
					RunPhaseState = Attack;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2203      	movs	r2, #3
 8000d70:	f883 232b 	strb.w	r2, [r3, #811]	@ 0x32b
					break;
 8000d74:	e000      	b.n	8000d78 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0xd0>
				}
				default:
					break;
 8000d76:	bf00      	nop
			}
			break;
 8000d78:	e217      	b.n	80011aa <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x502>
		 * Remote Estop is working properly (Not sure why it wasn't)
		 * Physical Estop is working properly
		 */
		case (Search):
		{
			ReadSensors();
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff feff 	bl	8000b7e <_ZN10Sumo_Robot11ReadSensorsEv>

			if(((directionReadings & 0b00001) == 1) || ((directionReadings & 0b00010) == 2))
 8000d80:	4bb0      	ldr	r3, [pc, #704]	@ (8001044 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x39c>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d105      	bne.n	8000d98 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0xf0>
 8000d8c:	4bad      	ldr	r3, [pc, #692]	@ (8001044 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x39c>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	f003 0302 	and.w	r3, r3, #2
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d004      	beq.n	8000da2 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0xfa>
			{
				directionLastSeen = right;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2202      	movs	r2, #2
 8000d9c:	f883 2333 	strb.w	r2, [r3, #819]	@ 0x333
 8000da0:	e014      	b.n	8000dcc <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x124>
			}

			else if(((directionReadings & 0b10000) == 16) || ((directionReadings & 0b01000) == 8))
 8000da2:	4ba8      	ldr	r3, [pc, #672]	@ (8001044 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x39c>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	f003 0310 	and.w	r3, r3, #16
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d105      	bne.n	8000dba <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x112>
 8000dae:	4ba5      	ldr	r3, [pc, #660]	@ (8001044 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x39c>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	f003 0308 	and.w	r3, r3, #8
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d004      	beq.n	8000dc4 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x11c>
			{
				directionLastSeen = left;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	f883 2333 	strb.w	r2, [r3, #819]	@ 0x333
 8000dc2:	e003      	b.n	8000dcc <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x124>
			}
			else
				directionLastSeen = none;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2333 	strb.w	r2, [r3, #819]	@ 0x333


			if((enterSearching == 0) && (directionLastSeen == left) )
 8000dcc:	4b9e      	ldr	r3, [pc, #632]	@ (8001048 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x3a0>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d10b      	bne.n	8000dec <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x144>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f893 3333 	ldrb.w	r3, [r3, #819]	@ 0x333
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d106      	bne.n	8000dec <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x144>
			{
				Searching_Left();
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f000 f9ec 	bl	80011bc <_ZN10Sumo_Robot14Searching_LeftEv>
				enterSearching = 1;
 8000de4:	4b98      	ldr	r3, [pc, #608]	@ (8001048 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x3a0>)
 8000de6:	2201      	movs	r2, #1
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	e01e      	b.n	8000e2a <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x182>
			}

			else if((enterSearching == 0) && (directionLastSeen == right) )
 8000dec:	4b96      	ldr	r3, [pc, #600]	@ (8001048 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x3a0>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d10b      	bne.n	8000e0c <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x164>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f893 3333 	ldrb.w	r3, [r3, #819]	@ 0x333
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d106      	bne.n	8000e0c <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x164>
			{
				Searching_Right();
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f000 fa1a 	bl	8001238 <_ZN10Sumo_Robot15Searching_RightEv>
				enterSearching = 1;
 8000e04:	4b90      	ldr	r3, [pc, #576]	@ (8001048 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x3a0>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
 8000e0a:	e00e      	b.n	8000e2a <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x182>
			}

			else if((enterSearching == 0) && (directionLastSeen == none))
 8000e0c:	4b8e      	ldr	r3, [pc, #568]	@ (8001048 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x3a0>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d10a      	bne.n	8000e2a <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x182>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f893 3333 	ldrb.w	r3, [r3, #819]	@ 0x333
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d105      	bne.n	8000e2a <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x182>
			{
				Searching_Right();
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f000 fa0a 	bl	8001238 <_ZN10Sumo_Robot15Searching_RightEv>
				enterSearching = 1;
 8000e24:	4b88      	ldr	r3, [pc, #544]	@ (8001048 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x3a0>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]
			}

			/***************CALIBRATION CODE BEGIN******************/
			if(((Readings.Left60 == 1) || (Readings.Left30 == 1) ||  (Readings.Middle == 1) || (Readings.Right30 == 1) || (Readings.Right60 == 1)))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f893 332c 	ldrb.w	r3, [r3, #812]	@ 0x32c
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d013      	beq.n	8000e5c <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x1b4>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f893 332d 	ldrb.w	r3, [r3, #813]	@ 0x32d
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d00e      	beq.n	8000e5c <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x1b4>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f893 332e 	ldrb.w	r3, [r3, #814]	@ 0x32e
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d009      	beq.n	8000e5c <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x1b4>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f893 332f 	ldrb.w	r3, [r3, #815]	@ 0x32f
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d004      	beq.n	8000e5c <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x1b4>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	f893 3330 	ldrb.w	r3, [r3, #816]	@ 0x330
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d118      	bne.n	8000e8e <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x1e6>
			{
				enterSearching = 0;
 8000e5c:	4b7a      	ldr	r3, [pc, #488]	@ (8001048 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x3a0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
				RunPhaseState = Attack;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2203      	movs	r2, #3
 8000e66:	f883 232b 	strb.w	r2, [r3, #811]	@ 0x32b
				SetSpeeds(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
 8000e6a:	2364      	movs	r3, #100	@ 0x64
 8000e6c:	9300      	str	r3, [sp, #0]
 8000e6e:	2364      	movs	r3, #100	@ 0x64
 8000e70:	2264      	movs	r2, #100	@ 0x64
 8000e72:	2164      	movs	r1, #100	@ 0x64
 8000e74:	6878      	ldr	r0, [r7, #4]
 8000e76:	f7ff fe51 	bl	8000b1c <_ZN10Sumo_Robot9SetSpeedsEhhhh>
				for(uint32_t i = 0; i < 1000; i++){}
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	e002      	b.n	8000e86 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x1de>
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	3301      	adds	r3, #1
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000e8c:	d3f8      	bcc.n	8000e80 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x1d8>
			 * SPEED2 	 125
			 * SPEED3 	 150
			 * SPEED4 	 175
			 * MAX_SPEED 200
			 */
			ReadSensors();
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff fe75 	bl	8000b7e <_ZN10Sumo_Robot11ReadSensorsEv>
//			else if((Readings.Left30 == 0) && (Readings.Middle == 0) && (Readings.Right30 == 0))
//				//RunPhaseState = Attack;
//				SetSpeeds(MIN_SPEED,MIN_SPEED,MIN_SPEED,MIN_SPEED);
			/**************This is working, Changing to switch statement with bit comparison******************/

			switch(readingsTransition)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f893 3332 	ldrb.w	r3, [r3, #818]	@ 0x332
 8000e9a:	2b1f      	cmp	r3, #31
 8000e9c:	f200 8149 	bhi.w	8001132 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x48a>
 8000ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ea8 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x200>)
 8000ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea6:	bf00      	nop
 8000ea8:	08000f29 	.word	0x08000f29
 8000eac:	08001051 	.word	0x08001051
 8000eb0:	08001113 	.word	0x08001113
 8000eb4:	08001021 	.word	0x08001021
 8000eb8:	080010f3 	.word	0x080010f3
 8000ebc:	08001133 	.word	0x08001133
 8000ec0:	080010b3 	.word	0x080010b3
 8000ec4:	08000fff 	.word	0x08000fff
 8000ec8:	080010d3 	.word	0x080010d3
 8000ecc:	08001133 	.word	0x08001133
 8000ed0:	08001133 	.word	0x08001133
 8000ed4:	08001133 	.word	0x08001133
 8000ed8:	08001093 	.word	0x08001093
 8000edc:	08001133 	.word	0x08001133
 8000ee0:	08001073 	.word	0x08001073
 8000ee4:	08000fdd 	.word	0x08000fdd
 8000ee8:	08000f33 	.word	0x08000f33
 8000eec:	08001133 	.word	0x08001133
 8000ef0:	08001133 	.word	0x08001133
 8000ef4:	08001133 	.word	0x08001133
 8000ef8:	08001133 	.word	0x08001133
 8000efc:	08001133 	.word	0x08001133
 8000f00:	08001133 	.word	0x08001133
 8000f04:	08001133 	.word	0x08001133
 8000f08:	08000f55 	.word	0x08000f55
 8000f0c:	08001133 	.word	0x08001133
 8000f10:	08001133 	.word	0x08001133
 8000f14:	08001133 	.word	0x08001133
 8000f18:	08000f77 	.word	0x08000f77
 8000f1c:	08001133 	.word	0x08001133
 8000f20:	08000f99 	.word	0x08000f99
 8000f24:	08000fbb 	.word	0x08000fbb
				//
				case(0b00000):
				{
//					SetSpeeds(MIN_SPEED, MIN_SPEED, MIN_SPEED, MIN_SPEED);
					/***************TESTING COMMENTED OUT BEGIN******************/
					RunPhaseState = Search;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	f883 232b 	strb.w	r2, [r3, #811]	@ 0x32b
					/****************TESTING COMMENTED OUT  END*******************/

					break;
 8000f30:	e125      	b.n	800117e <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4d6>
				}

				//Left60  TESTED GOOD
				case(0b10000):
				{
					if(readingsTransition != previousReadings)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	f893 2332 	ldrb.w	r2, [r3, #818]	@ 0x332
 8000f38:	4b44      	ldr	r3, [pc, #272]	@ (800104c <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x3a4>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	f000 8101 	beq.w	8001144 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x49c>
						SetSpeeds(MAX_SPEED, SPEED1, MAX_SPEED, SPEED1);
 8000f42:	2373      	movs	r3, #115	@ 0x73
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	23c8      	movs	r3, #200	@ 0xc8
 8000f48:	2273      	movs	r2, #115	@ 0x73
 8000f4a:	21c8      	movs	r1, #200	@ 0xc8
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f7ff fde5 	bl	8000b1c <_ZN10Sumo_Robot9SetSpeedsEhhhh>
//					Searching_Left();
//					SetSpeeds(MAX_SPEED, SPEED2, MAX_SPEED, SPEED2);

					break;
 8000f52:	e0f7      	b.n	8001144 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x49c>
				}

				//Left60 Left30  TESTED GOOD
				case(0b11000):
				{
					if(readingsTransition != previousReadings)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f893 2332 	ldrb.w	r2, [r3, #818]	@ 0x332
 8000f5a:	4b3c      	ldr	r3, [pc, #240]	@ (800104c <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x3a4>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	f000 80f2 	beq.w	8001148 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4a0>
						SetSpeeds(MAX_SPEED, SPEED2, MAX_SPEED, SPEED2);
 8000f64:	237d      	movs	r3, #125	@ 0x7d
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	23c8      	movs	r3, #200	@ 0xc8
 8000f6a:	227d      	movs	r2, #125	@ 0x7d
 8000f6c:	21c8      	movs	r1, #200	@ 0xc8
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff fdd4 	bl	8000b1c <_ZN10Sumo_Robot9SetSpeedsEhhhh>
					break;
 8000f74:	e0e8      	b.n	8001148 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4a0>
				}

				//Left60 Left30 Middle  TESTED GOOD
				case(0b11100):
				{
					if(readingsTransition != previousReadings)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 2332 	ldrb.w	r2, [r3, #818]	@ 0x332
 8000f7c:	4b33      	ldr	r3, [pc, #204]	@ (800104c <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x3a4>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	f000 80e3 	beq.w	800114c <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4a4>
						SetSpeeds(MAX_SPEED, SPEED3, MAX_SPEED, SPEED3);
 8000f86:	2396      	movs	r3, #150	@ 0x96
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	23c8      	movs	r3, #200	@ 0xc8
 8000f8c:	2296      	movs	r2, #150	@ 0x96
 8000f8e:	21c8      	movs	r1, #200	@ 0xc8
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff fdc3 	bl	8000b1c <_ZN10Sumo_Robot9SetSpeedsEhhhh>
					break;
 8000f96:	e0d9      	b.n	800114c <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4a4>


				//Left60 Left30 Middle Right30  TESTED GOOD
				case(0b11110):
				{
					if(readingsTransition != previousReadings)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f893 2332 	ldrb.w	r2, [r3, #818]	@ 0x332
 8000f9e:	4b2b      	ldr	r3, [pc, #172]	@ (800104c <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x3a4>)
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	f000 80d4 	beq.w	8001150 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4a8>
						SetSpeeds(MAX_SPEED, MAX_SPEED, MAX_SPEED, MAX_SPEED);
 8000fa8:	23c8      	movs	r3, #200	@ 0xc8
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	23c8      	movs	r3, #200	@ 0xc8
 8000fae:	22c8      	movs	r2, #200	@ 0xc8
 8000fb0:	21c8      	movs	r1, #200	@ 0xc8
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff fdb2 	bl	8000b1c <_ZN10Sumo_Robot9SetSpeedsEhhhh>
					break;
 8000fb8:	e0ca      	b.n	8001150 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4a8>
				}

				//Left60 Left30 Middle Right30 Right60  TESTED GOOD
				case(0b11111):
				{
					if(readingsTransition != previousReadings)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f893 2332 	ldrb.w	r2, [r3, #818]	@ 0x332
 8000fc0:	4b22      	ldr	r3, [pc, #136]	@ (800104c <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x3a4>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	f000 80c5 	beq.w	8001154 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4ac>
						SetSpeeds(MAX_SPEED, MAX_SPEED, MAX_SPEED, MAX_SPEED);
 8000fca:	23c8      	movs	r3, #200	@ 0xc8
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	23c8      	movs	r3, #200	@ 0xc8
 8000fd0:	22c8      	movs	r2, #200	@ 0xc8
 8000fd2:	21c8      	movs	r1, #200	@ 0xc8
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f7ff fda1 	bl	8000b1c <_ZN10Sumo_Robot9SetSpeedsEhhhh>
					break;
 8000fda:	e0bb      	b.n	8001154 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4ac>
				}

				// Left30 Middle Right30 Right60  TESTED GOOD
				case(0b01111):
				{
					if(readingsTransition != previousReadings)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 2332 	ldrb.w	r2, [r3, #818]	@ 0x332
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x3a4>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	f000 80b6 	beq.w	8001158 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4b0>
						SetSpeeds(MAX_SPEED, MAX_SPEED, MAX_SPEED, MAX_SPEED);
 8000fec:	23c8      	movs	r3, #200	@ 0xc8
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	23c8      	movs	r3, #200	@ 0xc8
 8000ff2:	22c8      	movs	r2, #200	@ 0xc8
 8000ff4:	21c8      	movs	r1, #200	@ 0xc8
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff fd90 	bl	8000b1c <_ZN10Sumo_Robot9SetSpeedsEhhhh>
					break;
 8000ffc:	e0ac      	b.n	8001158 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4b0>
				}

				//Middle Right30 Right60  TESTED GOOD
				case(0b00111):
				{
					if(readingsTransition != previousReadings)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f893 2332 	ldrb.w	r2, [r3, #818]	@ 0x332
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x3a4>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	429a      	cmp	r2, r3
 800100a:	f000 80a7 	beq.w	800115c <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4b4>
						SetSpeeds(SPEED3, MAX_SPEED, SPEED3, MAX_SPEED);
 800100e:	23c8      	movs	r3, #200	@ 0xc8
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	2396      	movs	r3, #150	@ 0x96
 8001014:	22c8      	movs	r2, #200	@ 0xc8
 8001016:	2196      	movs	r1, #150	@ 0x96
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff fd7f 	bl	8000b1c <_ZN10Sumo_Robot9SetSpeedsEhhhh>
					break;
 800101e:	e09d      	b.n	800115c <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4b4>
				}

				//Right30 Right60  TESTED GOOD
				case(0b00011):
				{
					if(readingsTransition != previousReadings)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f893 2332 	ldrb.w	r2, [r3, #818]	@ 0x332
 8001026:	4b09      	ldr	r3, [pc, #36]	@ (800104c <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x3a4>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	429a      	cmp	r2, r3
 800102c:	f000 8098 	beq.w	8001160 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4b8>
						SetSpeeds(SPEED2, MAX_SPEED, SPEED2, MAX_SPEED);
 8001030:	23c8      	movs	r3, #200	@ 0xc8
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	237d      	movs	r3, #125	@ 0x7d
 8001036:	22c8      	movs	r2, #200	@ 0xc8
 8001038:	217d      	movs	r1, #125	@ 0x7d
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff fd6e 	bl	8000b1c <_ZN10Sumo_Robot9SetSpeedsEhhhh>
					break;
 8001040:	e08e      	b.n	8001160 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4b8>
 8001042:	bf00      	nop
 8001044:	24000034 	.word	0x24000034
 8001048:	24000035 	.word	0x24000035
 800104c:	24000036 	.word	0x24000036
				}

				//Right60  TESTED GOOD
				case(0b00001):
				{
					if(readingsTransition != previousReadings)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 2332 	ldrb.w	r2, [r3, #818]	@ 0x332
 8001056:	4b57      	ldr	r3, [pc, #348]	@ (80011b4 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x50c>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	429a      	cmp	r2, r3
 800105c:	f000 8082 	beq.w	8001164 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4bc>
						SetSpeeds(SPEED1, MAX_SPEED, SPEED1, MAX_SPEED);
 8001060:	23c8      	movs	r3, #200	@ 0xc8
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2373      	movs	r3, #115	@ 0x73
 8001066:	22c8      	movs	r2, #200	@ 0xc8
 8001068:	2173      	movs	r1, #115	@ 0x73
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff fd56 	bl	8000b1c <_ZN10Sumo_Robot9SetSpeedsEhhhh>
//					Searching_Right();
//					SetSpeeds(SPEED2, MAX_SPEED, SPEED2, MAX_SPEED);

					break;
 8001070:	e078      	b.n	8001164 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4bc>
				}

				//Left30 Middle Right30  TESTED GOOD
				case(0b01110):
				{
					if(readingsTransition != previousReadings)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	f893 2332 	ldrb.w	r2, [r3, #818]	@ 0x332
 8001078:	4b4e      	ldr	r3, [pc, #312]	@ (80011b4 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x50c>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	429a      	cmp	r2, r3
 800107e:	d073      	beq.n	8001168 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4c0>
						SetSpeeds(MAX_SPEED, MAX_SPEED, MAX_SPEED, MAX_SPEED);
 8001080:	23c8      	movs	r3, #200	@ 0xc8
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	23c8      	movs	r3, #200	@ 0xc8
 8001086:	22c8      	movs	r2, #200	@ 0xc8
 8001088:	21c8      	movs	r1, #200	@ 0xc8
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff fd46 	bl	8000b1c <_ZN10Sumo_Robot9SetSpeedsEhhhh>
					break;
 8001090:	e06a      	b.n	8001168 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4c0>
				}

				//Left30 Middle  TESTED GOOD
				case(0b01100):
				{
					if(readingsTransition != previousReadings)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 2332 	ldrb.w	r2, [r3, #818]	@ 0x332
 8001098:	4b46      	ldr	r3, [pc, #280]	@ (80011b4 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x50c>)
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	429a      	cmp	r2, r3
 800109e:	d065      	beq.n	800116c <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4c4>
						SetSpeeds(MAX_SPEED, SPEED3, MAX_SPEED, SPEED3);
 80010a0:	2396      	movs	r3, #150	@ 0x96
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	23c8      	movs	r3, #200	@ 0xc8
 80010a6:	2296      	movs	r2, #150	@ 0x96
 80010a8:	21c8      	movs	r1, #200	@ 0xc8
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff fd36 	bl	8000b1c <_ZN10Sumo_Robot9SetSpeedsEhhhh>
					break;
 80010b0:	e05c      	b.n	800116c <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4c4>
				}

				//Middle Right30 TESTED GOOD
				case(0b00110):
				{
					if(readingsTransition != previousReadings)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f893 2332 	ldrb.w	r2, [r3, #818]	@ 0x332
 80010b8:	4b3e      	ldr	r3, [pc, #248]	@ (80011b4 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x50c>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d057      	beq.n	8001170 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4c8>
						SetSpeeds(SPEED2, MAX_SPEED, SPEED2, MAX_SPEED);
 80010c0:	23c8      	movs	r3, #200	@ 0xc8
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	237d      	movs	r3, #125	@ 0x7d
 80010c6:	22c8      	movs	r2, #200	@ 0xc8
 80010c8:	217d      	movs	r1, #125	@ 0x7d
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff fd26 	bl	8000b1c <_ZN10Sumo_Robot9SetSpeedsEhhhh>
					break;
 80010d0:	e04e      	b.n	8001170 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4c8>
				}

				//Left30 TESTED GOOD
				case(0b01000):
				{
					if(readingsTransition != previousReadings)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 2332 	ldrb.w	r2, [r3, #818]	@ 0x332
 80010d8:	4b36      	ldr	r3, [pc, #216]	@ (80011b4 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x50c>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d049      	beq.n	8001174 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4cc>
						SetSpeeds(MAX_SPEED, SPEED2, MAX_SPEED, SPEED2);
 80010e0:	237d      	movs	r3, #125	@ 0x7d
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	23c8      	movs	r3, #200	@ 0xc8
 80010e6:	227d      	movs	r2, #125	@ 0x7d
 80010e8:	21c8      	movs	r1, #200	@ 0xc8
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff fd16 	bl	8000b1c <_ZN10Sumo_Robot9SetSpeedsEhhhh>
					break;
 80010f0:	e040      	b.n	8001174 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4cc>
				}

				//Middle TESTED GOOD
				case(0b00100):
				{
					if(readingsTransition != previousReadings)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f893 2332 	ldrb.w	r2, [r3, #818]	@ 0x332
 80010f8:	4b2e      	ldr	r3, [pc, #184]	@ (80011b4 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x50c>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d03b      	beq.n	8001178 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4d0>
						SetSpeeds(MAX_SPEED, MAX_SPEED, MAX_SPEED, MAX_SPEED);
 8001100:	23c8      	movs	r3, #200	@ 0xc8
 8001102:	9300      	str	r3, [sp, #0]
 8001104:	23c8      	movs	r3, #200	@ 0xc8
 8001106:	22c8      	movs	r2, #200	@ 0xc8
 8001108:	21c8      	movs	r1, #200	@ 0xc8
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff fd06 	bl	8000b1c <_ZN10Sumo_Robot9SetSpeedsEhhhh>
					break;
 8001110:	e032      	b.n	8001178 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4d0>
				}

				//Right30 TESTED GOOD
				case(0b00010):
				{
					if(readingsTransition != previousReadings)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f893 2332 	ldrb.w	r2, [r3, #818]	@ 0x332
 8001118:	4b26      	ldr	r3, [pc, #152]	@ (80011b4 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x50c>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	429a      	cmp	r2, r3
 800111e:	d02d      	beq.n	800117c <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4d4>
						SetSpeeds(SPEED2, MAX_SPEED, SPEED2, MAX_SPEED);
 8001120:	23c8      	movs	r3, #200	@ 0xc8
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	237d      	movs	r3, #125	@ 0x7d
 8001126:	22c8      	movs	r2, #200	@ 0xc8
 8001128:	217d      	movs	r1, #125	@ 0x7d
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff fcf6 	bl	8000b1c <_ZN10Sumo_Robot9SetSpeedsEhhhh>
					break;
 8001130:	e024      	b.n	800117c <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4d4>
				}

				default:
					SetSpeeds(MIN_SPEED,MIN_SPEED,MIN_SPEED,MIN_SPEED);
 8001132:	2364      	movs	r3, #100	@ 0x64
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2364      	movs	r3, #100	@ 0x64
 8001138:	2264      	movs	r2, #100	@ 0x64
 800113a:	2164      	movs	r1, #100	@ 0x64
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f7ff fced 	bl	8000b1c <_ZN10Sumo_Robot9SetSpeedsEhhhh>
					break;
 8001142:	e01c      	b.n	800117e <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4d6>
					break;
 8001144:	bf00      	nop
 8001146:	e01a      	b.n	800117e <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4d6>
					break;
 8001148:	bf00      	nop
 800114a:	e018      	b.n	800117e <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4d6>
					break;
 800114c:	bf00      	nop
 800114e:	e016      	b.n	800117e <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4d6>
					break;
 8001150:	bf00      	nop
 8001152:	e014      	b.n	800117e <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4d6>
					break;
 8001154:	bf00      	nop
 8001156:	e012      	b.n	800117e <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4d6>
					break;
 8001158:	bf00      	nop
 800115a:	e010      	b.n	800117e <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4d6>
					break;
 800115c:	bf00      	nop
 800115e:	e00e      	b.n	800117e <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4d6>
					break;
 8001160:	bf00      	nop
 8001162:	e00c      	b.n	800117e <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4d6>
					break;
 8001164:	bf00      	nop
 8001166:	e00a      	b.n	800117e <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4d6>
					break;
 8001168:	bf00      	nop
 800116a:	e008      	b.n	800117e <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4d6>
					break;
 800116c:	bf00      	nop
 800116e:	e006      	b.n	800117e <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4d6>
					break;
 8001170:	bf00      	nop
 8001172:	e004      	b.n	800117e <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4d6>
					break;
 8001174:	bf00      	nop
 8001176:	e002      	b.n	800117e <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4d6>
					break;
 8001178:	bf00      	nop
 800117a:	e000      	b.n	800117e <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x4d6>
					break;
 800117c:	bf00      	nop
			}
			previousReadings = readingsTransition;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 2332 	ldrb.w	r2, [r3, #818]	@ 0x332
 8001184:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x50c>)
 8001186:	701a      	strb	r2, [r3, #0]
			if(readingsTransition != 0)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f893 3332 	ldrb.w	r3, [r3, #818]	@ 0x332
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00a      	beq.n	80011a8 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x500>
				directionReadings = readingsTransition;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 2332 	ldrb.w	r2, [r3, #818]	@ 0x332
 8001198:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x510>)
 800119a:	701a      	strb	r2, [r3, #0]
			break;
 800119c:	e004      	b.n	80011a8 <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x500>
		}
		default:
		{
			MasterSumoRobotState = estop;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2202      	movs	r2, #2
 80011a2:	f883 2329 	strb.w	r2, [r3, #809]	@ 0x329
			break;
 80011a6:	e000      	b.n	80011aa <_ZN10Sumo_Robot14RunPhaseUpdateEv+0x502>
			break;
 80011a8:	bf00      	nop
		}
	}
}
 80011aa:	bf00      	nop
 80011ac:	3710      	adds	r7, #16
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	24000036 	.word	0x24000036
 80011b8:	24000034 	.word	0x24000034

080011bc <_ZN10Sumo_Robot14Searching_LeftEv>:


void Sumo_Robot::Searching_Left()
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	FrontRightESC.speed_control(SPEED3);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 80011ca:	2196      	movs	r1, #150	@ 0x96
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f8d7 	bl	8000380 <_ZN8BLDC_ESC13speed_controlEm>
	FrontLeftESC.speed_control(MIN_SPEED);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 80011d8:	2164      	movs	r1, #100	@ 0x64
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f8d0 	bl	8000380 <_ZN8BLDC_ESC13speed_controlEm>
	RearRightESC.speed_control(SPEED3);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 80011e6:	2196      	movs	r1, #150	@ 0x96
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f8c9 	bl	8000380 <_ZN8BLDC_ESC13speed_controlEm>
	RearLeftESC.speed_control(MIN_SPEED);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 80011f4:	2164      	movs	r1, #100	@ 0x64
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f8c2 	bl	8000380 <_ZN8BLDC_ESC13speed_controlEm>

	/***************TESTING CODE BEGIN******************/
	currentDirection = drivingLeft;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	f883 2337 	strb.w	r2, [r3, #823]	@ 0x337
	SET(PA,3);
 8001204:	4b0a      	ldr	r3, [pc, #40]	@ (8001230 <_ZN10Sumo_Robot14Searching_LeftEv+0x74>)
 8001206:	695b      	ldr	r3, [r3, #20]
 8001208:	4a09      	ldr	r2, [pc, #36]	@ (8001230 <_ZN10Sumo_Robot14Searching_LeftEv+0x74>)
 800120a:	f043 0308 	orr.w	r3, r3, #8
 800120e:	6153      	str	r3, [r2, #20]
	CLEAR(PC,3);
 8001210:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <_ZN10Sumo_Robot14Searching_LeftEv+0x78>)
 8001212:	695b      	ldr	r3, [r3, #20]
 8001214:	4a07      	ldr	r2, [pc, #28]	@ (8001234 <_ZN10Sumo_Robot14Searching_LeftEv+0x78>)
 8001216:	f023 0308 	bic.w	r3, r3, #8
 800121a:	6153      	str	r3, [r2, #20]
	CLEAR(PC,0);
 800121c:	4b05      	ldr	r3, [pc, #20]	@ (8001234 <_ZN10Sumo_Robot14Searching_LeftEv+0x78>)
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	4a04      	ldr	r2, [pc, #16]	@ (8001234 <_ZN10Sumo_Robot14Searching_LeftEv+0x78>)
 8001222:	f023 0301 	bic.w	r3, r3, #1
 8001226:	6153      	str	r3, [r2, #20]
	/****************TESTING CODE END*******************/

	return;
 8001228:	bf00      	nop
}
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	58020000 	.word	0x58020000
 8001234:	58020800 	.word	0x58020800

08001238 <_ZN10Sumo_Robot15Searching_RightEv>:
void Sumo_Robot::Searching_Right()
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	FrontRightESC.speed_control(MIN_SPEED);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f503 7335 	add.w	r3, r3, #724	@ 0x2d4
 8001246:	2164      	movs	r1, #100	@ 0x64
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f899 	bl	8000380 <_ZN8BLDC_ESC13speed_controlEm>
	FrontLeftESC.speed_control(SPEED3);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f503 7337 	add.w	r3, r3, #732	@ 0x2dc
 8001254:	2196      	movs	r1, #150	@ 0x96
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff f892 	bl	8000380 <_ZN8BLDC_ESC13speed_controlEm>
	RearRightESC.speed_control(MIN_SPEED);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f503 7339 	add.w	r3, r3, #740	@ 0x2e4
 8001262:	2164      	movs	r1, #100	@ 0x64
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f88b 	bl	8000380 <_ZN8BLDC_ESC13speed_controlEm>
	RearLeftESC.speed_control(SPEED3);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f503 733b 	add.w	r3, r3, #748	@ 0x2ec
 8001270:	2196      	movs	r1, #150	@ 0x96
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff f884 	bl	8000380 <_ZN8BLDC_ESC13speed_controlEm>

	/***************TESTING CODE BEGIN******************/
	currentDirection = drivingRight;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2202      	movs	r2, #2
 800127c:	f883 2337 	strb.w	r2, [r3, #823]	@ 0x337
	SET(PC,3);
 8001280:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <_ZN10Sumo_Robot15Searching_RightEv+0x74>)
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	4a09      	ldr	r2, [pc, #36]	@ (80012ac <_ZN10Sumo_Robot15Searching_RightEv+0x74>)
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	6153      	str	r3, [r2, #20]
	CLEAR(PA,3);
 800128c:	4b08      	ldr	r3, [pc, #32]	@ (80012b0 <_ZN10Sumo_Robot15Searching_RightEv+0x78>)
 800128e:	695b      	ldr	r3, [r3, #20]
 8001290:	4a07      	ldr	r2, [pc, #28]	@ (80012b0 <_ZN10Sumo_Robot15Searching_RightEv+0x78>)
 8001292:	f023 0308 	bic.w	r3, r3, #8
 8001296:	6153      	str	r3, [r2, #20]
	CLEAR(PC,0);
 8001298:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <_ZN10Sumo_Robot15Searching_RightEv+0x74>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	4a03      	ldr	r2, [pc, #12]	@ (80012ac <_ZN10Sumo_Robot15Searching_RightEv+0x74>)
 800129e:	f023 0301 	bic.w	r3, r3, #1
 80012a2:	6153      	str	r3, [r2, #20]
	/****************TESTING CODE END*******************/

	return;
 80012a4:	bf00      	nop
}
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	58020800 	.word	0x58020800
 80012b0:	58020000 	.word	0x58020000

080012b4 <_ZN7VL53L0XC1EP19__I2C_HandleTypeDef>:
#include "../Inc/VL53L0X.hpp"


// This is the init. Sets the I2C handler for the instance and runs the setters to configure the sensors like we need them. I
// might add a feature to integrate the XSHUT pin and change the address so you can use the same I2C bus. Too buzzed for that RN.
VL53L0X::VL53L0X(I2C_HandleTypeDef *handler)
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2252      	movs	r2, #82	@ 0x52
 80012c2:	701a      	strb	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	805a      	strh	r2, [r3, #2]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	711a      	strb	r2, [r3, #4]
{
	// This initializes the sensor with the given I2C bus
	initVL53L0X(1, handler);
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	2101      	movs	r1, #1
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 fb40 	bl	800195a <_ZN7VL53L0X11initVL53L0XEbP19__I2C_HandleTypeDef>

	// These are trial and error settings found from manually changing the values until I was happy with performance.
	setSignalRateLimit(200);
 80012da:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800130c <_ZN7VL53L0XC1EP19__I2C_HandleTypeDef+0x58>
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 fe12 	bl	8001f08 <_ZN7VL53L0X18setSignalRateLimitEf>
	setVcselPulsePeriod(VcselPeriodPreRange, 10);
 80012e4:	220a      	movs	r2, #10
 80012e6:	2100      	movs	r1, #0
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 ff41 	bl	8002170 <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh>
	setVcselPulsePeriod(VcselPeriodFinalRange, 14);
 80012ee:	220e      	movs	r2, #14
 80012f0:	2101      	movs	r1, #1
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f000 ff3c 	bl	8002170 <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh>
	setMeasurementTimingBudget(2649 * 100UL);
 80012f8:	4905      	ldr	r1, [pc, #20]	@ (8001310 <_ZN7VL53L0XC1EP19__I2C_HandleTypeDef+0x5c>)
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 fe3a 	bl	8001f74 <_ZN7VL53L0X26setMeasurementTimingBudgetEm>
}
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	43480000 	.word	0x43480000
 8001310:	00040ac4 	.word	0x00040ac4

08001314 <_ZN7VL53L0X11getSpadInfoEPhPb>:

// Get reference SPAD (single photon avalanche diode) count and type
// based on VL53L0X_get_info_from_device(),
// but only gets reference SPAD count and type
bool VL53L0X::getSpadInfo(uint8_t *count, bool *type_is_aperture)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
	uint8_t tmp;

	writeReg8Bit(0x80, 0x01);
 8001320:	2201      	movs	r2, #1
 8001322:	2180      	movs	r1, #128	@ 0x80
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f000 fa1d 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0xFF, 0x01);
 800132a:	2201      	movs	r2, #1
 800132c:	21ff      	movs	r1, #255	@ 0xff
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f000 fa18 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x00, 0x00);
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	68f8      	ldr	r0, [r7, #12]
 800133a:	f000 fa13 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	writeReg8Bit(0xFF, 0x06);
 800133e:	2206      	movs	r2, #6
 8001340:	21ff      	movs	r1, #255	@ 0xff
 8001342:	68f8      	ldr	r0, [r7, #12]
 8001344:	f000 fa0e 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x83, readReg8Bit(0x83) | 0x04);
 8001348:	2183      	movs	r1, #131	@ 0x83
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f000 fa5a 	bl	8001804 <_ZN7VL53L0X11readReg8BitEh>
 8001350:	4603      	mov	r3, r0
 8001352:	f043 0304 	orr.w	r3, r3, #4
 8001356:	b2db      	uxtb	r3, r3
 8001358:	461a      	mov	r2, r3
 800135a:	2183      	movs	r1, #131	@ 0x83
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f000 fa01 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0xFF, 0x07);
 8001362:	2207      	movs	r2, #7
 8001364:	21ff      	movs	r1, #255	@ 0xff
 8001366:	68f8      	ldr	r0, [r7, #12]
 8001368:	f000 f9fc 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x81, 0x01);
 800136c:	2201      	movs	r2, #1
 800136e:	2181      	movs	r1, #129	@ 0x81
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f000 f9f7 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	writeReg8Bit(0x80, 0x01);
 8001376:	2201      	movs	r2, #1
 8001378:	2180      	movs	r1, #128	@ 0x80
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f000 f9f2 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	writeReg8Bit(0x94, 0x6b);
 8001380:	226b      	movs	r2, #107	@ 0x6b
 8001382:	2194      	movs	r1, #148	@ 0x94
 8001384:	68f8      	ldr	r0, [r7, #12]
 8001386:	f000 f9ed 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x83, 0x00);
 800138a:	2200      	movs	r2, #0
 800138c:	2183      	movs	r1, #131	@ 0x83
 800138e:	68f8      	ldr	r0, [r7, #12]
 8001390:	f000 f9e8 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	startTimeout();
 8001394:	f005 f828 	bl	80063e8 <HAL_GetTick>
 8001398:	4603      	mov	r3, r0
 800139a:	b29a      	uxth	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	80da      	strh	r2, [r3, #6]
	while (readReg8Bit(0x83) == 0x00)
 80013a0:	e016      	b.n	80013d0 <_ZN7VL53L0X11getSpadInfoEPhPb+0xbc>
	{
	if (checkTimeoutExpired()) { return false; }
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	885b      	ldrh	r3, [r3, #2]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00d      	beq.n	80013c6 <_ZN7VL53L0X11getSpadInfoEPhPb+0xb2>
 80013aa:	f005 f81d 	bl	80063e8 <HAL_GetTick>
 80013ae:	4603      	mov	r3, r0
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	461a      	mov	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	88db      	ldrh	r3, [r3, #6]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	8852      	ldrh	r2, [r2, #2]
 80013be:	4293      	cmp	r3, r2
 80013c0:	dd01      	ble.n	80013c6 <_ZN7VL53L0X11getSpadInfoEPhPb+0xb2>
 80013c2:	2301      	movs	r3, #1
 80013c4:	e000      	b.n	80013c8 <_ZN7VL53L0X11getSpadInfoEPhPb+0xb4>
 80013c6:	2300      	movs	r3, #0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <_ZN7VL53L0X11getSpadInfoEPhPb+0xbc>
 80013cc:	2300      	movs	r3, #0
 80013ce:	e04f      	b.n	8001470 <_ZN7VL53L0X11getSpadInfoEPhPb+0x15c>
	while (readReg8Bit(0x83) == 0x00)
 80013d0:	2183      	movs	r1, #131	@ 0x83
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f000 fa16 	bl	8001804 <_ZN7VL53L0X11readReg8BitEh>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	bf0c      	ite	eq
 80013de:	2301      	moveq	r3, #1
 80013e0:	2300      	movne	r3, #0
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1dc      	bne.n	80013a2 <_ZN7VL53L0X11getSpadInfoEPhPb+0x8e>
	}
	writeReg8Bit(0x83, 0x01);
 80013e8:	2201      	movs	r2, #1
 80013ea:	2183      	movs	r1, #131	@ 0x83
 80013ec:	68f8      	ldr	r0, [r7, #12]
 80013ee:	f000 f9b9 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	tmp = readReg8Bit(0x92);
 80013f2:	2192      	movs	r1, #146	@ 0x92
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f000 fa05 	bl	8001804 <_ZN7VL53L0X11readReg8BitEh>
 80013fa:	4603      	mov	r3, r0
 80013fc:	75fb      	strb	r3, [r7, #23]

	*count = tmp & 0x7f;
 80013fe:	7dfb      	ldrb	r3, [r7, #23]
 8001400:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001404:	b2da      	uxtb	r2, r3
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	701a      	strb	r2, [r3, #0]
	*type_is_aperture = (tmp >> 7) & 0x01;
 800140a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	09db      	lsrs	r3, r3, #7
 8001412:	b2da      	uxtb	r2, r3
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	701a      	strb	r2, [r3, #0]

	writeReg8Bit(0x81, 0x00);
 8001418:	2200      	movs	r2, #0
 800141a:	2181      	movs	r1, #129	@ 0x81
 800141c:	68f8      	ldr	r0, [r7, #12]
 800141e:	f000 f9a1 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0xFF, 0x06);
 8001422:	2206      	movs	r2, #6
 8001424:	21ff      	movs	r1, #255	@ 0xff
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f000 f99c 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x83, readReg8Bit(0x83)  & ~0x04);
 800142c:	2183      	movs	r1, #131	@ 0x83
 800142e:	68f8      	ldr	r0, [r7, #12]
 8001430:	f000 f9e8 	bl	8001804 <_ZN7VL53L0X11readReg8BitEh>
 8001434:	4603      	mov	r3, r0
 8001436:	f023 0304 	bic.w	r3, r3, #4
 800143a:	b2db      	uxtb	r3, r3
 800143c:	461a      	mov	r2, r3
 800143e:	2183      	movs	r1, #131	@ 0x83
 8001440:	68f8      	ldr	r0, [r7, #12]
 8001442:	f000 f98f 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0xFF, 0x01);
 8001446:	2201      	movs	r2, #1
 8001448:	21ff      	movs	r1, #255	@ 0xff
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f000 f98a 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x00, 0x01);
 8001450:	2201      	movs	r2, #1
 8001452:	2100      	movs	r1, #0
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f000 f985 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	writeReg8Bit(0xFF, 0x00);
 800145a:	2200      	movs	r2, #0
 800145c:	21ff      	movs	r1, #255	@ 0xff
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f000 f980 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x80, 0x00);
 8001464:	2200      	movs	r2, #0
 8001466:	2180      	movs	r1, #128	@ 0x80
 8001468:	68f8      	ldr	r0, [r7, #12]
 800146a:	f000 f97b 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	return true;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <_ZN7VL53L0X22getSequenceStepEnablesEP19SequenceStepEnables>:

// Get sequence step enables
// based on VL53L0X_GetSequenceStepEnables()
void VL53L0X::getSequenceStepEnables(SequenceStepEnables *enables)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
	uint8_t sequence_config = readReg8Bit(SYSTEM_SEQUENCE_CONFIG);
 8001482:	2101      	movs	r1, #1
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 f9bd 	bl	8001804 <_ZN7VL53L0X11readReg8BitEh>
 800148a:	4603      	mov	r3, r0
 800148c:	73fb      	strb	r3, [r7, #15]

	enables -> tcc          = (sequence_config >> 4) & 0x1;
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	091b      	lsrs	r3, r3, #4
 8001492:	b2db      	uxtb	r3, r3
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	b2da      	uxtb	r2, r3
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	701a      	strb	r2, [r3, #0]
	enables -> dss          = (sequence_config >> 3) & 0x1;
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	08db      	lsrs	r3, r3, #3
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	709a      	strb	r2, [r3, #2]
	enables -> msrc         = (sequence_config >> 2) & 0x1;
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	089b      	lsrs	r3, r3, #2
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	705a      	strb	r2, [r3, #1]
	enables -> pre_range    = (sequence_config >> 6) & 0x1;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
 80014c0:	099b      	lsrs	r3, r3, #6
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	70da      	strb	r2, [r3, #3]
	enables -> final_range  = (sequence_config >> 7) & 0x1;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	09db      	lsrs	r3, r3, #7
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	711a      	strb	r2, [r3, #4]
}
 80014d8:	bf00      	nop
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <_ZN7VL53L0X23getSequenceStepTimeoutsEPK19SequenceStepEnablesP20SequenceStepTimeouts>:
// Get sequence step timeouts
// based on get_sequence_step_timeout(),
// but gets all timeouts instead of just the requested one, and also stores
// intermediate values
void VL53L0X::getSequenceStepTimeouts(SequenceStepEnables const* enables, SequenceStepTimeouts *timeouts)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	60f8      	str	r0, [r7, #12]
 80014e8:	60b9      	str	r1, [r7, #8]
 80014ea:	607a      	str	r2, [r7, #4]
	timeouts -> pre_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodPreRange);
 80014ec:	2100      	movs	r1, #0
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f000 ffb4 	bl	800245c <_ZN7VL53L0X19getVcselPulsePeriodE15vcselPeriodType>
 80014f4:	4603      	mov	r3, r0
 80014f6:	461a      	mov	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	801a      	strh	r2, [r3, #0]

	timeouts -> msrc_dss_tcc_mclks = readReg8Bit(MSRC_CONFIG_TIMEOUT_MACROP) + 1;
 80014fc:	2146      	movs	r1, #70	@ 0x46
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f000 f980 	bl	8001804 <_ZN7VL53L0X11readReg8BitEh>
 8001504:	4603      	mov	r3, r0
 8001506:	3301      	adds	r3, #1
 8001508:	b29a      	uxth	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	809a      	strh	r2, [r3, #4]
	timeouts -> msrc_dss_tcc_us = timeoutMclksToMicroseconds(timeouts -> msrc_dss_tcc_mclks, timeouts -> pre_range_vcsel_period_pclks);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	889a      	ldrh	r2, [r3, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
 8001518:	4619      	mov	r1, r3
 800151a:	4610      	mov	r0, r2
 800151c:	f000 f8d4 	bl	80016c8 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEth>
 8001520:	4602      	mov	r2, r0
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	60da      	str	r2, [r3, #12]

	timeouts -> pre_range_mclks = decodeTimeout(readReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001526:	2151      	movs	r1, #81	@ 0x51
 8001528:	68f8      	ldr	r0, [r7, #12]
 800152a:	f000 f995 	bl	8001858 <_ZN7VL53L0X12readReg16BitEh>
 800152e:	4603      	mov	r3, r0
 8001530:	4618      	mov	r0, r3
 8001532:	f000 f88a 	bl	800164a <_ZN7VL53L0X13decodeTimeoutEt>
 8001536:	4603      	mov	r3, r0
 8001538:	461a      	mov	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	80da      	strh	r2, [r3, #6]
	timeouts -> pre_range_us = timeoutMclksToMicroseconds(timeouts -> pre_range_mclks, timeouts -> pre_range_vcsel_period_pclks);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	88da      	ldrh	r2, [r3, #6]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	b2db      	uxtb	r3, r3
 8001548:	4619      	mov	r1, r3
 800154a:	4610      	mov	r0, r2
 800154c:	f000 f8bc 	bl	80016c8 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEth>
 8001550:	4602      	mov	r2, r0
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	611a      	str	r2, [r3, #16]

	timeouts -> final_range_vcsel_period_pclks = getVcselPulsePeriod(VcselPeriodFinalRange);
 8001556:	2101      	movs	r1, #1
 8001558:	68f8      	ldr	r0, [r7, #12]
 800155a:	f000 ff7f 	bl	800245c <_ZN7VL53L0X19getVcselPulsePeriodE15vcselPeriodType>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	805a      	strh	r2, [r3, #2]

	timeouts -> final_range_mclks = decodeTimeout(readReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI));
 8001566:	2171      	movs	r1, #113	@ 0x71
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 f975 	bl	8001858 <_ZN7VL53L0X12readReg16BitEh>
 800156e:	4603      	mov	r3, r0
 8001570:	4618      	mov	r0, r3
 8001572:	f000 f86a 	bl	800164a <_ZN7VL53L0X13decodeTimeoutEt>
 8001576:	4603      	mov	r3, r0
 8001578:	461a      	mov	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	811a      	strh	r2, [r3, #8]

	if (enables -> pre_range)
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	78db      	ldrb	r3, [r3, #3]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d007      	beq.n	8001596 <_ZN7VL53L0X23getSequenceStepTimeoutsEPK19SequenceStepEnablesP20SequenceStepTimeouts+0xb6>
	{
		timeouts -> final_range_mclks -= timeouts -> pre_range_mclks;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	891a      	ldrh	r2, [r3, #8]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	88db      	ldrh	r3, [r3, #6]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	b29a      	uxth	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	811a      	strh	r2, [r3, #8]
	}

	timeouts -> final_range_us = timeoutMclksToMicroseconds(timeouts -> final_range_mclks, timeouts -> final_range_vcsel_period_pclks);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	891a      	ldrh	r2, [r3, #8]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	885b      	ldrh	r3, [r3, #2]
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	4619      	mov	r1, r3
 80015a2:	4610      	mov	r0, r2
 80015a4:	f000 f890 	bl	80016c8 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEth>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	615a      	str	r2, [r3, #20]
}
 80015ae:	bf00      	nop
 80015b0:	3710      	adds	r7, #16
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <_ZN7VL53L0X27performSingleRefCalibrationEh>:

// based on VL53L0X_perform_single_ref_calibration()
bool VL53L0X::performSingleRefCalibration(uint8_t vhv_init_byte)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
 80015be:	460b      	mov	r3, r1
 80015c0:	70fb      	strb	r3, [r7, #3]
	writeReg8Bit(SYSRANGE_START, 0x01 | vhv_init_byte); // VL53L0X_REG_SYSRANGE_MODE_START_STOP
 80015c2:	78fb      	ldrb	r3, [r7, #3]
 80015c4:	f043 0301 	orr.w	r3, r3, #1
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	461a      	mov	r2, r3
 80015cc:	2100      	movs	r1, #0
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f8c8 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	startTimeout();
 80015d4:	f004 ff08 	bl	80063e8 <HAL_GetTick>
 80015d8:	4603      	mov	r3, r0
 80015da:	b29a      	uxth	r2, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	80da      	strh	r2, [r3, #6]
	while ((readReg8Bit(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80015e0:	e016      	b.n	8001610 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x5a>
	{
		if (checkTimeoutExpired())
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	885b      	ldrh	r3, [r3, #2]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d00d      	beq.n	8001606 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x50>
 80015ea:	f004 fefd 	bl	80063e8 <HAL_GetTick>
 80015ee:	4603      	mov	r3, r0
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	461a      	mov	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	88db      	ldrh	r3, [r3, #6]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	8852      	ldrh	r2, [r2, #2]
 80015fe:	4293      	cmp	r3, r2
 8001600:	dd01      	ble.n	8001606 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x50>
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x52>
 8001606:	2300      	movs	r3, #0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x5a>
		{
			return false;
 800160c:	2300      	movs	r3, #0
 800160e:	e018      	b.n	8001642 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x8c>
	while ((readReg8Bit(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 8001610:	2113      	movs	r1, #19
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f000 f8f6 	bl	8001804 <_ZN7VL53L0X11readReg8BitEh>
 8001618:	4603      	mov	r3, r0
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	2b00      	cmp	r3, #0
 8001620:	bf0c      	ite	eq
 8001622:	2301      	moveq	r3, #1
 8001624:	2300      	movne	r3, #0
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1da      	bne.n	80015e2 <_ZN7VL53L0X27performSingleRefCalibrationEh+0x2c>
		}
	}

	writeReg8Bit(SYSTEM_INTERRUPT_CLEAR, 0x01);
 800162c:	2201      	movs	r2, #1
 800162e:	210b      	movs	r1, #11
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 f897 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	writeReg8Bit(SYSRANGE_START, 0x00);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f892 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	return true;
 8001640:	2301      	movs	r3, #1
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <_ZN7VL53L0X13decodeTimeoutEt>:
// Decode sequence step timeout in MCLKs from register value
// based on VL53L0X_decode_timeout()
// Note: the original function returned a uint32_t, but the return value is
// always stored in a uint16_t.
uint16_t VL53L0X::decodeTimeout(uint16_t reg_val)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	80fb      	strh	r3, [r7, #6]
	// format: "(LSByte * 2^MSByte) + 1"
	return (uint16_t)((reg_val & 0x00FF) << (uint16_t)((reg_val & 0xFF00) >> 8)) + 1;
 8001654:	88fb      	ldrh	r3, [r7, #6]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	88fa      	ldrh	r2, [r7, #6]
 800165a:	0a12      	lsrs	r2, r2, #8
 800165c:	b292      	uxth	r2, r2
 800165e:	4093      	lsls	r3, r2
 8001660:	b29b      	uxth	r3, r3
 8001662:	3301      	adds	r3, #1
 8001664:	b29b      	uxth	r3, r3
}
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <_ZN7VL53L0X13encodeTimeoutEt>:
// Encode sequence step timeout register value from timeout in MCLKs
// based on VL53L0X_encode_timeout()
// Note: the original function took a uint16_t, but the argument passed to it
// is always a uint16_t.
uint16_t VL53L0X::encodeTimeout(uint16_t timeout_mclks)
{
 8001672:	b480      	push	{r7}
 8001674:	b085      	sub	sp, #20
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	80fb      	strh	r3, [r7, #6]
	// format: "(LSByte * 2^MSByte) + 1"

	uint32_t ls_byte = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
	uint16_t ms_byte = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	817b      	strh	r3, [r7, #10]

	if (timeout_mclks > 0)
 8001684:	88fb      	ldrh	r3, [r7, #6]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d016      	beq.n	80016b8 <_ZN7VL53L0X13encodeTimeoutEt+0x46>
	{
	ls_byte = timeout_mclks - 1;
 800168a:	88fb      	ldrh	r3, [r7, #6]
 800168c:	3b01      	subs	r3, #1
 800168e:	60fb      	str	r3, [r7, #12]

	while ((ls_byte & 0xFFFFFF00) > 0)
 8001690:	e005      	b.n	800169e <_ZN7VL53L0X13encodeTimeoutEt+0x2c>
	{
	  ls_byte >>= 1;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	085b      	lsrs	r3, r3, #1
 8001696:	60fb      	str	r3, [r7, #12]
	  ms_byte++;
 8001698:	897b      	ldrh	r3, [r7, #10]
 800169a:	3301      	adds	r3, #1
 800169c:	817b      	strh	r3, [r7, #10]
	while ((ls_byte & 0xFFFFFF00) > 0)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2bff      	cmp	r3, #255	@ 0xff
 80016a2:	d8f6      	bhi.n	8001692 <_ZN7VL53L0X13encodeTimeoutEt+0x20>
	}

	return (ms_byte << 8) | (ls_byte & 0xFF);
 80016a4:	897b      	ldrh	r3, [r7, #10]
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	4313      	orrs	r3, r2
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	e000      	b.n	80016ba <_ZN7VL53L0X13encodeTimeoutEt+0x48>
	}
	else { return 0; }
 80016b8:	2300      	movs	r3, #0
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3714      	adds	r7, #20
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
	...

080016c8 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEth>:

// Convert sequence step timeout from MCLKs to microseconds with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_us()
uint32_t VL53L0X::timeoutMclksToMicroseconds(uint16_t timeout_period_mclks, uint8_t vcsel_period_pclks)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	460a      	mov	r2, r1
 80016d2:	80fb      	strh	r3, [r7, #6]
 80016d4:	4613      	mov	r3, r2
 80016d6:	717b      	strb	r3, [r7, #5]
	uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 80016d8:	797b      	ldrb	r3, [r7, #5]
 80016da:	4a0d      	ldr	r2, [pc, #52]	@ (8001710 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEth+0x48>)
 80016dc:	fb02 f303 	mul.w	r3, r2, r3
 80016e0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80016e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001714 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEth+0x4c>)
 80016e6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ea:	099b      	lsrs	r3, r3, #6
 80016ec:	60fb      	str	r3, [r7, #12]

	return ((timeout_period_mclks * macro_period_ns) + (macro_period_ns / 2)) / 1000;
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	fb03 f202 	mul.w	r2, r3, r2
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	085b      	lsrs	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	4a05      	ldr	r2, [pc, #20]	@ (8001714 <_ZN7VL53L0X26timeoutMclksToMicrosecondsEth+0x4c>)
 80016fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001702:	099b      	lsrs	r3, r3, #6
}
 8001704:	4618      	mov	r0, r3
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	003a2f00 	.word	0x003a2f00
 8001714:	10624dd3 	.word	0x10624dd3

08001718 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>:

// Convert sequence step timeout from microseconds to MCLKs with given VCSEL period in PCLKs
// based on VL53L0X_calc_timeout_mclks()
uint32_t VL53L0X::timeoutMicrosecondsToMclks(uint32_t timeout_period_us, uint8_t vcsel_period_pclks)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	70fb      	strb	r3, [r7, #3]
	uint32_t macro_period_ns = calcMacroPeriod(vcsel_period_pclks);
 8001724:	78fb      	ldrb	r3, [r7, #3]
 8001726:	4a0d      	ldr	r2, [pc, #52]	@ (800175c <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh+0x44>)
 8001728:	fb02 f303 	mul.w	r3, r2, r3
 800172c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8001730:	4a0b      	ldr	r2, [pc, #44]	@ (8001760 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh+0x48>)
 8001732:	fba2 2303 	umull	r2, r3, r2, r3
 8001736:	099b      	lsrs	r3, r3, #6
 8001738:	60fb      	str	r3, [r7, #12]

	return (((timeout_period_us * 1000) + (macro_period_ns / 2)) / macro_period_ns);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001740:	fb03 f202 	mul.w	r2, r3, r2
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	085b      	lsrs	r3, r3, #1
 8001748:	441a      	add	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	003a2f00 	.word	0x003a2f00
 8001760:	10624dd3 	.word	0x10624dd3

08001764 <_ZN7VL53L0X12writeReg8BitEhh>:

void VL53L0X::writeReg8Bit(uint8_t reg, uint8_t value)
{
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b087      	sub	sp, #28
 8001768:	af04      	add	r7, sp, #16
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	70fb      	strb	r3, [r7, #3]
 8001770:	4613      	mov	r3, r2
 8001772:	70bb      	strb	r3, [r7, #2]
	msgBuffer[0] = value; // Assign the value to the buffer.
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	78ba      	ldrb	r2, [r7, #2]
 8001778:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
	i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f103 0010 	add.w	r0, r3, #16
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	461c      	mov	r4, r3
 8001788:	78fb      	ldrb	r3, [r7, #3]
 800178a:	b29a      	uxth	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3364      	adds	r3, #100	@ 0x64
 8001790:	2164      	movs	r1, #100	@ 0x64
 8001792:	9102      	str	r1, [sp, #8]
 8001794:	2101      	movs	r1, #1
 8001796:	9101      	str	r1, [sp, #4]
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	2301      	movs	r3, #1
 800179c:	4621      	mov	r1, r4
 800179e:	f005 fa53 	bl	8006c48 <HAL_I2C_Mem_Write>
 80017a2:	4603      	mov	r3, r0
 80017a4:	461a      	mov	r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd90      	pop	{r4, r7, pc}

080017b4 <_ZN7VL53L0X13writeReg16BitEht>:

void VL53L0X::writeReg16Bit(uint8_t reg, uint16_t value)
{
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af04      	add	r7, sp, #16
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	460b      	mov	r3, r1
 80017be:	70fb      	strb	r3, [r7, #3]
 80017c0:	4613      	mov	r3, r2
 80017c2:	803b      	strh	r3, [r7, #0]
	memcpy(msgBuffer, &value, 2); // Assign the value to the buffer.
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3364      	adds	r3, #100	@ 0x64
 80017c8:	883a      	ldrh	r2, [r7, #0]
 80017ca:	801a      	strh	r2, [r3, #0]
	i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f103 0010 	add.w	r0, r3, #16
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	461c      	mov	r4, r3
 80017d8:	78fb      	ldrb	r3, [r7, #3]
 80017da:	b29a      	uxth	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3364      	adds	r3, #100	@ 0x64
 80017e0:	2164      	movs	r1, #100	@ 0x64
 80017e2:	9102      	str	r1, [sp, #8]
 80017e4:	2102      	movs	r1, #2
 80017e6:	9101      	str	r1, [sp, #4]
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	2301      	movs	r3, #1
 80017ec:	4621      	mov	r1, r4
 80017ee:	f005 fa2b 	bl	8006c48 <HAL_I2C_Mem_Write>
 80017f2:	4603      	mov	r3, r0
 80017f4:	461a      	mov	r2, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	bd90      	pop	{r4, r7, pc}

08001804 <_ZN7VL53L0X11readReg8BitEh>:
	memcpy(msgBuffer, &value, 4); // Assign the value to the buffer.
	i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, 4, I2C_TIMEOUT);
}

uint8_t VL53L0X::readReg8Bit(uint8_t reg)
{
 8001804:	b590      	push	{r4, r7, lr}
 8001806:	b089      	sub	sp, #36	@ 0x24
 8001808:	af04      	add	r7, sp, #16
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	460b      	mov	r3, r1
 800180e:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, msgBuffer, 1, I2C_TIMEOUT);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f103 0010 	add.w	r0, r3, #16
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	f043 0301 	orr.w	r3, r3, #1
 800181e:	b2db      	uxtb	r3, r3
 8001820:	461c      	mov	r4, r3
 8001822:	78fb      	ldrb	r3, [r7, #3]
 8001824:	b29a      	uxth	r2, r3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3364      	adds	r3, #100	@ 0x64
 800182a:	2164      	movs	r1, #100	@ 0x64
 800182c:	9102      	str	r1, [sp, #8]
 800182e:	2101      	movs	r1, #1
 8001830:	9101      	str	r1, [sp, #4]
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2301      	movs	r3, #1
 8001836:	4621      	mov	r1, r4
 8001838:	f005 fb1a 	bl	8006e70 <HAL_I2C_Mem_Read>
 800183c:	4603      	mov	r3, r0
 800183e:	461a      	mov	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
	value = msgBuffer[0];
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 800184c:	73fb      	strb	r3, [r7, #15]

	return value;
 800184e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	bd90      	pop	{r4, r7, pc}

08001858 <_ZN7VL53L0X12readReg16BitEh>:

uint16_t VL53L0X::readReg16Bit(uint8_t reg)
{
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b089      	sub	sp, #36	@ 0x24
 800185c:	af04      	add	r7, sp, #16
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	70fb      	strb	r3, [r7, #3]
	uint16_t value;

	i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, msgBuffer, 2, I2C_TIMEOUT);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f103 0010 	add.w	r0, r3, #16
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	b2db      	uxtb	r3, r3
 8001874:	461c      	mov	r4, r3
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	b29a      	uxth	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3364      	adds	r3, #100	@ 0x64
 800187e:	2164      	movs	r1, #100	@ 0x64
 8001880:	9102      	str	r1, [sp, #8]
 8001882:	2102      	movs	r1, #2
 8001884:	9101      	str	r1, [sp, #4]
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2301      	movs	r3, #1
 800188a:	4621      	mov	r1, r4
 800188c:	f005 faf0 	bl	8006e70 <HAL_I2C_Mem_Read>
 8001890:	4603      	mov	r3, r0
 8001892:	461a      	mov	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
	memcpy(&value, msgBuffer, 2);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	3364      	adds	r3, #100	@ 0x64
 800189e:	881b      	ldrh	r3, [r3, #0]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	81fb      	strh	r3, [r7, #14]

	return value;
 80018a4:	89fb      	ldrh	r3, [r7, #14]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd90      	pop	{r4, r7, pc}

080018ae <_ZN7VL53L0X10writeMultiEhPKhh>:

	return value;
}

void VL53L0X::writeMulti(uint8_t reg, uint8_t const *src, uint8_t count)
{
 80018ae:	b5b0      	push	{r4, r5, r7, lr}
 80018b0:	b088      	sub	sp, #32
 80018b2:	af04      	add	r7, sp, #16
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	461a      	mov	r2, r3
 80018ba:	460b      	mov	r3, r1
 80018bc:	72fb      	strb	r3, [r7, #11]
 80018be:	4613      	mov	r3, r2
 80018c0:	72bb      	strb	r3, [r7, #10]
	memcpy(msgBuffer, src, 4);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	3364      	adds	r3, #100	@ 0x64
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6812      	ldr	r2, [r2, #0]
 80018ca:	601a      	str	r2, [r3, #0]
	i2cStat = HAL_I2C_Mem_Write(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_WRITE, reg, 1, msgBuffer, count, I2C_TIMEOUT);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f103 0010 	add.w	r0, r3, #16
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461d      	mov	r5, r3
 80018d8:	7afb      	ldrb	r3, [r7, #11]
 80018da:	b299      	uxth	r1, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	3364      	adds	r3, #100	@ 0x64
 80018e0:	7aba      	ldrb	r2, [r7, #10]
 80018e2:	b292      	uxth	r2, r2
 80018e4:	2464      	movs	r4, #100	@ 0x64
 80018e6:	9402      	str	r4, [sp, #8]
 80018e8:	9201      	str	r2, [sp, #4]
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2301      	movs	r3, #1
 80018ee:	460a      	mov	r2, r1
 80018f0:	4629      	mov	r1, r5
 80018f2:	f005 f9a9 	bl	8006c48 <HAL_I2C_Mem_Write>
 80018f6:	4603      	mov	r3, r0
 80018f8:	461a      	mov	r2, r3
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bdb0      	pop	{r4, r5, r7, pc}

08001908 <_ZN7VL53L0X9readMultiEhPhh>:

void VL53L0X::readMulti(uint8_t reg, uint8_t * dst, uint8_t count)
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b089      	sub	sp, #36	@ 0x24
 800190c:	af04      	add	r7, sp, #16
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	607a      	str	r2, [r7, #4]
 8001912:	461a      	mov	r2, r3
 8001914:	460b      	mov	r3, r1
 8001916:	72fb      	strb	r3, [r7, #11]
 8001918:	4613      	mov	r3, r2
 800191a:	72bb      	strb	r3, [r7, #10]
	i2cStat = HAL_I2C_Mem_Read(&VL53L0X_I2C_Handler, g_i2cAddr | I2C_READ, reg, 1, dst, count, I2C_TIMEOUT);
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f103 0010 	add.w	r0, r3, #16
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	461c      	mov	r4, r3
 800192e:	7afb      	ldrb	r3, [r7, #11]
 8001930:	b29a      	uxth	r2, r3
 8001932:	7abb      	ldrb	r3, [r7, #10]
 8001934:	b29b      	uxth	r3, r3
 8001936:	2164      	movs	r1, #100	@ 0x64
 8001938:	9102      	str	r1, [sp, #8]
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	2301      	movs	r3, #1
 8001942:	4621      	mov	r1, r4
 8001944:	f005 fa94 	bl	8006e70 <HAL_I2C_Mem_Read>
 8001948:	4603      	mov	r3, r0
 800194a:	461a      	mov	r2, r3
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
}
 8001952:	bf00      	nop
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	bd90      	pop	{r4, r7, pc}

0800195a <_ZN7VL53L0X11initVL53L0XEbP19__I2C_HandleTypeDef>:
// is performed by ST on the bare modules; it seems like that should work well
// enough unless a cover glass is added.
// If io_2v8 (optional) is true or not given, the sensor is configured for 2V8
// mode.
bool VL53L0X::initVL53L0X(bool io_2v8, I2C_HandleTypeDef *handler)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b088      	sub	sp, #32
 800195e:	af00      	add	r7, sp, #0
 8001960:	60f8      	str	r0, [r7, #12]
 8001962:	460b      	mov	r3, r1
 8001964:	607a      	str	r2, [r7, #4]
 8001966:	72fb      	strb	r3, [r7, #11]
	// VL53L0X_DataInit() begin

	// Handler
	memcpy(&VL53L0X_I2C_Handler, handler, sizeof(*handler));
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3310      	adds	r3, #16
 800196c:	2254      	movs	r2, #84	@ 0x54
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4618      	mov	r0, r3
 8001972:	f009 fc15 	bl	800b1a0 <memcpy>

	// Reset the message buffer.
	msgBuffer[0] = 0;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
	msgBuffer[1] = 0;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
	msgBuffer[2] = 0;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
	msgBuffer[3] = 0;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67

	// sensor uses 1V8 mode for I/O by default; switch to 2V8 mode if necessary
	if (io_2v8)
 8001996:	7afb      	ldrb	r3, [r7, #11]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00c      	beq.n	80019b6 <_ZN7VL53L0X11initVL53L0XEbP19__I2C_HandleTypeDef+0x5c>
	{
		writeReg8Bit(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
		readReg8Bit(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV) | 0x01); // set bit 0
 800199c:	2189      	movs	r1, #137	@ 0x89
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f7ff ff30 	bl	8001804 <_ZN7VL53L0X11readReg8BitEh>
 80019a4:	4603      	mov	r3, r0
		writeReg8Bit(VHV_CONFIG_PAD_SCL_SDA__EXTSUP_HV,
 80019a6:	f043 0301 	orr.w	r3, r3, #1
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	461a      	mov	r2, r3
 80019ae:	2189      	movs	r1, #137	@ 0x89
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f7ff fed7 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	}

	// "Set I2C standard mode"
	writeReg8Bit(0x88, 0x00);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2188      	movs	r1, #136	@ 0x88
 80019ba:	68f8      	ldr	r0, [r7, #12]
 80019bc:	f7ff fed2 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	writeReg8Bit(0x80, 0x01);
 80019c0:	2201      	movs	r2, #1
 80019c2:	2180      	movs	r1, #128	@ 0x80
 80019c4:	68f8      	ldr	r0, [r7, #12]
 80019c6:	f7ff fecd 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0xFF, 0x01);
 80019ca:	2201      	movs	r2, #1
 80019cc:	21ff      	movs	r1, #255	@ 0xff
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f7ff fec8 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x00, 0x00);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2100      	movs	r1, #0
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f7ff fec3 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	g_stopVariable = readReg8Bit(0x91);
 80019de:	2191      	movs	r1, #145	@ 0x91
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f7ff ff0f 	bl	8001804 <_ZN7VL53L0X11readReg8BitEh>
 80019e6:	4603      	mov	r3, r0
 80019e8:	461a      	mov	r2, r3
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	721a      	strb	r2, [r3, #8]
	writeReg8Bit(0x00, 0x01);
 80019ee:	2201      	movs	r2, #1
 80019f0:	2100      	movs	r1, #0
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f7ff feb6 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0xFF, 0x00);
 80019f8:	2200      	movs	r2, #0
 80019fa:	21ff      	movs	r1, #255	@ 0xff
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f7ff feb1 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x80, 0x00);
 8001a02:	2200      	movs	r2, #0
 8001a04:	2180      	movs	r1, #128	@ 0x80
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f7ff feac 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	// disable SIGNAL_RATE_MSRC (bit 1) and SIGNAL_RATE_PRE_RANGE (bit 4) limit checks
	writeReg8Bit(MSRC_CONFIG_CONTROL, readReg8Bit(MSRC_CONFIG_CONTROL) | 0x12);
 8001a0c:	2160      	movs	r1, #96	@ 0x60
 8001a0e:	68f8      	ldr	r0, [r7, #12]
 8001a10:	f7ff fef8 	bl	8001804 <_ZN7VL53L0X11readReg8BitEh>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f043 0312 	orr.w	r3, r3, #18
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	2160      	movs	r1, #96	@ 0x60
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f7ff fe9f 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	// set final range signal rate limit to 0.25 MCPS (million counts per second)
	setSignalRateLimit(0.25);
 8001a26:	eeb5 0a00 	vmov.f32	s0, #80	@ 0x3e800000  0.250
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 fa6c 	bl	8001f08 <_ZN7VL53L0X18setSignalRateLimitEf>

	writeReg8Bit(SYSTEM_SEQUENCE_CONFIG, 0xFF);
 8001a30:	22ff      	movs	r2, #255	@ 0xff
 8001a32:	2101      	movs	r1, #1
 8001a34:	68f8      	ldr	r0, [r7, #12]
 8001a36:	f7ff fe95 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	// VL53L0X_StaticInit() begin

	uint8_t spad_count;
	bool spad_type_is_aperture;
	if (!getSpadInfo(&spad_count, &spad_type_is_aperture)) { return false; }
 8001a3a:	f107 021b 	add.w	r2, r7, #27
 8001a3e:	f107 031c 	add.w	r3, r7, #28
 8001a42:	4619      	mov	r1, r3
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f7ff fc65 	bl	8001314 <_ZN7VL53L0X11getSpadInfoEPhPb>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	f083 0301 	eor.w	r3, r3, #1
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <_ZN7VL53L0X11initVL53L0XEbP19__I2C_HandleTypeDef+0x100>
 8001a56:	2300      	movs	r3, #0
 8001a58:	e24f      	b.n	8001efa <_ZN7VL53L0X11initVL53L0XEbP19__I2C_HandleTypeDef+0x5a0>

	// The SPAD map (RefGoodSpadMap) is read by VL53L0X_get_info_from_device() in
	// the API, but the same data seems to be more easily readable from
	// GLOBAL_CONFIG_SPAD_ENABLES_REF_0 through _6, so read it from there
	uint8_t ref_spad_map[6];
	readMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8001a5a:	f107 0214 	add.w	r2, r7, #20
 8001a5e:	2306      	movs	r3, #6
 8001a60:	21b0      	movs	r1, #176	@ 0xb0
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f7ff ff50 	bl	8001908 <_ZN7VL53L0X9readMultiEhPhh>

	// -- VL53L0X_set_reference_spads() begin (assume NVM values are valid)

	writeReg8Bit(0xFF, 0x01);
 8001a68:	2201      	movs	r2, #1
 8001a6a:	21ff      	movs	r1, #255	@ 0xff
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f7ff fe79 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);
 8001a72:	2200      	movs	r2, #0
 8001a74:	214f      	movs	r1, #79	@ 0x4f
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f7ff fe74 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);
 8001a7c:	222c      	movs	r2, #44	@ 0x2c
 8001a7e:	214e      	movs	r1, #78	@ 0x4e
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f7ff fe6f 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0xFF, 0x00);
 8001a86:	2200      	movs	r2, #0
 8001a88:	21ff      	movs	r1, #255	@ 0xff
 8001a8a:	68f8      	ldr	r0, [r7, #12]
 8001a8c:	f7ff fe6a 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(GLOBAL_CONFIG_REF_EN_START_SELECT, 0xB4);
 8001a90:	22b4      	movs	r2, #180	@ 0xb4
 8001a92:	21b6      	movs	r1, #182	@ 0xb6
 8001a94:	68f8      	ldr	r0, [r7, #12]
 8001a96:	f7ff fe65 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	uint8_t first_spad_to_enable = spad_type_is_aperture ? 12 : 0; // 12 is the first aperture spad
 8001a9a:	7efb      	ldrb	r3, [r7, #27]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <_ZN7VL53L0X11initVL53L0XEbP19__I2C_HandleTypeDef+0x14a>
 8001aa0:	230c      	movs	r3, #12
 8001aa2:	e000      	b.n	8001aa6 <_ZN7VL53L0X11initVL53L0XEbP19__I2C_HandleTypeDef+0x14c>
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	777b      	strb	r3, [r7, #29]
	uint8_t spads_enabled = 0;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	77fb      	strb	r3, [r7, #31]

	for (uint8_t i = 0; i < 48; i++)
 8001aac:	2300      	movs	r3, #0
 8001aae:	77bb      	strb	r3, [r7, #30]
 8001ab0:	e039      	b.n	8001b26 <_ZN7VL53L0X11initVL53L0XEbP19__I2C_HandleTypeDef+0x1cc>
	{
		if (i < first_spad_to_enable || spads_enabled == spad_count)
 8001ab2:	7fba      	ldrb	r2, [r7, #30]
 8001ab4:	7f7b      	ldrb	r3, [r7, #29]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d303      	bcc.n	8001ac2 <_ZN7VL53L0X11initVL53L0XEbP19__I2C_HandleTypeDef+0x168>
 8001aba:	7f3b      	ldrb	r3, [r7, #28]
 8001abc:	7ffa      	ldrb	r2, [r7, #31]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d11a      	bne.n	8001af8 <_ZN7VL53L0X11initVL53L0XEbP19__I2C_HandleTypeDef+0x19e>
		{
			// This bit is lower than the first one that should be enabled, or
			// (reference_spad_count) bits have already been enabled, so zero this bit
			ref_spad_map[i / 8] &= ~(1 << (i % 8));
 8001ac2:	7fbb      	ldrb	r3, [r7, #30]
 8001ac4:	08db      	lsrs	r3, r3, #3
 8001ac6:	b2d8      	uxtb	r0, r3
 8001ac8:	4603      	mov	r3, r0
 8001aca:	3320      	adds	r3, #32
 8001acc:	443b      	add	r3, r7
 8001ace:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001ad2:	b25a      	sxtb	r2, r3
 8001ad4:	7fbb      	ldrb	r3, [r7, #30]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	2101      	movs	r1, #1
 8001adc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae0:	b25b      	sxtb	r3, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	b25b      	sxtb	r3, r3
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	b25a      	sxtb	r2, r3
 8001aea:	4603      	mov	r3, r0
 8001aec:	b2d2      	uxtb	r2, r2
 8001aee:	3320      	adds	r3, #32
 8001af0:	443b      	add	r3, r7
 8001af2:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8001af6:	e013      	b.n	8001b20 <_ZN7VL53L0X11initVL53L0XEbP19__I2C_HandleTypeDef+0x1c6>
		}
		else if ((ref_spad_map[i / 8] >> (i % 8)) & 0x1)
 8001af8:	7fbb      	ldrb	r3, [r7, #30]
 8001afa:	08db      	lsrs	r3, r3, #3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	3320      	adds	r3, #32
 8001b00:	443b      	add	r3, r7
 8001b02:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001b06:	461a      	mov	r2, r3
 8001b08:	7fbb      	ldrb	r3, [r7, #30]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	fa42 f303 	asr.w	r3, r2, r3
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d002      	beq.n	8001b20 <_ZN7VL53L0X11initVL53L0XEbP19__I2C_HandleTypeDef+0x1c6>
		{
			spads_enabled++;
 8001b1a:	7ffb      	ldrb	r3, [r7, #31]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	77fb      	strb	r3, [r7, #31]
	for (uint8_t i = 0; i < 48; i++)
 8001b20:	7fbb      	ldrb	r3, [r7, #30]
 8001b22:	3301      	adds	r3, #1
 8001b24:	77bb      	strb	r3, [r7, #30]
 8001b26:	7fbb      	ldrb	r3, [r7, #30]
 8001b28:	2b2f      	cmp	r3, #47	@ 0x2f
 8001b2a:	d9c2      	bls.n	8001ab2 <_ZN7VL53L0X11initVL53L0XEbP19__I2C_HandleTypeDef+0x158>
		}
	}

	writeMulti(GLOBAL_CONFIG_SPAD_ENABLES_REF_0, ref_spad_map, 6);
 8001b2c:	f107 0214 	add.w	r2, r7, #20
 8001b30:	2306      	movs	r3, #6
 8001b32:	21b0      	movs	r1, #176	@ 0xb0
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7ff feba 	bl	80018ae <_ZN7VL53L0X10writeMultiEhPKhh>
	// -- VL53L0X_set_reference_spads() end

	// -- VL53L0X_load_tuning_settings() begin
	// DefaultTuningSettings from vl53l0x_tuning.h

	writeReg8Bit(0xFF, 0x01);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	21ff      	movs	r1, #255	@ 0xff
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7ff fe10 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x00, 0x00);
 8001b44:	2200      	movs	r2, #0
 8001b46:	2100      	movs	r1, #0
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f7ff fe0b 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	writeReg8Bit(0xFF, 0x00);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	21ff      	movs	r1, #255	@ 0xff
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f7ff fe06 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x09, 0x00);
 8001b58:	2200      	movs	r2, #0
 8001b5a:	2109      	movs	r1, #9
 8001b5c:	68f8      	ldr	r0, [r7, #12]
 8001b5e:	f7ff fe01 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x10, 0x00);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2110      	movs	r1, #16
 8001b66:	68f8      	ldr	r0, [r7, #12]
 8001b68:	f7ff fdfc 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x11, 0x00);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2111      	movs	r1, #17
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f7ff fdf7 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	writeReg8Bit(0x24, 0x01);
 8001b76:	2201      	movs	r2, #1
 8001b78:	2124      	movs	r1, #36	@ 0x24
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	f7ff fdf2 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x25, 0xFF);
 8001b80:	22ff      	movs	r2, #255	@ 0xff
 8001b82:	2125      	movs	r1, #37	@ 0x25
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f7ff fded 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x75, 0x00);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2175      	movs	r1, #117	@ 0x75
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f7ff fde8 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	writeReg8Bit(0xFF, 0x01);
 8001b94:	2201      	movs	r2, #1
 8001b96:	21ff      	movs	r1, #255	@ 0xff
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f7ff fde3 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x4E, 0x2C);
 8001b9e:	222c      	movs	r2, #44	@ 0x2c
 8001ba0:	214e      	movs	r1, #78	@ 0x4e
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f7ff fdde 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x48, 0x00);
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2148      	movs	r1, #72	@ 0x48
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f7ff fdd9 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x30, 0x20);
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	2130      	movs	r1, #48	@ 0x30
 8001bb6:	68f8      	ldr	r0, [r7, #12]
 8001bb8:	f7ff fdd4 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	writeReg8Bit(0xFF, 0x00);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	21ff      	movs	r1, #255	@ 0xff
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f7ff fdcf 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x30, 0x09);
 8001bc6:	2209      	movs	r2, #9
 8001bc8:	2130      	movs	r1, #48	@ 0x30
 8001bca:	68f8      	ldr	r0, [r7, #12]
 8001bcc:	f7ff fdca 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x54, 0x00);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	2154      	movs	r1, #84	@ 0x54
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f7ff fdc5 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x31, 0x04);
 8001bda:	2204      	movs	r2, #4
 8001bdc:	2131      	movs	r1, #49	@ 0x31
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f7ff fdc0 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x32, 0x03);
 8001be4:	2203      	movs	r2, #3
 8001be6:	2132      	movs	r1, #50	@ 0x32
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f7ff fdbb 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x40, 0x83);
 8001bee:	2283      	movs	r2, #131	@ 0x83
 8001bf0:	2140      	movs	r1, #64	@ 0x40
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f7ff fdb6 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x46, 0x25);
 8001bf8:	2225      	movs	r2, #37	@ 0x25
 8001bfa:	2146      	movs	r1, #70	@ 0x46
 8001bfc:	68f8      	ldr	r0, [r7, #12]
 8001bfe:	f7ff fdb1 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x60, 0x00);
 8001c02:	2200      	movs	r2, #0
 8001c04:	2160      	movs	r1, #96	@ 0x60
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f7ff fdac 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x27, 0x00);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2127      	movs	r1, #39	@ 0x27
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f7ff fda7 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x50, 0x06);
 8001c16:	2206      	movs	r2, #6
 8001c18:	2150      	movs	r1, #80	@ 0x50
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f7ff fda2 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x51, 0x00);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2151      	movs	r1, #81	@ 0x51
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f7ff fd9d 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x52, 0x96);
 8001c2a:	2296      	movs	r2, #150	@ 0x96
 8001c2c:	2152      	movs	r1, #82	@ 0x52
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f7ff fd98 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x56, 0x08);
 8001c34:	2208      	movs	r2, #8
 8001c36:	2156      	movs	r1, #86	@ 0x56
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f7ff fd93 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x57, 0x30);
 8001c3e:	2230      	movs	r2, #48	@ 0x30
 8001c40:	2157      	movs	r1, #87	@ 0x57
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	f7ff fd8e 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x61, 0x00);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2161      	movs	r1, #97	@ 0x61
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f7ff fd89 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x62, 0x00);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2162      	movs	r1, #98	@ 0x62
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f7ff fd84 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x64, 0x00);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2164      	movs	r1, #100	@ 0x64
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f7ff fd7f 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x65, 0x00);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2165      	movs	r1, #101	@ 0x65
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f7ff fd7a 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x66, 0xA0);
 8001c70:	22a0      	movs	r2, #160	@ 0xa0
 8001c72:	2166      	movs	r1, #102	@ 0x66
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f7ff fd75 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	writeReg8Bit(0xFF, 0x01);
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	21ff      	movs	r1, #255	@ 0xff
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f7ff fd70 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x22, 0x32);
 8001c84:	2232      	movs	r2, #50	@ 0x32
 8001c86:	2122      	movs	r1, #34	@ 0x22
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f7ff fd6b 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x47, 0x14);
 8001c8e:	2214      	movs	r2, #20
 8001c90:	2147      	movs	r1, #71	@ 0x47
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f7ff fd66 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x49, 0xFF);
 8001c98:	22ff      	movs	r2, #255	@ 0xff
 8001c9a:	2149      	movs	r1, #73	@ 0x49
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f7ff fd61 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x4A, 0x00);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	214a      	movs	r1, #74	@ 0x4a
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f7ff fd5c 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	writeReg8Bit(0xFF, 0x00);
 8001cac:	2200      	movs	r2, #0
 8001cae:	21ff      	movs	r1, #255	@ 0xff
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f7ff fd57 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x7A, 0x0A);
 8001cb6:	220a      	movs	r2, #10
 8001cb8:	217a      	movs	r1, #122	@ 0x7a
 8001cba:	68f8      	ldr	r0, [r7, #12]
 8001cbc:	f7ff fd52 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x7B, 0x00);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	217b      	movs	r1, #123	@ 0x7b
 8001cc4:	68f8      	ldr	r0, [r7, #12]
 8001cc6:	f7ff fd4d 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x78, 0x21);
 8001cca:	2221      	movs	r2, #33	@ 0x21
 8001ccc:	2178      	movs	r1, #120	@ 0x78
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f7ff fd48 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	writeReg8Bit(0xFF, 0x01);
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	21ff      	movs	r1, #255	@ 0xff
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f7ff fd43 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x23, 0x34);
 8001cde:	2234      	movs	r2, #52	@ 0x34
 8001ce0:	2123      	movs	r1, #35	@ 0x23
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f7ff fd3e 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x42, 0x00);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2142      	movs	r1, #66	@ 0x42
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f7ff fd39 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x44, 0xFF);
 8001cf2:	22ff      	movs	r2, #255	@ 0xff
 8001cf4:	2144      	movs	r1, #68	@ 0x44
 8001cf6:	68f8      	ldr	r0, [r7, #12]
 8001cf8:	f7ff fd34 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x45, 0x26);
 8001cfc:	2226      	movs	r2, #38	@ 0x26
 8001cfe:	2145      	movs	r1, #69	@ 0x45
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	f7ff fd2f 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x46, 0x05);
 8001d06:	2205      	movs	r2, #5
 8001d08:	2146      	movs	r1, #70	@ 0x46
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f7ff fd2a 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x40, 0x40);
 8001d10:	2240      	movs	r2, #64	@ 0x40
 8001d12:	2140      	movs	r1, #64	@ 0x40
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f7ff fd25 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x0E, 0x06);
 8001d1a:	2206      	movs	r2, #6
 8001d1c:	210e      	movs	r1, #14
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f7ff fd20 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x20, 0x1A);
 8001d24:	221a      	movs	r2, #26
 8001d26:	2120      	movs	r1, #32
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f7ff fd1b 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x43, 0x40);
 8001d2e:	2240      	movs	r2, #64	@ 0x40
 8001d30:	2143      	movs	r1, #67	@ 0x43
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f7ff fd16 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	writeReg8Bit(0xFF, 0x00);
 8001d38:	2200      	movs	r2, #0
 8001d3a:	21ff      	movs	r1, #255	@ 0xff
 8001d3c:	68f8      	ldr	r0, [r7, #12]
 8001d3e:	f7ff fd11 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x34, 0x03);
 8001d42:	2203      	movs	r2, #3
 8001d44:	2134      	movs	r1, #52	@ 0x34
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f7ff fd0c 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x35, 0x44);
 8001d4c:	2244      	movs	r2, #68	@ 0x44
 8001d4e:	2135      	movs	r1, #53	@ 0x35
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f7ff fd07 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	writeReg8Bit(0xFF, 0x01);
 8001d56:	2201      	movs	r2, #1
 8001d58:	21ff      	movs	r1, #255	@ 0xff
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f7ff fd02 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x31, 0x04);
 8001d60:	2204      	movs	r2, #4
 8001d62:	2131      	movs	r1, #49	@ 0x31
 8001d64:	68f8      	ldr	r0, [r7, #12]
 8001d66:	f7ff fcfd 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x4B, 0x09);
 8001d6a:	2209      	movs	r2, #9
 8001d6c:	214b      	movs	r1, #75	@ 0x4b
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f7ff fcf8 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x4C, 0x05);
 8001d74:	2205      	movs	r2, #5
 8001d76:	214c      	movs	r1, #76	@ 0x4c
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f7ff fcf3 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x4D, 0x04);
 8001d7e:	2204      	movs	r2, #4
 8001d80:	214d      	movs	r1, #77	@ 0x4d
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f7ff fcee 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	writeReg8Bit(0xFF, 0x00);
 8001d88:	2200      	movs	r2, #0
 8001d8a:	21ff      	movs	r1, #255	@ 0xff
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f7ff fce9 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x44, 0x00);
 8001d92:	2200      	movs	r2, #0
 8001d94:	2144      	movs	r1, #68	@ 0x44
 8001d96:	68f8      	ldr	r0, [r7, #12]
 8001d98:	f7ff fce4 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x45, 0x20);
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	2145      	movs	r1, #69	@ 0x45
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	f7ff fcdf 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x47, 0x08);
 8001da6:	2208      	movs	r2, #8
 8001da8:	2147      	movs	r1, #71	@ 0x47
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f7ff fcda 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x48, 0x28);
 8001db0:	2228      	movs	r2, #40	@ 0x28
 8001db2:	2148      	movs	r1, #72	@ 0x48
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f7ff fcd5 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x67, 0x00);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2167      	movs	r1, #103	@ 0x67
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	f7ff fcd0 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x70, 0x04);
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	2170      	movs	r1, #112	@ 0x70
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f7ff fccb 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x71, 0x01);
 8001dce:	2201      	movs	r2, #1
 8001dd0:	2171      	movs	r1, #113	@ 0x71
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f7ff fcc6 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x72, 0xFE);
 8001dd8:	22fe      	movs	r2, #254	@ 0xfe
 8001dda:	2172      	movs	r1, #114	@ 0x72
 8001ddc:	68f8      	ldr	r0, [r7, #12]
 8001dde:	f7ff fcc1 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x76, 0x00);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2176      	movs	r1, #118	@ 0x76
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f7ff fcbc 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x77, 0x00);
 8001dec:	2200      	movs	r2, #0
 8001dee:	2177      	movs	r1, #119	@ 0x77
 8001df0:	68f8      	ldr	r0, [r7, #12]
 8001df2:	f7ff fcb7 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	writeReg8Bit(0xFF, 0x01);
 8001df6:	2201      	movs	r2, #1
 8001df8:	21ff      	movs	r1, #255	@ 0xff
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f7ff fcb2 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x0D, 0x01);
 8001e00:	2201      	movs	r2, #1
 8001e02:	210d      	movs	r1, #13
 8001e04:	68f8      	ldr	r0, [r7, #12]
 8001e06:	f7ff fcad 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	writeReg8Bit(0xFF, 0x00);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	21ff      	movs	r1, #255	@ 0xff
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f7ff fca8 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x80, 0x01);
 8001e14:	2201      	movs	r2, #1
 8001e16:	2180      	movs	r1, #128	@ 0x80
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f7ff fca3 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x01, 0xF8);
 8001e1e:	22f8      	movs	r2, #248	@ 0xf8
 8001e20:	2101      	movs	r1, #1
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f7ff fc9e 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	writeReg8Bit(0xFF, 0x01);
 8001e28:	2201      	movs	r2, #1
 8001e2a:	21ff      	movs	r1, #255	@ 0xff
 8001e2c:	68f8      	ldr	r0, [r7, #12]
 8001e2e:	f7ff fc99 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x8E, 0x01);
 8001e32:	2201      	movs	r2, #1
 8001e34:	218e      	movs	r1, #142	@ 0x8e
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f7ff fc94 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x00, 0x01);
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	2100      	movs	r1, #0
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f7ff fc8f 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0xFF, 0x00);
 8001e46:	2200      	movs	r2, #0
 8001e48:	21ff      	movs	r1, #255	@ 0xff
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f7ff fc8a 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x80, 0x00);
 8001e50:	2200      	movs	r2, #0
 8001e52:	2180      	movs	r1, #128	@ 0x80
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f7ff fc85 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	// -- VL53L0X_load_tuning_settings() end

	// "Set interrupt config to new sample ready"
	// -- VL53L0X_SetGpioConfig() begin

	writeReg8Bit(SYSTEM_INTERRUPT_CONFIG_GPIO, 0x04);
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	210a      	movs	r1, #10
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f7ff fc80 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(GPIO_HV_MUX_ACTIVE_HIGH, readReg8Bit(GPIO_HV_MUX_ACTIVE_HIGH) & ~0x10); // active low
 8001e64:	2184      	movs	r1, #132	@ 0x84
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f7ff fccc 	bl	8001804 <_ZN7VL53L0X11readReg8BitEh>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f023 0310 	bic.w	r3, r3, #16
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	461a      	mov	r2, r3
 8001e76:	2184      	movs	r1, #132	@ 0x84
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f7ff fc73 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	210b      	movs	r1, #11
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f7ff fc6e 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	// -- VL53L0X_SetGpioConfig() end

	g_measTimBudUs = getMeasurementTimingBudget();
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 f90b 	bl	80020a4 <_ZN7VL53L0X26getMeasurementTimingBudgetEv>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	60da      	str	r2, [r3, #12]
	// "Disable MSRC and TCC by default"
	// MSRC = Minimum Signal Rate Check
	// TCC = Target CentreCheck
	// -- VL53L0X_SetSequenceStepEnable() begin

	writeReg8Bit(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8001e94:	22e8      	movs	r2, #232	@ 0xe8
 8001e96:	2101      	movs	r1, #1
 8001e98:	68f8      	ldr	r0, [r7, #12]
 8001e9a:	f7ff fc63 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	// -- VL53L0X_SetSequenceStepEnable() end

	// "Recalculate timing budget"
	setMeasurementTimingBudget(g_measTimBudUs);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 f865 	bl	8001f74 <_ZN7VL53L0X26setMeasurementTimingBudgetEm>

	// VL53L0X_PerformRefCalibration() begin (VL53L0X_perform_ref_calibration())

	// -- VL53L0X_perform_vhv_calibration() begin

	writeReg8Bit(SYSTEM_SEQUENCE_CONFIG, 0x01);
 8001eaa:	2201      	movs	r2, #1
 8001eac:	2101      	movs	r1, #1
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f7ff fc58 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	if (!performSingleRefCalibration(0x40)) { return false; }
 8001eb4:	2140      	movs	r1, #64	@ 0x40
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f7ff fb7d 	bl	80015b6 <_ZN7VL53L0X27performSingleRefCalibrationEh>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	f083 0301 	eor.w	r3, r3, #1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d001      	beq.n	8001ecc <_ZN7VL53L0X11initVL53L0XEbP19__I2C_HandleTypeDef+0x572>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	e016      	b.n	8001efa <_ZN7VL53L0X11initVL53L0XEbP19__I2C_HandleTypeDef+0x5a0>

	// -- VL53L0X_perform_vhv_calibration() end

	// -- VL53L0X_perform_phase_calibration() begin

	writeReg8Bit(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8001ecc:	2202      	movs	r2, #2
 8001ece:	2101      	movs	r1, #1
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f7ff fc47 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	if (!performSingleRefCalibration(0x00)) { return false; }
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f7ff fb6c 	bl	80015b6 <_ZN7VL53L0X27performSingleRefCalibrationEh>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f083 0301 	eor.w	r3, r3, #1
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <_ZN7VL53L0X11initVL53L0XEbP19__I2C_HandleTypeDef+0x594>
 8001eea:	2300      	movs	r3, #0
 8001eec:	e005      	b.n	8001efa <_ZN7VL53L0X11initVL53L0XEbP19__I2C_HandleTypeDef+0x5a0>

	// -- VL53L0X_perform_phase_calibration() end

	// "restore the previous Sequence Config"
	writeReg8Bit(SYSTEM_SEQUENCE_CONFIG, 0xE8);
 8001eee:	22e8      	movs	r2, #232	@ 0xe8
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f7ff fc36 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	// VL53L0X_PerformRefCalibration() end

	return true;
 8001ef8:	2301      	movs	r3, #1
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3720      	adds	r7, #32
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	0000      	movs	r0, r0
 8001f04:	0000      	movs	r0, r0
	...

08001f08 <_ZN7VL53L0X18setSignalRateLimitEf>:
// Setting a lower limit increases the potential range of the sensor but also
// seems to increase the likelihood of getting an inaccurate reading because of
// unwanted reflections from objects other than the intended target.
// Defaults to 0.25 MCPS as initialized by the ST API and this library.
bool VL53L0X::setSignalRateLimit(float limit_Mcps)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	ed87 0a00 	vstr	s0, [r7]
	if (limit_Mcps < 0 || limit_Mcps > 511.99) { return false; }
 8001f14:	edd7 7a00 	vldr	s15, [r7]
 8001f18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f20:	d40a      	bmi.n	8001f38 <_ZN7VL53L0X18setSignalRateLimitEf+0x30>
 8001f22:	edd7 7a00 	vldr	s15, [r7]
 8001f26:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f2a:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8001f68 <_ZN7VL53L0X18setSignalRateLimitEf+0x60>
 8001f2e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8001f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f36:	dd01      	ble.n	8001f3c <_ZN7VL53L0X18setSignalRateLimitEf+0x34>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	e010      	b.n	8001f5e <_ZN7VL53L0X18setSignalRateLimitEf+0x56>

	// Q9.7 fixed point format (9 integer bits, 7 fractional bits)
	writeReg16Bit(FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT, limit_Mcps * (1 << 7));
 8001f3c:	edd7 7a00 	vldr	s15, [r7]
 8001f40:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001f70 <_ZN7VL53L0X18setSignalRateLimitEf+0x68>
 8001f44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f4c:	ee17 3a90 	vmov	r3, s15
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	461a      	mov	r2, r3
 8001f54:	2144      	movs	r1, #68	@ 0x44
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff fc2c 	bl	80017b4 <_ZN7VL53L0X13writeReg16BitEht>
	return true;
 8001f5c:	2301      	movs	r3, #1
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	0a3d70a4 	.word	0x0a3d70a4
 8001f6c:	407fffd7 	.word	0x407fffd7
 8001f70:	43000000 	.word	0x43000000

08001f74 <_ZN7VL53L0X26setMeasurementTimingBudgetEm>:
// budget allows for more accurate measurements. Increasing the budget by a
// factor of N decreases the range measurement standard deviation by a factor of
// sqrt(N). Defaults to about 33 milliseconds; the minimum is 20 ms.
// based on VL53L0X_set_measurement_timing_budget_micro_seconds()
bool VL53L0X::setMeasurementTimingBudget(uint32_t budget_us)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b092      	sub	sp, #72	@ 0x48
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
	SequenceStepEnables enables;
	SequenceStepTimeouts timeouts;

	uint16_t const StartOverhead      = 1910; //1320; // note that this is different than the value in get_
 8001f7e:	f240 7376 	movw	r3, #1910	@ 0x776
 8001f82:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
	uint16_t const EndOverhead        = 960;
 8001f86:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001f8a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
	uint16_t const MsrcOverhead       = 660;
 8001f8c:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8001f90:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	uint16_t const TccOverhead        = 590;
 8001f92:	f240 234e 	movw	r3, #590	@ 0x24e
 8001f96:	877b      	strh	r3, [r7, #58]	@ 0x3a
	uint16_t const DssOverhead        = 690;
 8001f98:	f240 23b2 	movw	r3, #690	@ 0x2b2
 8001f9c:	873b      	strh	r3, [r7, #56]	@ 0x38
	uint16_t const PreRangeOverhead   = 660;
 8001f9e:	f44f 7325 	mov.w	r3, #660	@ 0x294
 8001fa2:	86fb      	strh	r3, [r7, #54]	@ 0x36
	uint16_t const FinalRangeOverhead = 550;
 8001fa4:	f240 2326 	movw	r3, #550	@ 0x226
 8001fa8:	86bb      	strh	r3, [r7, #52]	@ 0x34

	uint32_t const MinTimingBudget = 20000;
 8001faa:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001fae:	633b      	str	r3, [r7, #48]	@ 0x30

	if (budget_us < MinTimingBudget) { return false; }
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d801      	bhi.n	8001fbe <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x4a>
 8001fba:	2300      	movs	r3, #0
 8001fbc:	e06e      	b.n	800209c <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x128>

	uint32_t used_budget_us = StartOverhead + EndOverhead;
 8001fbe:	f640 3336 	movw	r3, #2870	@ 0xb36
 8001fc2:	647b      	str	r3, [r7, #68]	@ 0x44

	getSequenceStepEnables(&enables);
 8001fc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fc8:	4619      	mov	r1, r3
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f7ff fa54 	bl	8001478 <_ZN7VL53L0X22getSequenceStepEnablesEP19SequenceStepEnables>
	getSequenceStepTimeouts(&enables, &timeouts);
 8001fd0:	f107 020c 	add.w	r2, r7, #12
 8001fd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fd8:	4619      	mov	r1, r3
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff fa80 	bl	80014e0 <_ZN7VL53L0X23getSequenceStepTimeoutsEPK19SequenceStepEnablesP20SequenceStepTimeouts>

	if (enables.tcc)
 8001fe0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x80>
	{
		used_budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fec:	4413      	add	r3, r2
 8001fee:	f203 234e 	addw	r3, r3, #590	@ 0x24e
 8001ff2:	647b      	str	r3, [r7, #68]	@ 0x44
	}

	if (enables.dss)
 8001ff4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d007      	beq.n	800200c <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x98>
	{
		used_budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	f203 23b2 	addw	r3, r3, #690	@ 0x2b2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002006:	4413      	add	r3, r2
 8002008:	647b      	str	r3, [r7, #68]	@ 0x44
 800200a:	e009      	b.n	8002020 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0xac>
	}
	else if (enables.msrc)
 800200c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0xac>
	{
		used_budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002018:	4413      	add	r3, r2
 800201a:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800201e:	647b      	str	r3, [r7, #68]	@ 0x44
	}

	if (enables.pre_range)
 8002020:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0xc0>
	{
		used_budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8002028:	69fa      	ldr	r2, [r7, #28]
 800202a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800202c:	4413      	add	r3, r2
 800202e:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8002032:	647b      	str	r3, [r7, #68]	@ 0x44
	}

	if (enables.final_range)
 8002034:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002038:	2b00      	cmp	r3, #0
 800203a:	d02e      	beq.n	800209a <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x126>
	{
		used_budget_us += FinalRangeOverhead;
 800203c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800203e:	f203 2326 	addw	r3, r3, #550	@ 0x226
 8002042:	647b      	str	r3, [r7, #68]	@ 0x44
		// budget and the sum of all other timeouts within the sequence.
		// If there is no room for the final range timeout, then an error
		// will be set. Otherwise the remaining time will be applied to
		// the final range."

		if (used_budget_us > budget_us)
 8002044:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d901      	bls.n	8002050 <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0xdc>
		{
			// "Requested timeout too big."
			return false;
 800204c:	2300      	movs	r3, #0
 800204e:	e025      	b.n	800209c <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x128>
		}

		uint32_t final_range_timeout_us = budget_us - used_budget_us;
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	62fb      	str	r3, [r7, #44]	@ 0x2c
		// "For the final range timeout, the pre-range timeout
		//  must be added. To do this both final and pre-range
		//  timeouts must be expressed in macro periods MClks
		//  because they have different vcsel periods."

		uint16_t final_range_timeout_mclks = timeoutMicrosecondsToMclks(final_range_timeout_us, timeouts.final_range_vcsel_period_pclks);
 8002058:	89fb      	ldrh	r3, [r7, #14]
 800205a:	b2db      	uxtb	r3, r3
 800205c:	4619      	mov	r1, r3
 800205e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002060:	f7ff fb5a 	bl	8001718 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>
 8002064:	4603      	mov	r3, r0
 8002066:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

		if (enables.pre_range)
 800206a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800206e:	2b00      	cmp	r3, #0
 8002070:	d005      	beq.n	800207e <_ZN7VL53L0X26setMeasurementTimingBudgetEm+0x10a>
		{
			final_range_timeout_mclks += timeouts.pre_range_mclks;
 8002072:	8a7a      	ldrh	r2, [r7, #18]
 8002074:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002078:	4413      	add	r3, r2
 800207a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		}

		writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI, encodeTimeout(final_range_timeout_mclks));
 800207e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8002082:	4618      	mov	r0, r3
 8002084:	f7ff faf5 	bl	8001672 <_ZN7VL53L0X13encodeTimeoutEt>
 8002088:	4603      	mov	r3, r0
 800208a:	461a      	mov	r2, r3
 800208c:	2171      	movs	r1, #113	@ 0x71
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff fb90 	bl	80017b4 <_ZN7VL53L0X13writeReg16BitEht>

		// set_sequence_step_timeout() end

		g_measTimBudUs = budget_us; // store for internal reuse
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	683a      	ldr	r2, [r7, #0]
 8002098:	60da      	str	r2, [r3, #12]
	}

	return true;
 800209a:	2301      	movs	r3, #1
}
 800209c:	4618      	mov	r0, r3
 800209e:	3748      	adds	r7, #72	@ 0x48
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <_ZN7VL53L0X26getMeasurementTimingBudgetEv>:

uint32_t VL53L0X::getMeasurementTimingBudget(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08e      	sub	sp, #56	@ 0x38
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	SequenceStepEnables enables;
	SequenceStepTimeouts timeouts;

	// I have no clue why StartOverhead is "different". Kill me.
	uint16_t const StartOverhead     = 1910; // note that this is different than the value in set_
 80020ac:	f240 7376 	movw	r3, #1910	@ 0x776
 80020b0:	867b      	strh	r3, [r7, #50]	@ 0x32
	uint16_t const EndOverhead        = 960;
 80020b2:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80020b6:	863b      	strh	r3, [r7, #48]	@ 0x30
	uint16_t const MsrcOverhead       = 660;
 80020b8:	f44f 7325 	mov.w	r3, #660	@ 0x294
 80020bc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint16_t const TccOverhead        = 590;
 80020be:	f240 234e 	movw	r3, #590	@ 0x24e
 80020c2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	uint16_t const DssOverhead        = 690;
 80020c4:	f240 23b2 	movw	r3, #690	@ 0x2b2
 80020c8:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint16_t const PreRangeOverhead   = 660;
 80020ca:	f44f 7325 	mov.w	r3, #660	@ 0x294
 80020ce:	853b      	strh	r3, [r7, #40]	@ 0x28
	uint16_t const FinalRangeOverhead = 550;
 80020d0:	f240 2326 	movw	r3, #550	@ 0x226
 80020d4:	84fb      	strh	r3, [r7, #38]	@ 0x26

	// "Start and end overhead times always present"
	uint32_t budget_us = StartOverhead + EndOverhead;
 80020d6:	f640 3336 	movw	r3, #2870	@ 0xb36
 80020da:	637b      	str	r3, [r7, #52]	@ 0x34

	getSequenceStepEnables(&enables);
 80020dc:	f107 0320 	add.w	r3, r7, #32
 80020e0:	4619      	mov	r1, r3
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff f9c8 	bl	8001478 <_ZN7VL53L0X22getSequenceStepEnablesEP19SequenceStepEnables>
	getSequenceStepTimeouts(&enables, &timeouts);
 80020e8:	f107 0208 	add.w	r2, r7, #8
 80020ec:	f107 0320 	add.w	r3, r7, #32
 80020f0:	4619      	mov	r1, r3
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7ff f9f4 	bl	80014e0 <_ZN7VL53L0X23getSequenceStepTimeoutsEPK19SequenceStepEnablesP20SequenceStepTimeouts>

	if (enables.tcc)
 80020f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d005      	beq.n	800210c <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x68>
	{
	budget_us += (timeouts.msrc_dss_tcc_us + TccOverhead);
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002104:	4413      	add	r3, r2
 8002106:	f203 234e 	addw	r3, r3, #590	@ 0x24e
 800210a:	637b      	str	r3, [r7, #52]	@ 0x34
	}

	if (enables.dss)
 800210c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002110:	2b00      	cmp	r3, #0
 8002112:	d007      	beq.n	8002124 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x80>
	{
	budget_us += 2 * (timeouts.msrc_dss_tcc_us + DssOverhead);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	f203 23b2 	addw	r3, r3, #690	@ 0x2b2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800211e:	4413      	add	r3, r2
 8002120:	637b      	str	r3, [r7, #52]	@ 0x34
 8002122:	e009      	b.n	8002138 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x94>
	}
	else if (enables.msrc)
 8002124:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0x94>
	{
	budget_us += (timeouts.msrc_dss_tcc_us + MsrcOverhead);
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002130:	4413      	add	r3, r2
 8002132:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8002136:	637b      	str	r3, [r7, #52]	@ 0x34
	}

	if (enables.pre_range)
 8002138:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800213c:	2b00      	cmp	r3, #0
 800213e:	d005      	beq.n	800214c <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0xa8>
	{
	budget_us += (timeouts.pre_range_us + PreRangeOverhead);
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002144:	4413      	add	r3, r2
 8002146:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 800214a:	637b      	str	r3, [r7, #52]	@ 0x34
	}

	if (enables.final_range)
 800214c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <_ZN7VL53L0X26getMeasurementTimingBudgetEv+0xbc>
	{
	budget_us += (timeouts.final_range_us + FinalRangeOverhead);
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002158:	4413      	add	r3, r2
 800215a:	f203 2326 	addw	r3, r3, #550	@ 0x226
 800215e:	637b      	str	r3, [r7, #52]	@ 0x34
	}

	g_measTimBudUs = budget_us; // store for internal reuse
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002164:	60da      	str	r2, [r3, #12]
	return budget_us;
 8002166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002168:	4618      	mov	r0, r3
 800216a:	3738      	adds	r7, #56	@ 0x38
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh>:
// Valid values are (even numbers only):
//  pre:  12 to 18 (initialized default: 14)
//  final: 8 to 14 (initialized default: 10)
// based on VL53L0X_set_vcsel_pulse_period()
bool VL53L0X::setVcselPulsePeriod(vcselPeriodType type, uint8_t period_pclks)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08c      	sub	sp, #48	@ 0x30
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	460b      	mov	r3, r1
 800217a:	70fb      	strb	r3, [r7, #3]
 800217c:	4613      	mov	r3, r2
 800217e:	70bb      	strb	r3, [r7, #2]
	uint8_t vcsel_period_reg = encodeVcselPeriod(period_pclks);
 8002180:	78bb      	ldrb	r3, [r7, #2]
 8002182:	085b      	lsrs	r3, r3, #1
 8002184:	b2db      	uxtb	r3, r3
 8002186:	3b01      	subs	r3, #1
 8002188:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

	SequenceStepEnables enables;
	SequenceStepTimeouts timeouts;

	getSequenceStepEnables(&enables);
 800218c:	f107 0320 	add.w	r3, r7, #32
 8002190:	4619      	mov	r1, r3
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f7ff f970 	bl	8001478 <_ZN7VL53L0X22getSequenceStepEnablesEP19SequenceStepEnables>
	getSequenceStepTimeouts(&enables, &timeouts);
 8002198:	f107 0208 	add.w	r2, r7, #8
 800219c:	f107 0320 	add.w	r3, r7, #32
 80021a0:	4619      	mov	r1, r3
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff f99c 	bl	80014e0 <_ZN7VL53L0X23getSequenceStepTimeoutsEPK19SequenceStepEnablesP20SequenceStepTimeouts>
	//
	// For the MSRC timeout, the same applies - this timeout being
	// dependant on the pre-range vcsel period."


	if (type == VcselPeriodPreRange)
 80021a8:	78fb      	ldrb	r3, [r7, #3]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d164      	bne.n	8002278 <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh+0x108>
	{
	// "Set phase check limits"
	switch (period_pclks)
 80021ae:	78bb      	ldrb	r3, [r7, #2]
 80021b0:	3b0c      	subs	r3, #12
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d828      	bhi.n	8002208 <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh+0x98>
 80021b6:	a201      	add	r2, pc, #4	@ (adr r2, 80021bc <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh+0x4c>)
 80021b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021bc:	080021d9 	.word	0x080021d9
 80021c0:	08002209 	.word	0x08002209
 80021c4:	080021e5 	.word	0x080021e5
 80021c8:	08002209 	.word	0x08002209
 80021cc:	080021f1 	.word	0x080021f1
 80021d0:	08002209 	.word	0x08002209
 80021d4:	080021fd 	.word	0x080021fd
	{
	  case 12:
		  writeReg8Bit(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x18);
 80021d8:	2218      	movs	r2, #24
 80021da:	2157      	movs	r1, #87	@ 0x57
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff fac1 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		break;
 80021e2:	e013      	b.n	800220c <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh+0x9c>

	  case 14:
		  writeReg8Bit(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x30);
 80021e4:	2230      	movs	r2, #48	@ 0x30
 80021e6:	2157      	movs	r1, #87	@ 0x57
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7ff fabb 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		break;
 80021ee:	e00d      	b.n	800220c <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh+0x9c>

	  case 16:
		  writeReg8Bit(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x40);
 80021f0:	2240      	movs	r2, #64	@ 0x40
 80021f2:	2157      	movs	r1, #87	@ 0x57
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff fab5 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		break;
 80021fa:	e007      	b.n	800220c <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh+0x9c>

	  case 18:
		  writeReg8Bit(PRE_RANGE_CONFIG_VALID_PHASE_HIGH, 0x50);
 80021fc:	2250      	movs	r2, #80	@ 0x50
 80021fe:	2157      	movs	r1, #87	@ 0x57
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff faaf 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		break;
 8002206:	e001      	b.n	800220c <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh+0x9c>

	  default:
		// invalid period
		return false;
 8002208:	2300      	movs	r3, #0
 800220a:	e123      	b.n	8002454 <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh+0x2e4>
	}
	writeReg8Bit(PRE_RANGE_CONFIG_VALID_PHASE_LOW, 0x08);
 800220c:	2208      	movs	r2, #8
 800220e:	2156      	movs	r1, #86	@ 0x56
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f7ff faa7 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	// apply new VCSEL period
	writeReg8Bit(PRE_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 8002216:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800221a:	461a      	mov	r2, r3
 800221c:	2150      	movs	r1, #80	@ 0x50
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7ff faa0 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	// set_sequence_step_timeout() begin
	// (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE)

	uint16_t new_pre_range_timeout_mclks =
	  timeoutMicrosecondsToMclks(timeouts.pre_range_us, period_pclks);
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	78ba      	ldrb	r2, [r7, #2]
 8002228:	4611      	mov	r1, r2
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fa74 	bl	8001718 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>
 8002230:	4603      	mov	r3, r0
 8002232:	857b      	strh	r3, [r7, #42]	@ 0x2a

	writeReg16Bit(PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 8002234:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002236:	4618      	mov	r0, r3
 8002238:	f7ff fa1b 	bl	8001672 <_ZN7VL53L0X13encodeTimeoutEt>
 800223c:	4603      	mov	r3, r0
 800223e:	461a      	mov	r2, r3
 8002240:	2151      	movs	r1, #81	@ 0x51
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff fab6 	bl	80017b4 <_ZN7VL53L0X13writeReg16BitEht>

	// set_sequence_step_timeout() begin
	// (SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)

	uint16_t new_msrc_timeout_mclks =
	  timeoutMicrosecondsToMclks(timeouts.msrc_dss_tcc_us, period_pclks);
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	78ba      	ldrb	r2, [r7, #2]
 800224c:	4611      	mov	r1, r2
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fa62 	bl	8001718 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>
 8002254:	4603      	mov	r3, r0
 8002256:	853b      	strh	r3, [r7, #40]	@ 0x28

	writeReg8Bit(MSRC_CONFIG_TIMEOUT_MACROP,
 8002258:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800225a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800225e:	d804      	bhi.n	800226a <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh+0xfa>
	  (new_msrc_timeout_mclks > 256) ? 255 : (new_msrc_timeout_mclks - 1));
 8002260:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002262:	b2db      	uxtb	r3, r3
	writeReg8Bit(MSRC_CONFIG_TIMEOUT_MACROP,
 8002264:	3b01      	subs	r3, #1
 8002266:	b2db      	uxtb	r3, r3
 8002268:	e000      	b.n	800226c <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh+0xfc>
 800226a:	23ff      	movs	r3, #255	@ 0xff
 800226c:	461a      	mov	r2, r3
 800226e:	2146      	movs	r1, #70	@ 0x46
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff fa77 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
 8002276:	e0cf      	b.n	8002418 <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh+0x2a8>

	// set_sequence_step_timeout() end
	}
	else if (type == VcselPeriodFinalRange)
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	2b01      	cmp	r3, #1
 800227c:	f040 80ca 	bne.w	8002414 <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh+0x2a4>
	{
	switch (period_pclks)
 8002280:	78bb      	ldrb	r3, [r7, #2]
 8002282:	3b08      	subs	r3, #8
 8002284:	2b06      	cmp	r3, #6
 8002286:	f200 80a1 	bhi.w	80023cc <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh+0x25c>
 800228a:	a201      	add	r2, pc, #4	@ (adr r2, 8002290 <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh+0x120>)
 800228c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002290:	080022ad 	.word	0x080022ad
 8002294:	080023cd 	.word	0x080023cd
 8002298:	080022f5 	.word	0x080022f5
 800229c:	080023cd 	.word	0x080023cd
 80022a0:	0800233d 	.word	0x0800233d
 80022a4:	080023cd 	.word	0x080023cd
 80022a8:	08002385 	.word	0x08002385
	{
	  case 8:
		  writeReg8Bit(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x10);
 80022ac:	2210      	movs	r2, #16
 80022ae:	2148      	movs	r1, #72	@ 0x48
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff fa57 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		  writeReg8Bit(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80022b6:	2208      	movs	r2, #8
 80022b8:	2147      	movs	r1, #71	@ 0x47
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff fa52 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		  writeReg8Bit(GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
 80022c0:	2202      	movs	r2, #2
 80022c2:	2132      	movs	r1, #50	@ 0x32
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff fa4d 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		  writeReg8Bit(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);
 80022ca:	220c      	movs	r2, #12
 80022cc:	2130      	movs	r1, #48	@ 0x30
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7ff fa48 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		  writeReg8Bit(0xFF, 0x01);
 80022d4:	2201      	movs	r2, #1
 80022d6:	21ff      	movs	r1, #255	@ 0xff
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7ff fa43 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		  writeReg8Bit(ALGO_PHASECAL_LIM, 0x30);
 80022de:	2230      	movs	r2, #48	@ 0x30
 80022e0:	2130      	movs	r1, #48	@ 0x30
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff fa3e 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		  writeReg8Bit(0xFF, 0x00);
 80022e8:	2200      	movs	r2, #0
 80022ea:	21ff      	movs	r1, #255	@ 0xff
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f7ff fa39 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		break;
 80022f2:	e06d      	b.n	80023d0 <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh+0x260>

	  case 10:
		  writeReg8Bit(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x28);
 80022f4:	2228      	movs	r2, #40	@ 0x28
 80022f6:	2148      	movs	r1, #72	@ 0x48
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff fa33 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		  writeReg8Bit(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 80022fe:	2208      	movs	r2, #8
 8002300:	2147      	movs	r1, #71	@ 0x47
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff fa2e 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		  writeReg8Bit(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8002308:	2203      	movs	r2, #3
 800230a:	2132      	movs	r1, #50	@ 0x32
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f7ff fa29 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		  writeReg8Bit(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);
 8002312:	2209      	movs	r2, #9
 8002314:	2130      	movs	r1, #48	@ 0x30
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff fa24 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		  writeReg8Bit(0xFF, 0x01);
 800231c:	2201      	movs	r2, #1
 800231e:	21ff      	movs	r1, #255	@ 0xff
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f7ff fa1f 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		  writeReg8Bit(ALGO_PHASECAL_LIM, 0x20);
 8002326:	2220      	movs	r2, #32
 8002328:	2130      	movs	r1, #48	@ 0x30
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff fa1a 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		  writeReg8Bit(0xFF, 0x00);
 8002330:	2200      	movs	r2, #0
 8002332:	21ff      	movs	r1, #255	@ 0xff
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff fa15 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		break;
 800233a:	e049      	b.n	80023d0 <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh+0x260>

	  case 12:
		  writeReg8Bit(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x38);
 800233c:	2238      	movs	r2, #56	@ 0x38
 800233e:	2148      	movs	r1, #72	@ 0x48
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff fa0f 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		  writeReg8Bit(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 8002346:	2208      	movs	r2, #8
 8002348:	2147      	movs	r1, #71	@ 0x47
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff fa0a 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		  writeReg8Bit(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8002350:	2203      	movs	r2, #3
 8002352:	2132      	movs	r1, #50	@ 0x32
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f7ff fa05 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		  writeReg8Bit(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);
 800235a:	2208      	movs	r2, #8
 800235c:	2130      	movs	r1, #48	@ 0x30
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff fa00 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		  writeReg8Bit(0xFF, 0x01);
 8002364:	2201      	movs	r2, #1
 8002366:	21ff      	movs	r1, #255	@ 0xff
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff f9fb 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		  writeReg8Bit(ALGO_PHASECAL_LIM, 0x20);
 800236e:	2220      	movs	r2, #32
 8002370:	2130      	movs	r1, #48	@ 0x30
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff f9f6 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		  writeReg8Bit(0xFF, 0x00);
 8002378:	2200      	movs	r2, #0
 800237a:	21ff      	movs	r1, #255	@ 0xff
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff f9f1 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		break;
 8002382:	e025      	b.n	80023d0 <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh+0x260>

	  case 14:
		  writeReg8Bit(FINAL_RANGE_CONFIG_VALID_PHASE_HIGH, 0x48);
 8002384:	2248      	movs	r2, #72	@ 0x48
 8002386:	2148      	movs	r1, #72	@ 0x48
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff f9eb 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		  writeReg8Bit(FINAL_RANGE_CONFIG_VALID_PHASE_LOW,  0x08);
 800238e:	2208      	movs	r2, #8
 8002390:	2147      	movs	r1, #71	@ 0x47
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff f9e6 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		  writeReg8Bit(GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
 8002398:	2203      	movs	r2, #3
 800239a:	2132      	movs	r1, #50	@ 0x32
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff f9e1 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		  writeReg8Bit(ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);
 80023a2:	2207      	movs	r2, #7
 80023a4:	2130      	movs	r1, #48	@ 0x30
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f7ff f9dc 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		  writeReg8Bit(0xFF, 0x01);
 80023ac:	2201      	movs	r2, #1
 80023ae:	21ff      	movs	r1, #255	@ 0xff
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff f9d7 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		  writeReg8Bit(ALGO_PHASECAL_LIM, 0x20);
 80023b6:	2220      	movs	r2, #32
 80023b8:	2130      	movs	r1, #48	@ 0x30
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7ff f9d2 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		  writeReg8Bit(0xFF, 0x00);
 80023c0:	2200      	movs	r2, #0
 80023c2:	21ff      	movs	r1, #255	@ 0xff
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff f9cd 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
		break;
 80023ca:	e001      	b.n	80023d0 <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh+0x260>

	  default:
		// invalid period
		return false;
 80023cc:	2300      	movs	r3, #0
 80023ce:	e041      	b.n	8002454 <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh+0x2e4>
	}

	// apply new VCSEL period
	writeReg8Bit(FINAL_RANGE_CONFIG_VCSEL_PERIOD, vcsel_period_reg);
 80023d0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80023d4:	461a      	mov	r2, r3
 80023d6:	2170      	movs	r1, #112	@ 0x70
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff f9c3 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	//  must be added. To do this both final and pre-range
	//  timeouts must be expressed in macro periods MClks
	//  because they have different vcsel periods."

	uint16_t new_final_range_timeout_mclks =
	  timeoutMicrosecondsToMclks(timeouts.final_range_us, period_pclks);
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	78ba      	ldrb	r2, [r7, #2]
 80023e2:	4611      	mov	r1, r2
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff f997 	bl	8001718 <_ZN7VL53L0X26timeoutMicrosecondsToMclksEmh>
 80023ea:	4603      	mov	r3, r0
 80023ec:	85fb      	strh	r3, [r7, #46]	@ 0x2e

	if (enables.pre_range)
 80023ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh+0x28e>
	{
	  new_final_range_timeout_mclks += timeouts.pre_range_mclks;
 80023f6:	89fa      	ldrh	r2, [r7, #14]
 80023f8:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80023fa:	4413      	add	r3, r2
 80023fc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	}

	writeReg16Bit(FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
 80023fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff f936 	bl	8001672 <_ZN7VL53L0X13encodeTimeoutEt>
 8002406:	4603      	mov	r3, r0
 8002408:	461a      	mov	r2, r3
 800240a:	2171      	movs	r1, #113	@ 0x71
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f7ff f9d1 	bl	80017b4 <_ZN7VL53L0X13writeReg16BitEht>
 8002412:	e001      	b.n	8002418 <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh+0x2a8>
	// set_sequence_step_timeout end
	}
	else
	{
	// invalid type
	return false;
 8002414:	2300      	movs	r3, #0
 8002416:	e01d      	b.n	8002454 <_ZN7VL53L0X19setVcselPulsePeriodE15vcselPeriodTypeh+0x2e4>
	}

	// "Finally, the timing budget must be re-applied"

	setMeasurementTimingBudget(g_measTimBudUs);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	4619      	mov	r1, r3
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff fda8 	bl	8001f74 <_ZN7VL53L0X26setMeasurementTimingBudgetEm>

	// "Perform the phase calibration. This is needed after changing on vcsel period."
	// VL53L0X_perform_phase_calibration() begin

	uint8_t sequence_config = readReg8Bit(SYSTEM_SEQUENCE_CONFIG);
 8002424:	2101      	movs	r1, #1
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff f9ec 	bl	8001804 <_ZN7VL53L0X11readReg8BitEh>
 800242c:	4603      	mov	r3, r0
 800242e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	writeReg8Bit(SYSTEM_SEQUENCE_CONFIG, 0x02);
 8002432:	2202      	movs	r2, #2
 8002434:	2101      	movs	r1, #1
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff f994 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	performSingleRefCalibration(0x0);
 800243c:	2100      	movs	r1, #0
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff f8b9 	bl	80015b6 <_ZN7VL53L0X27performSingleRefCalibrationEh>
	writeReg8Bit(SYSTEM_SEQUENCE_CONFIG, sequence_config);
 8002444:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002448:	461a      	mov	r2, r3
 800244a:	2101      	movs	r1, #1
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f7ff f989 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	// VL53L0X_perform_phase_calibration() end

	return true;
 8002452:	2301      	movs	r3, #1
}
 8002454:	4618      	mov	r0, r3
 8002456:	3730      	adds	r7, #48	@ 0x30
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <_ZN7VL53L0X19getVcselPulsePeriodE15vcselPeriodType>:

// Get the VCSEL pulse period in PCLKs for the given period type.
// based on VL53L0X_get_vcsel_pulse_period()
uint8_t VL53L0X::getVcselPulsePeriod(vcselPeriodType type)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	70fb      	strb	r3, [r7, #3]
	if (type == VcselPeriodPreRange)
 8002468:	78fb      	ldrb	r3, [r7, #3]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <_ZN7VL53L0X19getVcselPulsePeriodE15vcselPeriodType+0x26>
	{
		return decodeVcselPeriod(readReg8Bit(PRE_RANGE_CONFIG_VCSEL_PERIOD));
 800246e:	2150      	movs	r1, #80	@ 0x50
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff f9c7 	bl	8001804 <_ZN7VL53L0X11readReg8BitEh>
 8002476:	4603      	mov	r3, r0
 8002478:	3301      	adds	r3, #1
 800247a:	b2db      	uxtb	r3, r3
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	b2db      	uxtb	r3, r3
 8002480:	e00d      	b.n	800249e <_ZN7VL53L0X19getVcselPulsePeriodE15vcselPeriodType+0x42>
	}
	else if (type == VcselPeriodFinalRange)
 8002482:	78fb      	ldrb	r3, [r7, #3]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d109      	bne.n	800249c <_ZN7VL53L0X19getVcselPulsePeriodE15vcselPeriodType+0x40>
	{
		return decodeVcselPeriod(readReg8Bit(FINAL_RANGE_CONFIG_VCSEL_PERIOD));
 8002488:	2170      	movs	r1, #112	@ 0x70
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff f9ba 	bl	8001804 <_ZN7VL53L0X11readReg8BitEh>
 8002490:	4603      	mov	r3, r0
 8002492:	3301      	adds	r3, #1
 8002494:	b2db      	uxtb	r3, r3
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	b2db      	uxtb	r3, r3
 800249a:	e000      	b.n	800249e <_ZN7VL53L0X19getVcselPulsePeriodE15vcselPeriodType+0x42>
	}
	else
	{
		return 255;
 800249c:	23ff      	movs	r3, #255	@ 0xff
	}
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <_ZN7VL53L0X30readRangeContinuousMillimetersEP18statInfo_t_VL53L0X>:
// Returns a range reading in millimeters when continuous mode is active
// (readRangeSingleMillimeters() also calls this function after starting a
// single-shot range measurement)
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t VL53L0X::readRangeContinuousMillimeters(statInfo_t_VL53L0X *extraStats)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b086      	sub	sp, #24
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	6039      	str	r1, [r7, #0]
	uint8_t tempBuffer[12];
	uint16_t temp;
	startTimeout();
 80024b0:	f003 ff9a 	bl	80063e8 <HAL_GetTick>
 80024b4:	4603      	mov	r3, r0
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	80da      	strh	r2, [r3, #6]
	while ((readReg8Bit(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80024bc:	e01a      	b.n	80024f4 <_ZN7VL53L0X30readRangeContinuousMillimetersEP18statInfo_t_VL53L0X+0x4e>
	{
		if (checkTimeoutExpired())
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	885b      	ldrh	r3, [r3, #2]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00d      	beq.n	80024e2 <_ZN7VL53L0X30readRangeContinuousMillimetersEP18statInfo_t_VL53L0X+0x3c>
 80024c6:	f003 ff8f 	bl	80063e8 <HAL_GetTick>
 80024ca:	4603      	mov	r3, r0
 80024cc:	b29b      	uxth	r3, r3
 80024ce:	461a      	mov	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	88db      	ldrh	r3, [r3, #6]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	8852      	ldrh	r2, [r2, #2]
 80024da:	4293      	cmp	r3, r2
 80024dc:	dd01      	ble.n	80024e2 <_ZN7VL53L0X30readRangeContinuousMillimetersEP18statInfo_t_VL53L0X+0x3c>
 80024de:	2301      	movs	r3, #1
 80024e0:	e000      	b.n	80024e4 <_ZN7VL53L0X30readRangeContinuousMillimetersEP18statInfo_t_VL53L0X+0x3e>
 80024e2:	2300      	movs	r3, #0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <_ZN7VL53L0X30readRangeContinuousMillimetersEP18statInfo_t_VL53L0X+0x4e>
		{
			g_isTimeout = true;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	711a      	strb	r2, [r3, #4]
			return 65535;
 80024ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80024f2:	e056      	b.n	80025a2 <_ZN7VL53L0X30readRangeContinuousMillimetersEP18statInfo_t_VL53L0X+0xfc>
	while ((readReg8Bit(RESULT_INTERRUPT_STATUS) & 0x07) == 0)
 80024f4:	2113      	movs	r1, #19
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff f984 	bl	8001804 <_ZN7VL53L0X11readReg8BitEh>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	2b00      	cmp	r3, #0
 8002504:	bf0c      	ite	eq
 8002506:	2301      	moveq	r3, #1
 8002508:	2300      	movne	r3, #0
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1d6      	bne.n	80024be <_ZN7VL53L0X30readRangeContinuousMillimetersEP18statInfo_t_VL53L0X+0x18>
		}
	}

	if(extraStats == 0)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d106      	bne.n	8002524 <_ZN7VL53L0X30readRangeContinuousMillimetersEP18statInfo_t_VL53L0X+0x7e>
	{
		// assumptions: Linearity Corrective Gain is 1000 (default);
		// fractional ranging is not enabled
		temp = readReg16Bit(RESULT_RANGE_STATUS + 10);
 8002516:	211e      	movs	r1, #30
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f7ff f99d 	bl	8001858 <_ZN7VL53L0X12readReg16BitEh>
 800251e:	4603      	mov	r3, r0
 8002520:	82fb      	strh	r3, [r7, #22]
 8002522:	e038      	b.n	8002596 <_ZN7VL53L0X30readRangeContinuousMillimetersEP18statInfo_t_VL53L0X+0xf0>
		//   4: 0 ?
		//   5: ???
		// 6,7: signal count rate [mcps], uint16_t, fixpoint9.7
		// 9,8: AmbientRateRtnMegaCps  [mcps], uint16_t, fixpoimt9.7
		// A,B: uncorrected distance [mm], uint16_t
		readMulti(0x14, tempBuffer, 12);
 8002524:	f107 0208 	add.w	r2, r7, #8
 8002528:	230c      	movs	r3, #12
 800252a:	2114      	movs	r1, #20
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7ff f9eb 	bl	8001908 <_ZN7VL53L0X9readMultiEhPhh>
		extraStats->rangeStatus =  tempBuffer[0x00]>>3;
 8002532:	7a3b      	ldrb	r3, [r7, #8]
 8002534:	08db      	lsrs	r3, r3, #3
 8002536:	b2da      	uxtb	r2, r3
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	721a      	strb	r2, [r3, #8]
		extraStats->spadCnt     = (tempBuffer[0x02]<<8) | tempBuffer[0x03];
 800253c:	7abb      	ldrb	r3, [r7, #10]
 800253e:	b21b      	sxth	r3, r3
 8002540:	021b      	lsls	r3, r3, #8
 8002542:	b21a      	sxth	r2, r3
 8002544:	7afb      	ldrb	r3, [r7, #11]
 8002546:	b21b      	sxth	r3, r3
 8002548:	4313      	orrs	r3, r2
 800254a:	b21b      	sxth	r3, r3
 800254c:	b29a      	uxth	r2, r3
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	80da      	strh	r2, [r3, #6]
		extraStats->signalCnt   = (tempBuffer[0x06]<<8) | tempBuffer[0x07];
 8002552:	7bbb      	ldrb	r3, [r7, #14]
 8002554:	b21b      	sxth	r3, r3
 8002556:	021b      	lsls	r3, r3, #8
 8002558:	b21a      	sxth	r2, r3
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	b21b      	sxth	r3, r3
 800255e:	4313      	orrs	r3, r2
 8002560:	b21b      	sxth	r3, r3
 8002562:	b29a      	uxth	r2, r3
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	805a      	strh	r2, [r3, #2]
		extraStats->ambientCnt  = (tempBuffer[0x08]<<8) | tempBuffer[0x09];
 8002568:	7c3b      	ldrb	r3, [r7, #16]
 800256a:	b21b      	sxth	r3, r3
 800256c:	021b      	lsls	r3, r3, #8
 800256e:	b21a      	sxth	r2, r3
 8002570:	7c7b      	ldrb	r3, [r7, #17]
 8002572:	b21b      	sxth	r3, r3
 8002574:	4313      	orrs	r3, r2
 8002576:	b21b      	sxth	r3, r3
 8002578:	b29a      	uxth	r2, r3
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	809a      	strh	r2, [r3, #4]
		temp                    = (tempBuffer[0x0A]<<8) | tempBuffer[0x0B];
 800257e:	7cbb      	ldrb	r3, [r7, #18]
 8002580:	b21b      	sxth	r3, r3
 8002582:	021b      	lsls	r3, r3, #8
 8002584:	b21a      	sxth	r2, r3
 8002586:	7cfb      	ldrb	r3, [r7, #19]
 8002588:	b21b      	sxth	r3, r3
 800258a:	4313      	orrs	r3, r2
 800258c:	b21b      	sxth	r3, r3
 800258e:	82fb      	strh	r3, [r7, #22]
		extraStats->rawDistance = temp;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	8afa      	ldrh	r2, [r7, #22]
 8002594:	801a      	strh	r2, [r3, #0]
	}

	writeReg8Bit(SYSTEM_INTERRUPT_CLEAR, 0x01);
 8002596:	2201      	movs	r2, #1
 8002598:	210b      	movs	r1, #11
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff f8e2 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	return temp;
 80025a0:	8afb      	ldrh	r3, [r7, #22]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3718      	adds	r7, #24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <_ZN7VL53L0X26readRangeSingleMillimetersEP18statInfo_t_VL53L0X>:
// Performs a single-shot range measurement and returns the reading in
// millimeters
// based on VL53L0X_PerformSingleRangingMeasurement()
// extraStats provides additional info for this measurment. Set to 0 if not needed.
uint16_t VL53L0X::readRangeSingleMillimeters(statInfo_t_VL53L0X *extraStats)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	b082      	sub	sp, #8
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
 80025b2:	6039      	str	r1, [r7, #0]
	writeReg8Bit(0x80, 0x01);
 80025b4:	2201      	movs	r2, #1
 80025b6:	2180      	movs	r1, #128	@ 0x80
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f7ff f8d3 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0xFF, 0x01);
 80025be:	2201      	movs	r2, #1
 80025c0:	21ff      	movs	r1, #255	@ 0xff
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f7ff f8ce 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x00, 0x00);
 80025c8:	2200      	movs	r2, #0
 80025ca:	2100      	movs	r1, #0
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff f8c9 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x91, g_stopVariable);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	7a1b      	ldrb	r3, [r3, #8]
 80025d6:	461a      	mov	r2, r3
 80025d8:	2191      	movs	r1, #145	@ 0x91
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff f8c2 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x00, 0x01);
 80025e0:	2201      	movs	r2, #1
 80025e2:	2100      	movs	r1, #0
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff f8bd 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0xFF, 0x00);
 80025ea:	2200      	movs	r2, #0
 80025ec:	21ff      	movs	r1, #255	@ 0xff
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff f8b8 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(0x80, 0x00);
 80025f4:	2200      	movs	r2, #0
 80025f6:	2180      	movs	r1, #128	@ 0x80
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f7ff f8b3 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>
	writeReg8Bit(SYSRANGE_START, 0x01);
 80025fe:	2201      	movs	r2, #1
 8002600:	2100      	movs	r1, #0
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff f8ae 	bl	8001764 <_ZN7VL53L0X12writeReg8BitEhh>

	// "Wait until start bit has been cleared"

	startTimeout();
 8002608:	f003 feee 	bl	80063e8 <HAL_GetTick>
 800260c:	4603      	mov	r3, r0
 800260e:	b29a      	uxth	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	80da      	strh	r2, [r3, #6]

	while (readReg8Bit(SYSRANGE_START) & 0x01)
 8002614:	e01a      	b.n	800264c <_ZN7VL53L0X26readRangeSingleMillimetersEP18statInfo_t_VL53L0X+0xa2>
	{
		if (checkTimeoutExpired())
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	885b      	ldrh	r3, [r3, #2]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00d      	beq.n	800263a <_ZN7VL53L0X26readRangeSingleMillimetersEP18statInfo_t_VL53L0X+0x90>
 800261e:	f003 fee3 	bl	80063e8 <HAL_GetTick>
 8002622:	4603      	mov	r3, r0
 8002624:	b29b      	uxth	r3, r3
 8002626:	461a      	mov	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	88db      	ldrh	r3, [r3, #6]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	8852      	ldrh	r2, [r2, #2]
 8002632:	4293      	cmp	r3, r2
 8002634:	dd01      	ble.n	800263a <_ZN7VL53L0X26readRangeSingleMillimetersEP18statInfo_t_VL53L0X+0x90>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <_ZN7VL53L0X26readRangeSingleMillimetersEP18statInfo_t_VL53L0X+0x92>
 800263a:	2300      	movs	r3, #0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d005      	beq.n	800264c <_ZN7VL53L0X26readRangeSingleMillimetersEP18statInfo_t_VL53L0X+0xa2>
		{
			g_isTimeout = true;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2201      	movs	r2, #1
 8002644:	711a      	strb	r2, [r3, #4]
			return 65535;
 8002646:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800264a:	e013      	b.n	8002674 <_ZN7VL53L0X26readRangeSingleMillimetersEP18statInfo_t_VL53L0X+0xca>
	while (readReg8Bit(SYSRANGE_START) & 0x01)
 800264c:	2100      	movs	r1, #0
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff f8d8 	bl	8001804 <_ZN7VL53L0X11readReg8BitEh>
 8002654:	4603      	mov	r3, r0
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	bf14      	ite	ne
 800265e:	2301      	movne	r3, #1
 8002660:	2300      	moveq	r3, #0
 8002662:	b2db      	uxtb	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1d6      	bne.n	8002616 <_ZN7VL53L0X26readRangeSingleMillimetersEP18statInfo_t_VL53L0X+0x6c>
		}
	}

	return readRangeContinuousMillimeters( extraStats );
 8002668:	6839      	ldr	r1, [r7, #0]
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff ff1b 	bl	80024a6 <_ZN7VL53L0X30readRangeContinuousMillimetersEP18statInfo_t_VL53L0X>
 8002670:	4603      	mov	r3, r0
 8002672:	bf00      	nop
}
 8002674:	4618      	mov	r0, r3
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <_ZN9WaveShareC1EP19__SPI_HandleTypeDef>:
#include "string.h"
#include "../Inc/WSFont.h"
#include "../../Inc/main.h"


WaveShare::WaveShare(SPI_HandleTypeDef *SPILINE)
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
{
	memcpy(&WaveShare_I2C_Handler, SPILINE, sizeof(*SPILINE));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2288      	movs	r2, #136	@ 0x88
 800268a:	6839      	ldr	r1, [r7, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f008 fd87 	bl	800b1a0 <memcpy>
	CurrentDisplayedScreen = BootScreen;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
	this -> initDisplay();
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f87e 	bl	800279c <_ZN9WaveShare11initDisplayEv>
}
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <_ZN9WaveShare11sendCommandEh>:


void WaveShare::sendCommand(uint8_t cmd)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(SPINCS_GPIO_Port, SPINCS_Pin, GPIO_PIN_RESET);
 80026b8:	2200      	movs	r2, #0
 80026ba:	2120      	movs	r1, #32
 80026bc:	480b      	ldr	r0, [pc, #44]	@ (80026ec <_ZN9WaveShare11sendCommandEh+0x40>)
 80026be:	f004 f9f3 	bl	8006aa8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DatCmd_GPIO_Port, DatCmd_Pin, GPIO_PIN_RESET);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2108      	movs	r1, #8
 80026c6:	4809      	ldr	r0, [pc, #36]	@ (80026ec <_ZN9WaveShare11sendCommandEh+0x40>)
 80026c8:	f004 f9ee 	bl	8006aa8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&WaveShare_I2C_Handler, &cmd, sizeof(cmd), 100);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	1cf9      	adds	r1, r7, #3
 80026d0:	2364      	movs	r3, #100	@ 0x64
 80026d2:	2201      	movs	r2, #1
 80026d4:	f007 fbac 	bl	8009e30 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPINCS_GPIO_Port, SPINCS_Pin, GPIO_PIN_SET);
 80026d8:	2201      	movs	r2, #1
 80026da:	2120      	movs	r1, #32
 80026dc:	4803      	ldr	r0, [pc, #12]	@ (80026ec <_ZN9WaveShare11sendCommandEh+0x40>)
 80026de:	f004 f9e3 	bl	8006aa8 <HAL_GPIO_WritePin>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	58021400 	.word	0x58021400

080026f0 <_ZN9WaveShare13sendData_byteEh>:


void WaveShare::sendData_byte(uint8_t data)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	460b      	mov	r3, r1
 80026fa:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(SPINCS_GPIO_Port, SPINCS_Pin, GPIO_PIN_RESET);
 80026fc:	2200      	movs	r2, #0
 80026fe:	2120      	movs	r1, #32
 8002700:	4808      	ldr	r0, [pc, #32]	@ (8002724 <_ZN9WaveShare13sendData_byteEh+0x34>)
 8002702:	f004 f9d1 	bl	8006aa8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(DatCmd_GPIO_Port, DatCmd_Pin, GPIO_PIN_SET);
 8002706:	2201      	movs	r2, #1
 8002708:	2108      	movs	r1, #8
 800270a:	4806      	ldr	r0, [pc, #24]	@ (8002724 <_ZN9WaveShare13sendData_byteEh+0x34>)
 800270c:	f004 f9cc 	bl	8006aa8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&WaveShare_I2C_Handler, &data, sizeof(data), SPI_TIMEOUT);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	1cf9      	adds	r1, r7, #3
 8002714:	2364      	movs	r3, #100	@ 0x64
 8002716:	2201      	movs	r2, #1
 8002718:	f007 fb8a 	bl	8009e30 <HAL_SPI_Transmit>
	// The code works without me setting the NSS pin back high, and at this point I'm too afraid to touch it...
}
 800271c:	bf00      	nop
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	58021400 	.word	0x58021400

08002728 <_ZN9WaveShare13sendData_wordEt>:


void WaveShare::sendData_word(uint16_t data)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	460b      	mov	r3, r1
 8002732:	807b      	strh	r3, [r7, #2]
	word Data;
	Data.fullWord = data;
 8002734:	887b      	ldrh	r3, [r7, #2]
 8002736:	81bb      	strh	r3, [r7, #12]

	HAL_GPIO_WritePin(DatCmd_GPIO_Port, DatCmd_Pin, GPIO_PIN_SET);
 8002738:	2201      	movs	r2, #1
 800273a:	2108      	movs	r1, #8
 800273c:	4809      	ldr	r0, [pc, #36]	@ (8002764 <_ZN9WaveShare13sendData_wordEt+0x3c>)
 800273e:	f004 f9b3 	bl	8006aa8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(SPINCS_GPIO_Port, SPINCS_Pin, GPIO_PIN_RESET);
 8002742:	2200      	movs	r2, #0
 8002744:	2120      	movs	r1, #32
 8002746:	4807      	ldr	r0, [pc, #28]	@ (8002764 <_ZN9WaveShare13sendData_wordEt+0x3c>)
 8002748:	f004 f9ae 	bl	8006aa8 <HAL_GPIO_WritePin>

	// This might be a problem (endianness/pointer bullshit)
	HAL_SPI_Transmit(&WaveShare_I2C_Handler, Data.bytes, sizeof(Data.bytes), SPI_TIMEOUT);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f107 010c 	add.w	r1, r7, #12
 8002752:	2364      	movs	r3, #100	@ 0x64
 8002754:	2202      	movs	r2, #2
 8002756:	f007 fb6b 	bl	8009e30 <HAL_SPI_Transmit>
}
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	58021400 	.word	0x58021400

08002768 <_ZN9WaveShare12resetDisplayEv>:


void WaveShare::resetDisplay()
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b082      	sub	sp, #8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(WSRST_GPIO_Port, WSRST_Pin, GPIO_PIN_RESET);
 8002770:	2200      	movs	r2, #0
 8002772:	2110      	movs	r1, #16
 8002774:	4808      	ldr	r0, [pc, #32]	@ (8002798 <_ZN9WaveShare12resetDisplayEv+0x30>)
 8002776:	f004 f997 	bl	8006aa8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800277a:	2064      	movs	r0, #100	@ 0x64
 800277c:	f003 fe40 	bl	8006400 <HAL_Delay>
	HAL_GPIO_WritePin(WSRST_GPIO_Port, WSRST_Pin, GPIO_PIN_SET);
 8002780:	2201      	movs	r2, #1
 8002782:	2110      	movs	r1, #16
 8002784:	4804      	ldr	r0, [pc, #16]	@ (8002798 <_ZN9WaveShare12resetDisplayEv+0x30>)
 8002786:	f004 f98f 	bl	8006aa8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800278a:	2064      	movs	r0, #100	@ 0x64
 800278c:	f003 fe38 	bl	8006400 <HAL_Delay>
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	58021400 	.word	0x58021400

0800279c <_ZN9WaveShare11initDisplayEv>:


void WaveShare::initDisplay()
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	resetDisplay();
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff ffdf 	bl	8002768 <_ZN9WaveShare12resetDisplayEv>

	// Initial startup
	sendCommand(0xB1);
 80027aa:	21b1      	movs	r1, #177	@ 0xb1
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff ff7d 	bl	80026ac <_ZN9WaveShare11sendCommandEh>
	sendData_byte(0x01);
 80027b2:	2101      	movs	r1, #1
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f7ff ff9b 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x2C);
 80027ba:	212c      	movs	r1, #44	@ 0x2c
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff ff97 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x2D);
 80027c2:	212d      	movs	r1, #45	@ 0x2d
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f7ff ff93 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>

	sendCommand(0xB2);
 80027ca:	21b2      	movs	r1, #178	@ 0xb2
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f7ff ff6d 	bl	80026ac <_ZN9WaveShare11sendCommandEh>
	sendData_byte(0x01);
 80027d2:	2101      	movs	r1, #1
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f7ff ff8b 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x2C);
 80027da:	212c      	movs	r1, #44	@ 0x2c
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff ff87 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x2D);
 80027e2:	212d      	movs	r1, #45	@ 0x2d
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff ff83 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>

	sendCommand(0xB3);
 80027ea:	21b3      	movs	r1, #179	@ 0xb3
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff ff5d 	bl	80026ac <_ZN9WaveShare11sendCommandEh>
	sendData_byte(0x01);
 80027f2:	2101      	movs	r1, #1
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff ff7b 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x2C);
 80027fa:	212c      	movs	r1, #44	@ 0x2c
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7ff ff77 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x2D);
 8002802:	212d      	movs	r1, #45	@ 0x2d
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff ff73 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x01);
 800280a:	2101      	movs	r1, #1
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff6f 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x2C);
 8002812:	212c      	movs	r1, #44	@ 0x2c
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff ff6b 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x2D);
 800281a:	212d      	movs	r1, #45	@ 0x2d
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f7ff ff67 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>

	sendCommand(0xB4); //Column inversion
 8002822:	21b4      	movs	r1, #180	@ 0xb4
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f7ff ff41 	bl	80026ac <_ZN9WaveShare11sendCommandEh>
	sendData_byte(0x07);
 800282a:	2107      	movs	r1, #7
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff ff5f 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>

	// Power
	sendCommand(0xC0);
 8002832:	21c0      	movs	r1, #192	@ 0xc0
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff ff39 	bl	80026ac <_ZN9WaveShare11sendCommandEh>
	sendData_byte(0xA2);
 800283a:	21a2      	movs	r1, #162	@ 0xa2
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f7ff ff57 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x02);
 8002842:	2102      	movs	r1, #2
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f7ff ff53 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x84);
 800284a:	2184      	movs	r1, #132	@ 0x84
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff ff4f 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendCommand(0xC1);
 8002852:	21c1      	movs	r1, #193	@ 0xc1
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f7ff ff29 	bl	80026ac <_ZN9WaveShare11sendCommandEh>
	sendData_byte(0xC5);
 800285a:	21c5      	movs	r1, #197	@ 0xc5
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f7ff ff47 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>

	sendCommand(0xC2);
 8002862:	21c2      	movs	r1, #194	@ 0xc2
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff ff21 	bl	80026ac <_ZN9WaveShare11sendCommandEh>
	sendData_byte(0x0A);
 800286a:	210a      	movs	r1, #10
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff ff3f 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x00);
 8002872:	2100      	movs	r1, #0
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f7ff ff3b 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>

	sendCommand(0xC3);
 800287a:	21c3      	movs	r1, #195	@ 0xc3
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f7ff ff15 	bl	80026ac <_ZN9WaveShare11sendCommandEh>
	sendData_byte(0x8A);
 8002882:	218a      	movs	r1, #138	@ 0x8a
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff ff33 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x2A);
 800288a:	212a      	movs	r1, #42	@ 0x2a
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f7ff ff2f 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendCommand(0xC4);
 8002892:	21c4      	movs	r1, #196	@ 0xc4
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f7ff ff09 	bl	80026ac <_ZN9WaveShare11sendCommandEh>
	sendData_byte(0x8A);
 800289a:	218a      	movs	r1, #138	@ 0x8a
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff ff27 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0xEE);
 80028a2:	21ee      	movs	r1, #238	@ 0xee
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7ff ff23 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>

	sendCommand(0xC5); //VCOM
 80028aa:	21c5      	movs	r1, #197	@ 0xc5
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f7ff fefd 	bl	80026ac <_ZN9WaveShare11sendCommandEh>
	sendData_byte(0x0E);
 80028b2:	210e      	movs	r1, #14
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f7ff ff1b 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>

	// Gamma settings
	sendCommand(0xe0);
 80028ba:	21e0      	movs	r1, #224	@ 0xe0
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f7ff fef5 	bl	80026ac <_ZN9WaveShare11sendCommandEh>
	sendData_byte(0x0f);
 80028c2:	210f      	movs	r1, #15
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff ff13 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x1a);
 80028ca:	211a      	movs	r1, #26
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff ff0f 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x0f);
 80028d2:	210f      	movs	r1, #15
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f7ff ff0b 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x18);
 80028da:	2118      	movs	r1, #24
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f7ff ff07 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x2f);
 80028e2:	212f      	movs	r1, #47	@ 0x2f
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7ff ff03 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x28);
 80028ea:	2128      	movs	r1, #40	@ 0x28
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff feff 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x20);
 80028f2:	2120      	movs	r1, #32
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff fefb 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x22);
 80028fa:	2122      	movs	r1, #34	@ 0x22
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f7ff fef7 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x1f);
 8002902:	211f      	movs	r1, #31
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff fef3 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x1b);
 800290a:	211b      	movs	r1, #27
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff feef 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x23);
 8002912:	2123      	movs	r1, #35	@ 0x23
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff feeb 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x37);
 800291a:	2137      	movs	r1, #55	@ 0x37
 800291c:	6878      	ldr	r0, [r7, #4]
 800291e:	f7ff fee7 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x00);
 8002922:	2100      	movs	r1, #0
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff fee3 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x07);
 800292a:	2107      	movs	r1, #7
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f7ff fedf 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x02);
 8002932:	2102      	movs	r1, #2
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f7ff fedb 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x10);
 800293a:	2110      	movs	r1, #16
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff fed7 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>

	sendCommand(0xe1);
 8002942:	21e1      	movs	r1, #225	@ 0xe1
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f7ff feb1 	bl	80026ac <_ZN9WaveShare11sendCommandEh>
	sendData_byte(0x0f);
 800294a:	210f      	movs	r1, #15
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7ff fecf 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x1b);
 8002952:	211b      	movs	r1, #27
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f7ff fecb 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x0f);
 800295a:	210f      	movs	r1, #15
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff fec7 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x17);
 8002962:	2117      	movs	r1, #23
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f7ff fec3 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x33);
 800296a:	2133      	movs	r1, #51	@ 0x33
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff febf 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x2c);
 8002972:	212c      	movs	r1, #44	@ 0x2c
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff febb 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x29);
 800297a:	2129      	movs	r1, #41	@ 0x29
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f7ff feb7 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x2e);
 8002982:	212e      	movs	r1, #46	@ 0x2e
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff feb3 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x30);
 800298a:	2130      	movs	r1, #48	@ 0x30
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f7ff feaf 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x30);
 8002992:	2130      	movs	r1, #48	@ 0x30
 8002994:	6878      	ldr	r0, [r7, #4]
 8002996:	f7ff feab 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x39);
 800299a:	2139      	movs	r1, #57	@ 0x39
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f7ff fea7 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x3f);
 80029a2:	213f      	movs	r1, #63	@ 0x3f
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff fea3 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x00);
 80029aa:	2100      	movs	r1, #0
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f7ff fe9f 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x07);
 80029b2:	2107      	movs	r1, #7
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff fe9b 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x03);
 80029ba:	2103      	movs	r1, #3
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff fe97 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0x10);
 80029c2:	2110      	movs	r1, #16
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f7ff fe93 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>

	// Misc
	sendCommand(0xF0); //Enable test command
 80029ca:	21f0      	movs	r1, #240	@ 0xf0
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f7ff fe6d 	bl	80026ac <_ZN9WaveShare11sendCommandEh>
	sendData_byte(0x01);
 80029d2:	2101      	movs	r1, #1
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff fe8b 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>

	sendCommand(0xF6); //Disable ram power save mode
 80029da:	21f6      	movs	r1, #246	@ 0xf6
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f7ff fe65 	bl	80026ac <_ZN9WaveShare11sendCommandEh>
	sendData_byte(0x00);
 80029e2:	2100      	movs	r1, #0
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff fe83 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>

	sendCommand(0x3A); //65k mode
 80029ea:	213a      	movs	r1, #58	@ 0x3a
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff fe5d 	bl	80026ac <_ZN9WaveShare11sendCommandEh>
	sendData_byte(0x05);
 80029f2:	2105      	movs	r1, #5
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff fe7b 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>

	sendCommand(0x36);
 80029fa:	2136      	movs	r1, #54	@ 0x36
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff fe55 	bl	80026ac <_ZN9WaveShare11sendCommandEh>
	sendData_byte(0x60);
 8002a02:	2160      	movs	r1, #96	@ 0x60
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff fe73 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	HAL_Delay(200);
 8002a0a:	20c8      	movs	r0, #200	@ 0xc8
 8002a0c:	f003 fcf8 	bl	8006400 <HAL_Delay>

	sendCommand(0X11);
 8002a10:	2111      	movs	r1, #17
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff fe4a 	bl	80026ac <_ZN9WaveShare11sendCommandEh>
	HAL_Delay(200);
 8002a18:	20c8      	movs	r0, #200	@ 0xc8
 8002a1a:	f003 fcf1 	bl	8006400 <HAL_Delay>

	sendCommand(0X29);
 8002a1e:	2129      	movs	r1, #41	@ 0x29
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7ff fe43 	bl	80026ac <_ZN9WaveShare11sendCommandEh>
	HAL_Delay(200);
 8002a26:	20c8      	movs	r0, #200	@ 0xc8
 8002a28:	f003 fcea 	bl	8006400 <HAL_Delay>
}
 8002a2c:	bf00      	nop
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <_ZN9WaveShare17setCursorLocationEhhhh>:

// Quick note, apparently the screen is ACTUALLY a bastard. From the OEM docs:
// "ST7735S is a 132*162 pixel LCD, and this product is a 128*160 pixel LCD"
// This means you have to offset the starting values.
void WaveShare::setCursorLocation(uint8_t startX, uint8_t endX, uint8_t startY, uint8_t endY)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	4608      	mov	r0, r1
 8002a3e:	4611      	mov	r1, r2
 8002a40:	461a      	mov	r2, r3
 8002a42:	4603      	mov	r3, r0
 8002a44:	70fb      	strb	r3, [r7, #3]
 8002a46:	460b      	mov	r3, r1
 8002a48:	70bb      	strb	r3, [r7, #2]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	707b      	strb	r3, [r7, #1]
	sendCommand(0x2a);
 8002a4e:	212a      	movs	r1, #42	@ 0x2a
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff fe2b 	bl	80026ac <_ZN9WaveShare11sendCommandEh>
	sendData_byte(0X00);
 8002a56:	2100      	movs	r1, #0
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff fe49 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte((startX & 0xff) + 1);
 8002a5e:	78fb      	ldrb	r3, [r7, #3]
 8002a60:	3301      	adds	r3, #1
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	4619      	mov	r1, r3
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff fe42 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0X00);
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff fe3e 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(((endX) & 0xff));
 8002a74:	78bb      	ldrb	r3, [r7, #2]
 8002a76:	4619      	mov	r1, r3
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff fe39 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>

	sendCommand(0x2b);
 8002a7e:	212b      	movs	r1, #43	@ 0x2b
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f7ff fe13 	bl	80026ac <_ZN9WaveShare11sendCommandEh>
	sendData_byte(0X00);
 8002a86:	2100      	movs	r1, #0
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff fe31 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte((startY & 0xff) + 2);
 8002a8e:	787b      	ldrb	r3, [r7, #1]
 8002a90:	3302      	adds	r3, #2
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	4619      	mov	r1, r3
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff fe2a 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(0X00);
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f7ff fe26 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>
	sendData_byte(((endY) & 0xff ));
 8002aa4:	7c3b      	ldrb	r3, [r7, #16]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f7ff fe21 	bl	80026f0 <_ZN9WaveShare13sendData_byteEh>

	sendCommand(0x2C);
 8002aae:	212c      	movs	r1, #44	@ 0x2c
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7ff fdfb 	bl	80026ac <_ZN9WaveShare11sendCommandEh>
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <_ZN9WaveShare10fillScreenEt>:

// Not sure why I had to modify the end values so much, but this is what worked.
void WaveShare::fillScreen(uint16_t color)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b086      	sub	sp, #24
 8002ac2:	af02      	add	r7, sp, #8
 8002ac4:	6078      	str	r0, [r7, #4]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	807b      	strh	r3, [r7, #2]
	setCursorLocation(0, LCD_WIDTH, 0,  LCD_HEIGHT + 1);
 8002aca:	2381      	movs	r3, #129	@ 0x81
 8002acc:	9300      	str	r3, [sp, #0]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	22a0      	movs	r2, #160	@ 0xa0
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff ffad 	bl	8002a34 <_ZN9WaveShare17setCursorLocationEhhhh>
	for (uint16_t i = 0; i < LCD_WIDTH; i++)
 8002ada:	2300      	movs	r3, #0
 8002adc:	81fb      	strh	r3, [r7, #14]
 8002ade:	e010      	b.n	8002b02 <_ZN9WaveShare10fillScreenEt+0x44>
	{
		for (uint16_t j = 0; j < LCD_HEIGHT + 3; j++)
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	81bb      	strh	r3, [r7, #12]
 8002ae4:	e007      	b.n	8002af6 <_ZN9WaveShare10fillScreenEt+0x38>
		{
			sendData_word(color);
 8002ae6:	887b      	ldrh	r3, [r7, #2]
 8002ae8:	4619      	mov	r1, r3
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7ff fe1c 	bl	8002728 <_ZN9WaveShare13sendData_wordEt>
		for (uint16_t j = 0; j < LCD_HEIGHT + 3; j++)
 8002af0:	89bb      	ldrh	r3, [r7, #12]
 8002af2:	3301      	adds	r3, #1
 8002af4:	81bb      	strh	r3, [r7, #12]
 8002af6:	89bb      	ldrh	r3, [r7, #12]
 8002af8:	2b82      	cmp	r3, #130	@ 0x82
 8002afa:	d9f4      	bls.n	8002ae6 <_ZN9WaveShare10fillScreenEt+0x28>
	for (uint16_t i = 0; i < LCD_WIDTH; i++)
 8002afc:	89fb      	ldrh	r3, [r7, #14]
 8002afe:	3301      	adds	r3, #1
 8002b00:	81fb      	strh	r3, [r7, #14]
 8002b02:	89fb      	ldrh	r3, [r7, #14]
 8002b04:	2b9f      	cmp	r3, #159	@ 0x9f
 8002b06:	d9eb      	bls.n	8002ae0 <_ZN9WaveShare10fillScreenEt+0x22>
		}
	}
}
 8002b08:	bf00      	nop
 8002b0a:	bf00      	nop
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <_ZN9WaveShare8setPixelEttt>:


void WaveShare::setPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af02      	add	r7, sp, #8
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	4608      	mov	r0, r1
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4603      	mov	r3, r0
 8002b22:	817b      	strh	r3, [r7, #10]
 8002b24:	460b      	mov	r3, r1
 8002b26:	813b      	strh	r3, [r7, #8]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	80fb      	strh	r3, [r7, #6]
	setCursorLocation(x, x, y, y);
 8002b2c:	897b      	ldrh	r3, [r7, #10]
 8002b2e:	b2d9      	uxtb	r1, r3
 8002b30:	897b      	ldrh	r3, [r7, #10]
 8002b32:	b2da      	uxtb	r2, r3
 8002b34:	893b      	ldrh	r3, [r7, #8]
 8002b36:	b2d8      	uxtb	r0, r3
 8002b38:	893b      	ldrh	r3, [r7, #8]
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	4603      	mov	r3, r0
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f7ff ff77 	bl	8002a34 <_ZN9WaveShare17setCursorLocationEhhhh>
	sendData_word(color);
 8002b46:	88fb      	ldrh	r3, [r7, #6]
 8002b48:	4619      	mov	r1, r3
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f7ff fdec 	bl	8002728 <_ZN9WaveShare13sendData_wordEt>
}
 8002b50:	bf00      	nop
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <_ZN9WaveShare10drawStringEhhPKcth>:


void WaveShare::drawString(uint8_t startX, uint8_t startY, const char *str, uint16_t color, uint8_t font)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	607b      	str	r3, [r7, #4]
 8002b62:	460b      	mov	r3, r1
 8002b64:	72fb      	strb	r3, [r7, #11]
 8002b66:	4613      	mov	r3, r2
 8002b68:	72bb      	strb	r3, [r7, #10]
	uint8_t XcursorLocation = startX;
 8002b6a:	7afb      	ldrb	r3, [r7, #11]
 8002b6c:	75fb      	strb	r3, [r7, #23]
	uint8_t YcursorLocation = startY;
 8002b6e:	7abb      	ldrb	r3, [r7, #10]
 8002b70:	75bb      	strb	r3, [r7, #22]

	uint8_t fontWidth, fontHeight;

	if(font == FONT24)
 8002b72:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d106      	bne.n	8002b88 <_ZN9WaveShare10drawStringEhhPKcth+0x30>
	{
		fontWidth = FontDetails.font24Width;
 8002b7a:	4b21      	ldr	r3, [pc, #132]	@ (8002c00 <_ZN9WaveShare10drawStringEhhPKcth+0xa8>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	757b      	strb	r3, [r7, #21]
		fontHeight = FontDetails.font24Height;
 8002b80:	4b1f      	ldr	r3, [pc, #124]	@ (8002c00 <_ZN9WaveShare10drawStringEhhPKcth+0xa8>)
 8002b82:	785b      	ldrb	r3, [r3, #1]
 8002b84:	753b      	strb	r3, [r7, #20]
 8002b86:	e032      	b.n	8002bee <_ZN9WaveShare10drawStringEhhPKcth+0x96>
	}
	else if (font == FONT16)
 8002b88:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d12e      	bne.n	8002bee <_ZN9WaveShare10drawStringEhhPKcth+0x96>
	{
		fontWidth = FontDetails.font16Width;
 8002b90:	4b1b      	ldr	r3, [pc, #108]	@ (8002c00 <_ZN9WaveShare10drawStringEhhPKcth+0xa8>)
 8002b92:	789b      	ldrb	r3, [r3, #2]
 8002b94:	757b      	strb	r3, [r7, #21]
		fontHeight = FontDetails.font16Height;
 8002b96:	4b1a      	ldr	r3, [pc, #104]	@ (8002c00 <_ZN9WaveShare10drawStringEhhPKcth+0xa8>)
 8002b98:	78db      	ldrb	r3, [r3, #3]
 8002b9a:	753b      	strb	r3, [r7, #20]
	}

	// I'm a C++ prodigy, but you may not know that all C strings have an EOL char '\0'
	while (*str != '\0')
 8002b9c:	e027      	b.n	8002bee <_ZN9WaveShare10drawStringEhhPKcth+0x96>
	{
		if ((XcursorLocation + fontWidth) > LCD_WIDTH)
 8002b9e:	7dfa      	ldrb	r2, [r7, #23]
 8002ba0:	7d7b      	ldrb	r3, [r7, #21]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	2ba0      	cmp	r3, #160	@ 0xa0
 8002ba6:	dd05      	ble.n	8002bb4 <_ZN9WaveShare10drawStringEhhPKcth+0x5c>
		{
			XcursorLocation = startX;
 8002ba8:	7afb      	ldrb	r3, [r7, #11]
 8002baa:	75fb      	strb	r3, [r7, #23]
			YcursorLocation += fontHeight;
 8002bac:	7dba      	ldrb	r2, [r7, #22]
 8002bae:	7d3b      	ldrb	r3, [r7, #20]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	75bb      	strb	r3, [r7, #22]
		}

		if ((YcursorLocation + fontWidth) > LCD_HEIGHT)
 8002bb4:	7dba      	ldrb	r2, [r7, #22]
 8002bb6:	7d7b      	ldrb	r3, [r7, #21]
 8002bb8:	4413      	add	r3, r2
 8002bba:	2b80      	cmp	r3, #128	@ 0x80
 8002bbc:	dd03      	ble.n	8002bc6 <_ZN9WaveShare10drawStringEhhPKcth+0x6e>
		{
			XcursorLocation = startX;
 8002bbe:	7afb      	ldrb	r3, [r7, #11]
 8002bc0:	75fb      	strb	r3, [r7, #23]
			YcursorLocation = startY;
 8002bc2:	7abb      	ldrb	r3, [r7, #10]
 8002bc4:	75bb      	strb	r3, [r7, #22]
		}

		drawCharacter(XcursorLocation, YcursorLocation, *str, color, font);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	7818      	ldrb	r0, [r3, #0]
 8002bca:	7dba      	ldrb	r2, [r7, #22]
 8002bcc:	7df9      	ldrb	r1, [r7, #23]
 8002bce:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002bd2:	9301      	str	r3, [sp, #4]
 8002bd4:	8c3b      	ldrh	r3, [r7, #32]
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	4603      	mov	r3, r0
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 f812 	bl	8002c04 <_ZN9WaveShare13drawCharacterEhhcth>

		str++;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	3301      	adds	r3, #1
 8002be4:	607b      	str	r3, [r7, #4]

		XcursorLocation += fontWidth;
 8002be6:	7dfa      	ldrb	r2, [r7, #23]
 8002be8:	7d7b      	ldrb	r3, [r7, #21]
 8002bea:	4413      	add	r3, r2
 8002bec:	75fb      	strb	r3, [r7, #23]
	while (*str != '\0')
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1d3      	bne.n	8002b9e <_ZN9WaveShare10drawStringEhhPKcth+0x46>
	}
}
 8002bf6:	bf00      	nop
 8002bf8:	bf00      	nop
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	24000000 	.word	0x24000000

08002c04 <_ZN9WaveShare13drawCharacterEhhcth>:


void WaveShare::drawCharacter(uint8_t startX, uint8_t startY, const char acsii, uint16_t color, uint8_t font)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	4608      	mov	r0, r1
 8002c0e:	4611      	mov	r1, r2
 8002c10:	461a      	mov	r2, r3
 8002c12:	4603      	mov	r3, r0
 8002c14:	70fb      	strb	r3, [r7, #3]
 8002c16:	460b      	mov	r3, r1
 8002c18:	70bb      	strb	r3, [r7, #2]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	707b      	strb	r3, [r7, #1]
	uint8_t fontWidth, fontHeight;

	if(font == FONT24)
 8002c1e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d106      	bne.n	8002c34 <_ZN9WaveShare13drawCharacterEhhcth+0x30>
	{
		fontWidth = FontDetails.font24Width;
 8002c26:	4b46      	ldr	r3, [pc, #280]	@ (8002d40 <_ZN9WaveShare13drawCharacterEhhcth+0x13c>)
 8002c28:	781b      	ldrb	r3, [r3, #0]
 8002c2a:	75fb      	strb	r3, [r7, #23]
		fontHeight = FontDetails.font24Height;
 8002c2c:	4b44      	ldr	r3, [pc, #272]	@ (8002d40 <_ZN9WaveShare13drawCharacterEhhcth+0x13c>)
 8002c2e:	785b      	ldrb	r3, [r3, #1]
 8002c30:	75bb      	strb	r3, [r7, #22]
 8002c32:	e009      	b.n	8002c48 <_ZN9WaveShare13drawCharacterEhhcth+0x44>
	}
	else if (font == FONT16)
 8002c34:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d105      	bne.n	8002c48 <_ZN9WaveShare13drawCharacterEhhcth+0x44>
	{
		fontWidth = FontDetails.font16Width;
 8002c3c:	4b40      	ldr	r3, [pc, #256]	@ (8002d40 <_ZN9WaveShare13drawCharacterEhhcth+0x13c>)
 8002c3e:	789b      	ldrb	r3, [r3, #2]
 8002c40:	75fb      	strb	r3, [r7, #23]
		fontHeight = FontDetails.font16Height;
 8002c42:	4b3f      	ldr	r3, [pc, #252]	@ (8002d40 <_ZN9WaveShare13drawCharacterEhhcth+0x13c>)
 8002c44:	78db      	ldrb	r3, [r3, #3]
 8002c46:	75bb      	strb	r3, [r7, #22]
	}

	// The font characters are stored in ASCII order, so a little manipulation of the ASCII value of the intended char will
	// yield the pointer to the value in the table
	uint32_t Char_Offset = (acsii - ' ') * fontHeight * (fontWidth / 8 + (fontWidth % 8 ? 1 : 0));
 8002c48:	787b      	ldrb	r3, [r7, #1]
 8002c4a:	3b20      	subs	r3, #32
 8002c4c:	7dba      	ldrb	r2, [r7, #22]
 8002c4e:	fb02 f303 	mul.w	r3, r2, r3
 8002c52:	7dfa      	ldrb	r2, [r7, #23]
 8002c54:	08d2      	lsrs	r2, r2, #3
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	4611      	mov	r1, r2
 8002c5a:	7dfa      	ldrb	r2, [r7, #23]
 8002c5c:	f002 0207 	and.w	r2, r2, #7
 8002c60:	2a00      	cmp	r2, #0
 8002c62:	d001      	beq.n	8002c68 <_ZN9WaveShare13drawCharacterEhhcth+0x64>
 8002c64:	2201      	movs	r2, #1
 8002c66:	e000      	b.n	8002c6a <_ZN9WaveShare13drawCharacterEhhcth+0x66>
 8002c68:	2200      	movs	r2, #0
 8002c6a:	440a      	add	r2, r1
 8002c6c:	fb02 f303 	mul.w	r3, r2, r3
 8002c70:	60bb      	str	r3, [r7, #8]

	const unsigned char *ptr;

	if(font == FONT24)
 8002c72:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d104      	bne.n	8002c84 <_ZN9WaveShare13drawCharacterEhhcth+0x80>
	{
		ptr = &Font24_Table[Char_Offset];
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	4a31      	ldr	r2, [pc, #196]	@ (8002d44 <_ZN9WaveShare13drawCharacterEhhcth+0x140>)
 8002c7e:	4413      	add	r3, r2
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	e007      	b.n	8002c94 <_ZN9WaveShare13drawCharacterEhhcth+0x90>
	}
	else if (font == FONT16)
 8002c84:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d103      	bne.n	8002c94 <_ZN9WaveShare13drawCharacterEhhcth+0x90>
	{
		ptr = &Font16_Table[Char_Offset];
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4a2e      	ldr	r2, [pc, #184]	@ (8002d48 <_ZN9WaveShare13drawCharacterEhhcth+0x144>)
 8002c90:	4413      	add	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
	}

	for (uint8_t page = 0; page < fontHeight; page++)
 8002c94:	2300      	movs	r3, #0
 8002c96:	73fb      	strb	r3, [r7, #15]
 8002c98:	e049      	b.n	8002d2e <_ZN9WaveShare13drawCharacterEhhcth+0x12a>
	{
		for (uint8_t column = 0; column < fontWidth; column++)
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	73bb      	strb	r3, [r7, #14]
 8002c9e:	e037      	b.n	8002d10 <_ZN9WaveShare13drawCharacterEhhcth+0x10c>
		{
			if (*ptr & (0x80 >> (column % 8)))
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	7bbb      	ldrb	r3, [r7, #14]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	2280      	movs	r2, #128	@ 0x80
 8002cae:	fa42 f303 	asr.w	r3, r2, r3
 8002cb2:	400b      	ands	r3, r1
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d010      	beq.n	8002cda <_ZN9WaveShare13drawCharacterEhhcth+0xd6>
			{
				setPixel(startX + column, startY + page, color);
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	7bbb      	ldrb	r3, [r7, #14]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	4413      	add	r3, r2
 8002cc2:	b299      	uxth	r1, r3
 8002cc4:	78bb      	ldrb	r3, [r7, #2]
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	8c3b      	ldrh	r3, [r7, #32]
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff ff1d 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
 8002cd8:	e00f      	b.n	8002cfa <_ZN9WaveShare13drawCharacterEhhcth+0xf6>
			}
			else
			{
				setPixel(startX + column, startY + page, 0x0000);
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	7bbb      	ldrb	r3, [r7, #14]
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	b299      	uxth	r1, r3
 8002ce6:	78bb      	ldrb	r3, [r7, #2]
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	7bfb      	ldrb	r3, [r7, #15]
 8002cec:	b29b      	uxth	r3, r3
 8002cee:	4413      	add	r3, r2
 8002cf0:	b29a      	uxth	r2, r3
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff ff0c 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			}

			if (column % 8 == 7)
 8002cfa:	7bbb      	ldrb	r3, [r7, #14]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	2b07      	cmp	r3, #7
 8002d02:	d102      	bne.n	8002d0a <_ZN9WaveShare13drawCharacterEhhcth+0x106>
			{
				ptr++;
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	3301      	adds	r3, #1
 8002d08:	613b      	str	r3, [r7, #16]
		for (uint8_t column = 0; column < fontWidth; column++)
 8002d0a:	7bbb      	ldrb	r3, [r7, #14]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	73bb      	strb	r3, [r7, #14]
 8002d10:	7bba      	ldrb	r2, [r7, #14]
 8002d12:	7dfb      	ldrb	r3, [r7, #23]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d3c3      	bcc.n	8002ca0 <_ZN9WaveShare13drawCharacterEhhcth+0x9c>
			}
		}

		if (fontWidth % 8 != 0)
 8002d18:	7dfb      	ldrb	r3, [r7, #23]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <_ZN9WaveShare13drawCharacterEhhcth+0x124>
		{
			ptr++;
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	3301      	adds	r3, #1
 8002d26:	613b      	str	r3, [r7, #16]
	for (uint8_t page = 0; page < fontHeight; page++)
 8002d28:	7bfb      	ldrb	r3, [r7, #15]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
 8002d2e:	7bfa      	ldrb	r2, [r7, #15]
 8002d30:	7dbb      	ldrb	r3, [r7, #22]
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d3b1      	bcc.n	8002c9a <_ZN9WaveShare13drawCharacterEhhcth+0x96>
		}
	}
}
 8002d36:	bf00      	nop
 8002d38:	bf00      	nop
 8002d3a:	3718      	adds	r7, #24
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	24000000 	.word	0x24000000
 8002d44:	0800be30 	.word	0x0800be30
 8002d48:	0800b250 	.word	0x0800b250

08002d4c <_ZN9WaveShare8drawLineEhhhht>:


void WaveShare::drawLine(uint8_t startX, uint8_t startY, uint8_t endX, uint8_t endY, uint16_t color)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b088      	sub	sp, #32
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	4608      	mov	r0, r1
 8002d56:	4611      	mov	r1, r2
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	70fb      	strb	r3, [r7, #3]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	70bb      	strb	r3, [r7, #2]
 8002d62:	4613      	mov	r3, r2
 8002d64:	707b      	strb	r3, [r7, #1]
	uint16_t Xlocation = startX;
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	83fb      	strh	r3, [r7, #30]
	uint16_t Ylocation = startY;
 8002d6a:	78bb      	ldrb	r3, [r7, #2]
 8002d6c:	83bb      	strh	r3, [r7, #28]

	int Xmagnitude = (int)endX - (int)startX >= 0 ? endX - startX : startX - endX;
 8002d6e:	787a      	ldrb	r2, [r7, #1]
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bfb8      	it	lt
 8002d78:	425b      	neglt	r3, r3
 8002d7a:	617b      	str	r3, [r7, #20]
	int Ymagnitude = (int)endY - (int)startY <= 0 ? endY - startY : startY - endY;
 8002d7c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002d80:	78bb      	ldrb	r3, [r7, #2]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bfb8      	it	lt
 8002d88:	425b      	neglt	r3, r3
 8002d8a:	425b      	negs	r3, r3
 8002d8c:	613b      	str	r3, [r7, #16]

    int Xphase = startX < endX ? 1 : -1;
 8002d8e:	78fa      	ldrb	r2, [r7, #3]
 8002d90:	787b      	ldrb	r3, [r7, #1]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d201      	bcs.n	8002d9a <_ZN9WaveShare8drawLineEhhhht+0x4e>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e001      	b.n	8002d9e <_ZN9WaveShare8drawLineEhhhht+0x52>
 8002d9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d9e:	60fb      	str	r3, [r7, #12]
    int Yphase = startY < endY ? 1 : -1;
 8002da0:	78ba      	ldrb	r2, [r7, #2]
 8002da2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d201      	bcs.n	8002dae <_ZN9WaveShare8drawLineEhhhht+0x62>
 8002daa:	2301      	movs	r3, #1
 8002dac:	e001      	b.n	8002db2 <_ZN9WaveShare8drawLineEhhhht+0x66>
 8002dae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002db2:	60bb      	str	r3, [r7, #8]

    int error = Xmagnitude + Ymagnitude;
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4413      	add	r3, r2
 8002dba:	61bb      	str	r3, [r7, #24]

	while(1)
	{
		setPixel(Xlocation, Ylocation, color);
 8002dbc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8002dbe:	8bba      	ldrh	r2, [r7, #28]
 8002dc0:	8bf9      	ldrh	r1, [r7, #30]
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f7ff fea5 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

		if (2 * error >= Ymagnitude)
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	dc0d      	bgt.n	8002dee <_ZN9WaveShare8drawLineEhhhht+0xa2>
		{
			if (Xlocation == endX)
 8002dd2:	787b      	ldrb	r3, [r7, #1]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	8bfa      	ldrh	r2, [r7, #30]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d01d      	beq.n	8002e18 <_ZN9WaveShare8drawLineEhhhht+0xcc>
			{
				break;
			}
			error += Ymagnitude;
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	4413      	add	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
			Xlocation += Xphase;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	8bfb      	ldrh	r3, [r7, #30]
 8002dea:	4413      	add	r3, r2
 8002dec:	83fb      	strh	r3, [r7, #30]
		}

		if (2 * error <= Xmagnitude)
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	dbe1      	blt.n	8002dbc <_ZN9WaveShare8drawLineEhhhht+0x70>
		{
			if (Ylocation == endY)
 8002df8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	8bba      	ldrh	r2, [r7, #28]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d00b      	beq.n	8002e1c <_ZN9WaveShare8drawLineEhhhht+0xd0>
			{
				break;
			}
			error += Xmagnitude;
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	4413      	add	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
			Ylocation += Yphase;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	8bbb      	ldrh	r3, [r7, #28]
 8002e12:	4413      	add	r3, r2
 8002e14:	83bb      	strh	r3, [r7, #28]
		setPixel(Xlocation, Ylocation, color);
 8002e16:	e7d1      	b.n	8002dbc <_ZN9WaveShare8drawLineEhhhht+0x70>
				break;
 8002e18:	bf00      	nop
 8002e1a:	e000      	b.n	8002e1e <_ZN9WaveShare8drawLineEhhhht+0xd2>
				break;
 8002e1c:	bf00      	nop
		}
	}
}
 8002e1e:	bf00      	nop
 8002e20:	3720      	adds	r7, #32
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <_ZN9WaveShare10showScreenE6Screenh>:


void WaveShare::showScreen(Screen screen, uint8_t speed)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af02      	add	r7, sp, #8
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	70fb      	strb	r3, [r7, #3]
 8002e34:	4613      	mov	r3, r2
 8002e36:	70bb      	strb	r3, [r7, #2]
	switch(screen)
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	2b0c      	cmp	r3, #12
 8002e3c:	f201 834a 	bhi.w	80044d4 <_ZN9WaveShare10showScreenE6Screenh+0x16ac>
 8002e40:	a201      	add	r2, pc, #4	@ (adr r2, 8002e48 <_ZN9WaveShare10showScreenE6Screenh+0x20>)
 8002e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e46:	bf00      	nop
 8002e48:	08002e7d 	.word	0x08002e7d
 8002e4c:	0800393d 	.word	0x0800393d
 8002e50:	08003ad5 	.word	0x08003ad5
 8002e54:	08003bdd 	.word	0x08003bdd
 8002e58:	08003cd1 	.word	0x08003cd1
 8002e5c:	08003dc3 	.word	0x08003dc3
 8002e60:	08003eb9 	.word	0x08003eb9
 8002e64:	08003f9d 	.word	0x08003f9d
 8002e68:	08003fe1 	.word	0x08003fe1
 8002e6c:	080043d5 	.word	0x080043d5
 8002e70:	08004433 	.word	0x08004433
 8002e74:	0800448f 	.word	0x0800448f
 8002e78:	080042f1 	.word	0x080042f1
	{
		case BootScreen:
		{
			fillScreen(0x0000);
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff fe1d 	bl	8002abe <_ZN9WaveShare10fillScreenEt>
			drawString(30, 20, "Sloppy", 0xFFFF, FONT24);
 8002e84:	2300      	movs	r3, #0
 8002e86:	9301      	str	r3, [sp, #4]
 8002e88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	4bdd      	ldr	r3, [pc, #884]	@ (8003204 <_ZN9WaveShare10showScreenE6Screenh+0x3dc>)
 8002e90:	2214      	movs	r2, #20
 8002e92:	211e      	movs	r1, #30
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff fe5f 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
			drawString(47, 44, "Top", 0xFFFF, FONT24);
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	9301      	str	r3, [sp, #4]
 8002e9e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	4bd8      	ldr	r3, [pc, #864]	@ (8003208 <_ZN9WaveShare10showScreenE6Screenh+0x3e0>)
 8002ea6:	222c      	movs	r2, #44	@ 0x2c
 8002ea8:	212f      	movs	r1, #47	@ 0x2f
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f7ff fe54 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>

			// Blue: 0xFA42
			// LBlue: 0x8962

			setPixel(90, 11, 0x8962);
 8002eb0:	f648 1362 	movw	r3, #35170	@ 0x8962
 8002eb4:	220b      	movs	r2, #11
 8002eb6:	215a      	movs	r1, #90	@ 0x5a
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff fe2a 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(90, 12, 0x8962);
 8002ebe:	f648 1362 	movw	r3, #35170	@ 0x8962
 8002ec2:	220c      	movs	r2, #12
 8002ec4:	215a      	movs	r1, #90	@ 0x5a
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff fe23 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(89, 13, 0xFA42);
 8002ecc:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8002ed0:	220d      	movs	r2, #13
 8002ed2:	2159      	movs	r1, #89	@ 0x59
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f7ff fe1c 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(90, 13, 0xFA42);
 8002eda:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8002ede:	220d      	movs	r2, #13
 8002ee0:	215a      	movs	r1, #90	@ 0x5a
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff fe15 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(88, 13, 0xFA42);
 8002ee8:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8002eec:	220d      	movs	r2, #13
 8002eee:	2158      	movs	r1, #88	@ 0x58
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f7ff fe0e 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(89, 13, 0xFA42);
 8002ef6:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8002efa:	220d      	movs	r2, #13
 8002efc:	2159      	movs	r1, #89	@ 0x59
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7ff fe07 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(90, 13, 0xFA42);
 8002f04:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8002f08:	220d      	movs	r2, #13
 8002f0a:	215a      	movs	r1, #90	@ 0x5a
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff fe00 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(87, 14, 0xFA42);
 8002f12:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8002f16:	220e      	movs	r2, #14
 8002f18:	2157      	movs	r1, #87	@ 0x57
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff fdf9 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(88, 14, 0xFA42);
 8002f20:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8002f24:	220e      	movs	r2, #14
 8002f26:	2158      	movs	r1, #88	@ 0x58
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f7ff fdf2 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(89, 14, 0xFA42);
 8002f2e:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8002f32:	220e      	movs	r2, #14
 8002f34:	2159      	movs	r1, #89	@ 0x59
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7ff fdeb 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(90, 14, 0xFA42);
 8002f3c:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8002f40:	220e      	movs	r2, #14
 8002f42:	215a      	movs	r1, #90	@ 0x5a
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f7ff fde4 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(91, 14, 0xFA42);
 8002f4a:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8002f4e:	220e      	movs	r2, #14
 8002f50:	215b      	movs	r1, #91	@ 0x5b
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff fddd 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(87, 15, 0xFA42);
 8002f58:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8002f5c:	220f      	movs	r2, #15
 8002f5e:	2157      	movs	r1, #87	@ 0x57
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7ff fdd6 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(88, 15, 0xFA42);
 8002f66:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8002f6a:	220f      	movs	r2, #15
 8002f6c:	2158      	movs	r1, #88	@ 0x58
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff fdcf 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(89, 15, 0xFA42);
 8002f74:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8002f78:	220f      	movs	r2, #15
 8002f7a:	2159      	movs	r1, #89	@ 0x59
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff fdc8 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(90, 15, 0xFA42);
 8002f82:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8002f86:	220f      	movs	r2, #15
 8002f88:	215a      	movs	r1, #90	@ 0x5a
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff fdc1 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(91, 15, 0xFA42);
 8002f90:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8002f94:	220f      	movs	r2, #15
 8002f96:	215b      	movs	r1, #91	@ 0x5b
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff fdba 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(87, 16, 0x8962);
 8002f9e:	f648 1362 	movw	r3, #35170	@ 0x8962
 8002fa2:	2210      	movs	r2, #16
 8002fa4:	2157      	movs	r1, #87	@ 0x57
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f7ff fdb3 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(88, 16, 0xFA42);
 8002fac:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8002fb0:	2210      	movs	r2, #16
 8002fb2:	2158      	movs	r1, #88	@ 0x58
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f7ff fdac 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(89, 16, 0xFA42);
 8002fba:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8002fbe:	2210      	movs	r2, #16
 8002fc0:	2159      	movs	r1, #89	@ 0x59
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff fda5 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(90, 16, 0xFA42);
 8002fc8:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8002fcc:	2210      	movs	r2, #16
 8002fce:	215a      	movs	r1, #90	@ 0x5a
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff fd9e 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(91, 16, 0xFA42);
 8002fd6:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8002fda:	2210      	movs	r2, #16
 8002fdc:	215b      	movs	r1, #91	@ 0x5b
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff fd97 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(88, 17, 0x8962);
 8002fe4:	f648 1362 	movw	r3, #35170	@ 0x8962
 8002fe8:	2211      	movs	r2, #17
 8002fea:	2158      	movs	r1, #88	@ 0x58
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7ff fd90 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(89, 17, 0x8962);
 8002ff2:	f648 1362 	movw	r3, #35170	@ 0x8962
 8002ff6:	2211      	movs	r2, #17
 8002ff8:	2159      	movs	r1, #89	@ 0x59
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f7ff fd89 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(90, 17, 0x8962);
 8003000:	f648 1362 	movw	r3, #35170	@ 0x8962
 8003004:	2211      	movs	r2, #17
 8003006:	215a      	movs	r1, #90	@ 0x5a
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff fd82 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(82, 26, 0xFA42);
 800300e:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003012:	221a      	movs	r2, #26
 8003014:	2152      	movs	r1, #82	@ 0x52
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7ff fd7b 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(83, 26, 0xFA42);
 800301c:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003020:	221a      	movs	r2, #26
 8003022:	2153      	movs	r1, #83	@ 0x53
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f7ff fd74 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(84, 26, 0xFA42);
 800302a:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800302e:	221a      	movs	r2, #26
 8003030:	2154      	movs	r1, #84	@ 0x54
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7ff fd6d 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(85, 26, 0x8962);
 8003038:	f648 1362 	movw	r3, #35170	@ 0x8962
 800303c:	221a      	movs	r2, #26
 800303e:	2155      	movs	r1, #85	@ 0x55
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff fd66 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(86, 26, 0x8962);
 8003046:	f648 1362 	movw	r3, #35170	@ 0x8962
 800304a:	221a      	movs	r2, #26
 800304c:	2156      	movs	r1, #86	@ 0x56
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7ff fd5f 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(87, 26, 0xFA42);
 8003054:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003058:	221a      	movs	r2, #26
 800305a:	2157      	movs	r1, #87	@ 0x57
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7ff fd58 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(88, 26, 0xFA42);
 8003062:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003066:	221a      	movs	r2, #26
 8003068:	2158      	movs	r1, #88	@ 0x58
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff fd51 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(89, 26, 0xFA42);
 8003070:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003074:	221a      	movs	r2, #26
 8003076:	2159      	movs	r1, #89	@ 0x59
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f7ff fd4a 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(90, 26, 0xFA42);
 800307e:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003082:	221a      	movs	r2, #26
 8003084:	215a      	movs	r1, #90	@ 0x5a
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7ff fd43 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(91, 26, 0xFA42);
 800308c:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003090:	221a      	movs	r2, #26
 8003092:	215b      	movs	r1, #91	@ 0x5b
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff fd3c 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(82, 27, 0xFA42);
 800309a:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800309e:	221b      	movs	r2, #27
 80030a0:	2152      	movs	r1, #82	@ 0x52
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff fd35 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(83, 27, 0xFA42);
 80030a8:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80030ac:	221b      	movs	r2, #27
 80030ae:	2153      	movs	r1, #83	@ 0x53
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f7ff fd2e 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(84, 27, 0xFA42);
 80030b6:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80030ba:	221b      	movs	r2, #27
 80030bc:	2154      	movs	r1, #84	@ 0x54
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff fd27 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(85, 27, 0x8962);
 80030c4:	f648 1362 	movw	r3, #35170	@ 0x8962
 80030c8:	221b      	movs	r2, #27
 80030ca:	2155      	movs	r1, #85	@ 0x55
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff fd20 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(86, 27, 0x8962);
 80030d2:	f648 1362 	movw	r3, #35170	@ 0x8962
 80030d6:	221b      	movs	r2, #27
 80030d8:	2156      	movs	r1, #86	@ 0x56
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7ff fd19 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(87, 27, 0x8962);
 80030e0:	f648 1362 	movw	r3, #35170	@ 0x8962
 80030e4:	221b      	movs	r2, #27
 80030e6:	2157      	movs	r1, #87	@ 0x57
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f7ff fd12 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(88, 27, 0xFA42);
 80030ee:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80030f2:	221b      	movs	r2, #27
 80030f4:	2158      	movs	r1, #88	@ 0x58
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7ff fd0b 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(89, 27, 0xFA42);
 80030fc:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003100:	221b      	movs	r2, #27
 8003102:	2159      	movs	r1, #89	@ 0x59
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff fd04 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(90, 27, 0xFA42);
 800310a:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800310e:	221b      	movs	r2, #27
 8003110:	215a      	movs	r1, #90	@ 0x5a
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f7ff fcfd 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(91, 27, 0xFA42);
 8003118:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800311c:	221b      	movs	r2, #27
 800311e:	215b      	movs	r1, #91	@ 0x5b
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff fcf6 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(92, 27, 0xFA42);
 8003126:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800312a:	221b      	movs	r2, #27
 800312c:	215c      	movs	r1, #92	@ 0x5c
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7ff fcef 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(93, 27, 0xFA42);
 8003134:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003138:	221b      	movs	r2, #27
 800313a:	215d      	movs	r1, #93	@ 0x5d
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7ff fce8 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(85, 28, 0xFA42);
 8003142:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003146:	221c      	movs	r2, #28
 8003148:	2155      	movs	r1, #85	@ 0x55
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff fce1 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(86, 28, 0x8962);
 8003150:	f648 1362 	movw	r3, #35170	@ 0x8962
 8003154:	221c      	movs	r2, #28
 8003156:	2156      	movs	r1, #86	@ 0x56
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f7ff fcda 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(87, 28, 0x8962);
 800315e:	f648 1362 	movw	r3, #35170	@ 0x8962
 8003162:	221c      	movs	r2, #28
 8003164:	2157      	movs	r1, #87	@ 0x57
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff fcd3 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(89, 28, 0xFA42);
 800316c:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003170:	221c      	movs	r2, #28
 8003172:	2159      	movs	r1, #89	@ 0x59
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f7ff fccc 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(90, 28, 0xFA42);
 800317a:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800317e:	221c      	movs	r2, #28
 8003180:	215a      	movs	r1, #90	@ 0x5a
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff fcc5 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(92, 28, 0xFA42);
 8003188:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800318c:	221c      	movs	r2, #28
 800318e:	215c      	movs	r1, #92	@ 0x5c
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff fcbe 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(93, 28, 0xFA42);
 8003196:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800319a:	221c      	movs	r2, #28
 800319c:	215d      	movs	r1, #93	@ 0x5d
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f7ff fcb7 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(94, 28, 0xFA42);
 80031a4:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80031a8:	221c      	movs	r2, #28
 80031aa:	215e      	movs	r1, #94	@ 0x5e
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f7ff fcb0 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(85, 29, 0xFA42);
 80031b2:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80031b6:	221d      	movs	r2, #29
 80031b8:	2155      	movs	r1, #85	@ 0x55
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff fca9 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(89, 29, 0xFA42);
 80031c0:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80031c4:	221d      	movs	r2, #29
 80031c6:	2159      	movs	r1, #89	@ 0x59
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f7ff fca2 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(93, 29, 0xFA42);
 80031ce:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80031d2:	221d      	movs	r2, #29
 80031d4:	215d      	movs	r1, #93	@ 0x5d
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff fc9b 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(94, 29, 0xFA42);
 80031dc:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80031e0:	221d      	movs	r2, #29
 80031e2:	215e      	movs	r1, #94	@ 0x5e
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f7ff fc94 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(85, 30, 0x8962);
 80031ea:	f648 1362 	movw	r3, #35170	@ 0x8962
 80031ee:	221e      	movs	r2, #30
 80031f0:	2155      	movs	r1, #85	@ 0x55
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7ff fc8d 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(93, 30, 0xFA42);
 80031f8:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80031fc:	221e      	movs	r2, #30
 80031fe:	215d      	movs	r1, #93	@ 0x5d
 8003200:	e004      	b.n	800320c <_ZN9WaveShare10showScreenE6Screenh+0x3e4>
 8003202:	bf00      	nop
 8003204:	0800b1d4 	.word	0x0800b1d4
 8003208:	0800b1dc 	.word	0x0800b1dc
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff fc80 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(94, 30, 0xFA42);
 8003212:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003216:	221e      	movs	r2, #30
 8003218:	215e      	movs	r1, #94	@ 0x5e
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7ff fc79 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(85, 31, 0x8962);
 8003220:	f648 1362 	movw	r3, #35170	@ 0x8962
 8003224:	221f      	movs	r2, #31
 8003226:	2155      	movs	r1, #85	@ 0x55
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f7ff fc72 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(93, 31, 0xFA42);
 800322e:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003232:	221f      	movs	r2, #31
 8003234:	215d      	movs	r1, #93	@ 0x5d
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f7ff fc6b 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(94, 31, 0xFA42);
 800323c:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003240:	221f      	movs	r2, #31
 8003242:	215e      	movs	r1, #94	@ 0x5e
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff fc64 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(85, 32, 0x8962);
 800324a:	f648 1362 	movw	r3, #35170	@ 0x8962
 800324e:	2220      	movs	r2, #32
 8003250:	2155      	movs	r1, #85	@ 0x55
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff fc5d 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(93, 32, 0xFA42);
 8003258:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800325c:	2220      	movs	r2, #32
 800325e:	215d      	movs	r1, #93	@ 0x5d
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f7ff fc56 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(94, 32, 0xFA42);
 8003266:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800326a:	2220      	movs	r2, #32
 800326c:	215e      	movs	r1, #94	@ 0x5e
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f7ff fc4f 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(85, 33, 0x8962);
 8003274:	f648 1362 	movw	r3, #35170	@ 0x8962
 8003278:	2221      	movs	r2, #33	@ 0x21
 800327a:	2155      	movs	r1, #85	@ 0x55
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7ff fc48 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(93, 33, 0xFA42);
 8003282:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003286:	2221      	movs	r2, #33	@ 0x21
 8003288:	215d      	movs	r1, #93	@ 0x5d
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7ff fc41 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(94, 33, 0xFA42);
 8003290:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003294:	2221      	movs	r2, #33	@ 0x21
 8003296:	215e      	movs	r1, #94	@ 0x5e
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7ff fc3a 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(84, 34, 0xFA42);
 800329e:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80032a2:	2222      	movs	r2, #34	@ 0x22
 80032a4:	2154      	movs	r1, #84	@ 0x54
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7ff fc33 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(85, 34, 0x8962);
 80032ac:	f648 1362 	movw	r3, #35170	@ 0x8962
 80032b0:	2222      	movs	r2, #34	@ 0x22
 80032b2:	2155      	movs	r1, #85	@ 0x55
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f7ff fc2c 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(86, 34, 0xFA42);
 80032ba:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80032be:	2222      	movs	r2, #34	@ 0x22
 80032c0:	2156      	movs	r1, #86	@ 0x56
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f7ff fc25 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(92, 34, 0xFA42);
 80032c8:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80032cc:	2222      	movs	r2, #34	@ 0x22
 80032ce:	215c      	movs	r1, #92	@ 0x5c
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff fc1e 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(93, 34, 0xFA42);
 80032d6:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80032da:	2222      	movs	r2, #34	@ 0x22
 80032dc:	215d      	movs	r1, #93	@ 0x5d
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff fc17 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(94, 34, 0xFA42);
 80032e4:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80032e8:	2222      	movs	r2, #34	@ 0x22
 80032ea:	215e      	movs	r1, #94	@ 0x5e
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f7ff fc10 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(85, 35, 0x8962);
 80032f2:	f648 1362 	movw	r3, #35170	@ 0x8962
 80032f6:	2223      	movs	r2, #35	@ 0x23
 80032f8:	2155      	movs	r1, #85	@ 0x55
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7ff fc09 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(86, 35, 0xFA42);
 8003300:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003304:	2223      	movs	r2, #35	@ 0x23
 8003306:	2156      	movs	r1, #86	@ 0x56
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	f7ff fc02 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(87, 35, 0xFA42);
 800330e:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003312:	2223      	movs	r2, #35	@ 0x23
 8003314:	2157      	movs	r1, #87	@ 0x57
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f7ff fbfb 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(88, 35, 0x8962);
 800331c:	f648 1362 	movw	r3, #35170	@ 0x8962
 8003320:	2223      	movs	r2, #35	@ 0x23
 8003322:	2158      	movs	r1, #88	@ 0x58
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff fbf4 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(89, 35, 0xFA42);
 800332a:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800332e:	2223      	movs	r2, #35	@ 0x23
 8003330:	2159      	movs	r1, #89	@ 0x59
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff fbed 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(90, 35, 0x8962);
 8003338:	f648 1362 	movw	r3, #35170	@ 0x8962
 800333c:	2223      	movs	r2, #35	@ 0x23
 800333e:	215a      	movs	r1, #90	@ 0x5a
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	f7ff fbe6 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(91, 35, 0xFA42);
 8003346:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800334a:	2223      	movs	r2, #35	@ 0x23
 800334c:	215b      	movs	r1, #91	@ 0x5b
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff fbdf 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(92, 35, 0xFA42);
 8003354:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003358:	2223      	movs	r2, #35	@ 0x23
 800335a:	215c      	movs	r1, #92	@ 0x5c
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f7ff fbd8 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(93, 35, 0xFA42);
 8003362:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003366:	2223      	movs	r2, #35	@ 0x23
 8003368:	215d      	movs	r1, #93	@ 0x5d
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f7ff fbd1 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(94, 35, 0xFA42);
 8003370:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003374:	2223      	movs	r2, #35	@ 0x23
 8003376:	215e      	movs	r1, #94	@ 0x5e
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f7ff fbca 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(85, 36, 0x8962);
 800337e:	f648 1362 	movw	r3, #35170	@ 0x8962
 8003382:	2224      	movs	r2, #36	@ 0x24
 8003384:	2155      	movs	r1, #85	@ 0x55
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7ff fbc3 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(87, 36, 0xFA42);
 800338c:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003390:	2224      	movs	r2, #36	@ 0x24
 8003392:	2157      	movs	r1, #87	@ 0x57
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff fbbc 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(88, 36, 0xFA42);
 800339a:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800339e:	2224      	movs	r2, #36	@ 0x24
 80033a0:	2158      	movs	r1, #88	@ 0x58
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7ff fbb5 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(89, 36, 0xFA42);
 80033a8:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80033ac:	2224      	movs	r2, #36	@ 0x24
 80033ae:	2159      	movs	r1, #89	@ 0x59
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff fbae 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(90, 36, 0xFA42);
 80033b6:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80033ba:	2224      	movs	r2, #36	@ 0x24
 80033bc:	215a      	movs	r1, #90	@ 0x5a
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff fba7 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(91, 36, 0x8962);
 80033c4:	f648 1362 	movw	r3, #35170	@ 0x8962
 80033c8:	2224      	movs	r2, #36	@ 0x24
 80033ca:	215b      	movs	r1, #91	@ 0x5b
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f7ff fba0 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(94, 36, 0xFA42);
 80033d2:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80033d6:	2224      	movs	r2, #36	@ 0x24
 80033d8:	215e      	movs	r1, #94	@ 0x5e
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff fb99 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(85, 37, 0x8962);
 80033e0:	f648 1362 	movw	r3, #35170	@ 0x8962
 80033e4:	2225      	movs	r2, #37	@ 0x25
 80033e6:	2155      	movs	r1, #85	@ 0x55
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f7ff fb92 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(90, 37, 0xFA42);
 80033ee:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80033f2:	2225      	movs	r2, #37	@ 0x25
 80033f4:	215a      	movs	r1, #90	@ 0x5a
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f7ff fb8b 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(91, 37, 0xFA42);
 80033fc:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003400:	2225      	movs	r2, #37	@ 0x25
 8003402:	215b      	movs	r1, #91	@ 0x5b
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7ff fb84 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(94, 37, 0xFA42);
 800340a:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800340e:	2225      	movs	r2, #37	@ 0x25
 8003410:	215e      	movs	r1, #94	@ 0x5e
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff fb7d 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(85, 38, 0x8962);
 8003418:	f648 1362 	movw	r3, #35170	@ 0x8962
 800341c:	2226      	movs	r2, #38	@ 0x26
 800341e:	2155      	movs	r1, #85	@ 0x55
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff fb76 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(91, 38, 0xFA42);
 8003426:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800342a:	2226      	movs	r2, #38	@ 0x26
 800342c:	215b      	movs	r1, #91	@ 0x5b
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff fb6f 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(85, 39, 0x8962);
 8003434:	f648 1362 	movw	r3, #35170	@ 0x8962
 8003438:	2227      	movs	r2, #39	@ 0x27
 800343a:	2155      	movs	r1, #85	@ 0x55
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff fb68 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(85, 40, 0x8962);
 8003442:	f648 1362 	movw	r3, #35170	@ 0x8962
 8003446:	2228      	movs	r2, #40	@ 0x28
 8003448:	2155      	movs	r1, #85	@ 0x55
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f7ff fb61 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(86, 40, 0xFA42);
 8003450:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003454:	2228      	movs	r2, #40	@ 0x28
 8003456:	2156      	movs	r1, #86	@ 0x56
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f7ff fb5a 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(87, 40, 0xFA42);
 800345e:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003462:	2228      	movs	r2, #40	@ 0x28
 8003464:	2157      	movs	r1, #87	@ 0x57
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f7ff fb53 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(88, 40, 0xFA42);
 800346c:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003470:	2228      	movs	r2, #40	@ 0x28
 8003472:	2158      	movs	r1, #88	@ 0x58
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7ff fb4c 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(87, 41, 0xFA42);
 800347a:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800347e:	2229      	movs	r2, #41	@ 0x29
 8003480:	2157      	movs	r1, #87	@ 0x57
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7ff fb45 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(88, 41, 0xFA42);
 8003488:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800348c:	2229      	movs	r2, #41	@ 0x29
 800348e:	2158      	movs	r1, #88	@ 0x58
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff fb3e 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(87, 42, 0xFA42);
 8003496:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800349a:	222a      	movs	r2, #42	@ 0x2a
 800349c:	2157      	movs	r1, #87	@ 0x57
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff fb37 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(94, 42, 0xFA42);
 80034a4:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80034a8:	222a      	movs	r2, #42	@ 0x2a
 80034aa:	215e      	movs	r1, #94	@ 0x5e
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7ff fb30 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(88, 43, 0xFA42);
 80034b2:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80034b6:	222b      	movs	r2, #43	@ 0x2b
 80034b8:	2158      	movs	r1, #88	@ 0x58
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff fb29 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(88, 46, 0x8962);
 80034c0:	f648 1362 	movw	r3, #35170	@ 0x8962
 80034c4:	222e      	movs	r2, #46	@ 0x2e
 80034c6:	2158      	movs	r1, #88	@ 0x58
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f7ff fb22 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(88, 49, 0xFA42);
 80034ce:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80034d2:	2231      	movs	r2, #49	@ 0x31
 80034d4:	2158      	movs	r1, #88	@ 0x58
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff fb1b 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(93, 48, 0x8962);
 80034dc:	f648 1362 	movw	r3, #35170	@ 0x8962
 80034e0:	2230      	movs	r2, #48	@ 0x30
 80034e2:	215d      	movs	r1, #93	@ 0x5d
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff fb14 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(95, 48, 0x8962);
 80034ea:	f648 1362 	movw	r3, #35170	@ 0x8962
 80034ee:	2230      	movs	r2, #48	@ 0x30
 80034f0:	215f      	movs	r1, #95	@ 0x5f
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff fb0d 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(88, 49, 0x8962);
 80034f8:	f648 1362 	movw	r3, #35170	@ 0x8962
 80034fc:	2231      	movs	r2, #49	@ 0x31
 80034fe:	2158      	movs	r1, #88	@ 0x58
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7ff fb06 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(89, 49, 0xFA42);
 8003506:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800350a:	2231      	movs	r2, #49	@ 0x31
 800350c:	2159      	movs	r1, #89	@ 0x59
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff faff 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(94, 49, 0x8962);
 8003514:	f648 1362 	movw	r3, #35170	@ 0x8962
 8003518:	2231      	movs	r2, #49	@ 0x31
 800351a:	215e      	movs	r1, #94	@ 0x5e
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff faf8 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(87, 50, 0xFA42);
 8003522:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003526:	2232      	movs	r2, #50	@ 0x32
 8003528:	2157      	movs	r1, #87	@ 0x57
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff faf1 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(88, 50, 0xFA42);
 8003530:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003534:	2232      	movs	r2, #50	@ 0x32
 8003536:	2158      	movs	r1, #88	@ 0x58
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7ff faea 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(89, 50, 0x8962);
 800353e:	f648 1362 	movw	r3, #35170	@ 0x8962
 8003542:	2232      	movs	r2, #50	@ 0x32
 8003544:	2159      	movs	r1, #89	@ 0x59
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff fae3 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(90, 50, 0xFA42);
 800354c:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003550:	2232      	movs	r2, #50	@ 0x32
 8003552:	215a      	movs	r1, #90	@ 0x5a
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff fadc 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(91, 50, 0xFA42);
 800355a:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800355e:	2232      	movs	r2, #50	@ 0x32
 8003560:	215b      	movs	r1, #91	@ 0x5b
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7ff fad5 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(92, 50, 0xFA42);
 8003568:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800356c:	2232      	movs	r2, #50	@ 0x32
 800356e:	215c      	movs	r1, #92	@ 0x5c
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff face 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(93, 50, 0xFA42);
 8003576:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800357a:	2232      	movs	r2, #50	@ 0x32
 800357c:	215d      	movs	r1, #93	@ 0x5d
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff fac7 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(94, 50, 0xFA42);
 8003584:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003588:	2232      	movs	r2, #50	@ 0x32
 800358a:	215e      	movs	r1, #94	@ 0x5e
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff fac0 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(87, 51, 0xFA42);
 8003592:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003596:	2233      	movs	r2, #51	@ 0x33
 8003598:	2157      	movs	r1, #87	@ 0x57
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff fab9 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(88, 51, 0xFA42);
 80035a0:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80035a4:	2233      	movs	r2, #51	@ 0x33
 80035a6:	2158      	movs	r1, #88	@ 0x58
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7ff fab2 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(89, 51, 0xFA42);
 80035ae:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80035b2:	2233      	movs	r2, #51	@ 0x33
 80035b4:	2159      	movs	r1, #89	@ 0x59
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff faab 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(90, 51, 0xFA42);
 80035bc:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80035c0:	2233      	movs	r2, #51	@ 0x33
 80035c2:	215a      	movs	r1, #90	@ 0x5a
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff faa4 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(91, 51, 0xFA42);
 80035ca:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80035ce:	2233      	movs	r2, #51	@ 0x33
 80035d0:	215b      	movs	r1, #91	@ 0x5b
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff fa9d 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(92, 51, 0xFA42);
 80035d8:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80035dc:	2233      	movs	r2, #51	@ 0x33
 80035de:	215c      	movs	r1, #92	@ 0x5c
 80035e0:	6878      	ldr	r0, [r7, #4]
 80035e2:	f7ff fa96 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(93, 51, 0xFA42);
 80035e6:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80035ea:	2233      	movs	r2, #51	@ 0x33
 80035ec:	215d      	movs	r1, #93	@ 0x5d
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7ff fa8f 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(94, 51, 0xFA42);
 80035f4:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80035f8:	2233      	movs	r2, #51	@ 0x33
 80035fa:	215e      	movs	r1, #94	@ 0x5e
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff fa88 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(95, 51, 0xFA42);
 8003602:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003606:	2233      	movs	r2, #51	@ 0x33
 8003608:	215f      	movs	r1, #95	@ 0x5f
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff fa81 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(87, 52, 0xFA42);
 8003610:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003614:	2234      	movs	r2, #52	@ 0x34
 8003616:	2157      	movs	r1, #87	@ 0x57
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7ff fa7a 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(88, 52, 0xFA42);
 800361e:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003622:	2234      	movs	r2, #52	@ 0x34
 8003624:	2158      	movs	r1, #88	@ 0x58
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff fa73 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(92, 52, 0xFA42);
 800362c:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003630:	2234      	movs	r2, #52	@ 0x34
 8003632:	215c      	movs	r1, #92	@ 0x5c
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff fa6c 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(93, 52, 0xFA42);
 800363a:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800363e:	2234      	movs	r2, #52	@ 0x34
 8003640:	215d      	movs	r1, #93	@ 0x5d
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7ff fa65 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(94, 52, 0xFA42);
 8003648:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800364c:	2234      	movs	r2, #52	@ 0x34
 800364e:	215e      	movs	r1, #94	@ 0x5e
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff fa5e 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(95, 52, 0xFA42);
 8003656:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800365a:	2234      	movs	r2, #52	@ 0x34
 800365c:	215f      	movs	r1, #95	@ 0x5f
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f7ff fa57 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(88, 53, 0xFA42);
 8003664:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003668:	2235      	movs	r2, #53	@ 0x35
 800366a:	2158      	movs	r1, #88	@ 0x58
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff fa50 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(93, 53, 0xFA42);
 8003672:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003676:	2235      	movs	r2, #53	@ 0x35
 8003678:	215d      	movs	r1, #93	@ 0x5d
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7ff fa49 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(94, 53, 0xFA42);
 8003680:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003684:	2235      	movs	r2, #53	@ 0x35
 8003686:	215e      	movs	r1, #94	@ 0x5e
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7ff fa42 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(95, 53, 0xFA42);
 800368e:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003692:	2235      	movs	r2, #53	@ 0x35
 8003694:	215f      	movs	r1, #95	@ 0x5f
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f7ff fa3b 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(96, 53, 0xFA42);
 800369c:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80036a0:	2235      	movs	r2, #53	@ 0x35
 80036a2:	2160      	movs	r1, #96	@ 0x60
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff fa34 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(88, 54, 0xFA42);
 80036aa:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80036ae:	2236      	movs	r2, #54	@ 0x36
 80036b0:	2158      	movs	r1, #88	@ 0x58
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff fa2d 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(93, 54, 0xFA42);
 80036b8:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80036bc:	2236      	movs	r2, #54	@ 0x36
 80036be:	215d      	movs	r1, #93	@ 0x5d
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f7ff fa26 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(94, 54, 0x8962);
 80036c6:	f648 1362 	movw	r3, #35170	@ 0x8962
 80036ca:	2236      	movs	r2, #54	@ 0x36
 80036cc:	215e      	movs	r1, #94	@ 0x5e
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff fa1f 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(96, 54, 0xFA42);
 80036d4:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80036d8:	2236      	movs	r2, #54	@ 0x36
 80036da:	2160      	movs	r1, #96	@ 0x60
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff fa18 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(97, 54, 0xFA42);
 80036e2:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80036e6:	2236      	movs	r2, #54	@ 0x36
 80036e8:	2161      	movs	r1, #97	@ 0x61
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff fa11 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(89, 55, 0xFA42);
 80036f0:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80036f4:	2237      	movs	r2, #55	@ 0x37
 80036f6:	2159      	movs	r1, #89	@ 0x59
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f7ff fa0a 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(93, 55, 0x8962);
 80036fe:	f648 1362 	movw	r3, #35170	@ 0x8962
 8003702:	2237      	movs	r2, #55	@ 0x37
 8003704:	215d      	movs	r1, #93	@ 0x5d
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f7ff fa03 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(94, 55, 0xFA42);
 800370c:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003710:	2237      	movs	r2, #55	@ 0x37
 8003712:	215e      	movs	r1, #94	@ 0x5e
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7ff f9fc 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(97, 55, 0xFA42);
 800371a:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800371e:	2237      	movs	r2, #55	@ 0x37
 8003720:	2161      	movs	r1, #97	@ 0x61
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f7ff f9f5 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(88, 56, 0xFA42);
 8003728:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800372c:	2238      	movs	r2, #56	@ 0x38
 800372e:	2158      	movs	r1, #88	@ 0x58
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7ff f9ee 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(89, 56, 0xFA42);
 8003736:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800373a:	2238      	movs	r2, #56	@ 0x38
 800373c:	2159      	movs	r1, #89	@ 0x59
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff f9e7 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(93, 56, 0xFA42);
 8003744:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003748:	2238      	movs	r2, #56	@ 0x38
 800374a:	215d      	movs	r1, #93	@ 0x5d
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff f9e0 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(94, 56, 0xFA42);
 8003752:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003756:	2238      	movs	r2, #56	@ 0x38
 8003758:	215e      	movs	r1, #94	@ 0x5e
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f7ff f9d9 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(88, 57, 0xFA42);
 8003760:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003764:	2239      	movs	r2, #57	@ 0x39
 8003766:	2158      	movs	r1, #88	@ 0x58
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff f9d2 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(93, 57, 0xFA42);
 800376e:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003772:	2239      	movs	r2, #57	@ 0x39
 8003774:	215d      	movs	r1, #93	@ 0x5d
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff f9cb 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(94, 57, 0xFA42);
 800377c:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003780:	2239      	movs	r2, #57	@ 0x39
 8003782:	215e      	movs	r1, #94	@ 0x5e
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f7ff f9c4 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(97, 57, 0xFA42);
 800378a:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800378e:	2239      	movs	r2, #57	@ 0x39
 8003790:	2161      	movs	r1, #97	@ 0x61
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7ff f9bd 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(88, 58, 0xFA42);
 8003798:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800379c:	223a      	movs	r2, #58	@ 0x3a
 800379e:	2158      	movs	r1, #88	@ 0x58
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff f9b6 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(92, 58, 0xFA42);
 80037a6:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80037aa:	223a      	movs	r2, #58	@ 0x3a
 80037ac:	215c      	movs	r1, #92	@ 0x5c
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f7ff f9af 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(93, 58, 0xFA42);
 80037b4:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80037b8:	223a      	movs	r2, #58	@ 0x3a
 80037ba:	215d      	movs	r1, #93	@ 0x5d
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f7ff f9a8 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(88, 59, 0xFA42);
 80037c2:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80037c6:	223b      	movs	r2, #59	@ 0x3b
 80037c8:	2158      	movs	r1, #88	@ 0x58
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7ff f9a1 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(89, 59, 0xFA42);
 80037d0:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80037d4:	223b      	movs	r2, #59	@ 0x3b
 80037d6:	2159      	movs	r1, #89	@ 0x59
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff f99a 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(90, 59, 0xFA42);
 80037de:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80037e2:	223b      	movs	r2, #59	@ 0x3b
 80037e4:	215a      	movs	r1, #90	@ 0x5a
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff f993 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(91, 59, 0xFA42);
 80037ec:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80037f0:	223b      	movs	r2, #59	@ 0x3b
 80037f2:	215b      	movs	r1, #91	@ 0x5b
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff f98c 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(92, 59, 0x8962);
 80037fa:	f648 1362 	movw	r3, #35170	@ 0x8962
 80037fe:	223b      	movs	r2, #59	@ 0x3b
 8003800:	215c      	movs	r1, #92	@ 0x5c
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7ff f985 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(93, 59, 0xFA42);
 8003808:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800380c:	223b      	movs	r2, #59	@ 0x3b
 800380e:	215d      	movs	r1, #93	@ 0x5d
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff f97e 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(88, 60, 0x8962);
 8003816:	f648 1362 	movw	r3, #35170	@ 0x8962
 800381a:	223c      	movs	r2, #60	@ 0x3c
 800381c:	2158      	movs	r1, #88	@ 0x58
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff f977 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(89, 60, 0xFA42);
 8003824:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003828:	223c      	movs	r2, #60	@ 0x3c
 800382a:	2159      	movs	r1, #89	@ 0x59
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7ff f970 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(90, 60, 0x8962);
 8003832:	f648 1362 	movw	r3, #35170	@ 0x8962
 8003836:	223c      	movs	r2, #60	@ 0x3c
 8003838:	215a      	movs	r1, #90	@ 0x5a
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7ff f969 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(91, 60, 0x8962);
 8003840:	f648 1362 	movw	r3, #35170	@ 0x8962
 8003844:	223c      	movs	r2, #60	@ 0x3c
 8003846:	215b      	movs	r1, #91	@ 0x5b
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f7ff f962 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(97, 61, 0xFA42);
 800384e:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003852:	223d      	movs	r2, #61	@ 0x3d
 8003854:	2161      	movs	r1, #97	@ 0x61
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7ff f95b 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(87, 62, 0xFA42);
 800385c:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003860:	223e      	movs	r2, #62	@ 0x3e
 8003862:	2157      	movs	r1, #87	@ 0x57
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7ff f954 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(88, 62, 0x8962);
 800386a:	f648 1362 	movw	r3, #35170	@ 0x8962
 800386e:	223e      	movs	r2, #62	@ 0x3e
 8003870:	2158      	movs	r1, #88	@ 0x58
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff f94d 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(87, 63, 0xFA42);
 8003878:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 800387c:	223f      	movs	r2, #63	@ 0x3f
 800387e:	2157      	movs	r1, #87	@ 0x57
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff f946 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(88, 63, 0x8962);
 8003886:	f648 1362 	movw	r3, #35170	@ 0x8962
 800388a:	223f      	movs	r2, #63	@ 0x3f
 800388c:	2158      	movs	r1, #88	@ 0x58
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7ff f93f 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(97, 63, 0xFA42);
 8003894:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 8003898:	223f      	movs	r2, #63	@ 0x3f
 800389a:	2161      	movs	r1, #97	@ 0x61
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f7ff f938 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(87, 64, 0xFA42);
 80038a2:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80038a6:	2240      	movs	r2, #64	@ 0x40
 80038a8:	2157      	movs	r1, #87	@ 0x57
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7ff f931 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(88, 64, 0x8962);
 80038b0:	f648 1362 	movw	r3, #35170	@ 0x8962
 80038b4:	2240      	movs	r2, #64	@ 0x40
 80038b6:	2158      	movs	r1, #88	@ 0x58
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f7ff f92a 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(88, 64, 0xFA42);
 80038be:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80038c2:	2240      	movs	r2, #64	@ 0x40
 80038c4:	2158      	movs	r1, #88	@ 0x58
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff f923 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(88, 65, 0x8962);
 80038cc:	f648 1362 	movw	r3, #35170	@ 0x8962
 80038d0:	2241      	movs	r2, #65	@ 0x41
 80038d2:	2158      	movs	r1, #88	@ 0x58
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7ff f91c 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(88, 66, 0xFA42);
 80038da:	f64f 2342 	movw	r3, #64066	@ 0xfa42
 80038de:	2242      	movs	r2, #66	@ 0x42
 80038e0:	2158      	movs	r1, #88	@ 0x58
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff f915 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(88, 67, 0x8962);
 80038e8:	f648 1362 	movw	r3, #35170	@ 0x8962
 80038ec:	2243      	movs	r2, #67	@ 0x43
 80038ee:	2158      	movs	r1, #88	@ 0x58
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff f90e 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			drawString(10, 98, "MH", 0xFFFF, FONT16);
 80038f6:	2301      	movs	r3, #1
 80038f8:	9301      	str	r3, [sp, #4]
 80038fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	4bae      	ldr	r3, [pc, #696]	@ (8003bbc <_ZN9WaveShare10showScreenE6Screenh+0xd94>)
 8003902:	2262      	movs	r2, #98	@ 0x62
 8003904:	210a      	movs	r1, #10
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff f926 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
			drawString(64, 98, "PB", 0xFFFF, FONT16);
 800390c:	2301      	movs	r3, #1
 800390e:	9301      	str	r3, [sp, #4]
 8003910:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	4baa      	ldr	r3, [pc, #680]	@ (8003bc0 <_ZN9WaveShare10showScreenE6Screenh+0xd98>)
 8003918:	2262      	movs	r2, #98	@ 0x62
 800391a:	2140      	movs	r1, #64	@ 0x40
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff f91b 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
			drawString(118, 98, "LM", 0xFFFF, FONT16);
 8003922:	2301      	movs	r3, #1
 8003924:	9301      	str	r3, [sp, #4]
 8003926:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	4ba5      	ldr	r3, [pc, #660]	@ (8003bc4 <_ZN9WaveShare10showScreenE6Screenh+0xd9c>)
 800392e:	2262      	movs	r2, #98	@ 0x62
 8003930:	2176      	movs	r1, #118	@ 0x76
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff f910 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>

			break;
 8003938:	f000 bde7 	b.w	800450a <_ZN9WaveShare10showScreenE6Screenh+0x16e2>
		case SpeedScreen:
		{
			// I'm trying out a static int to check if I should render the frame again
			static uint8_t currentSpeed = 10;

			if((CurrentDisplayedScreen == SpeedScreen) & (speed == currentSpeed))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8003942:	2b01      	cmp	r3, #1
 8003944:	bf0c      	ite	eq
 8003946:	2301      	moveq	r3, #1
 8003948:	2300      	movne	r3, #0
 800394a:	b2da      	uxtb	r2, r3
 800394c:	4b9e      	ldr	r3, [pc, #632]	@ (8003bc8 <_ZN9WaveShare10showScreenE6Screenh+0xda0>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	78b9      	ldrb	r1, [r7, #2]
 8003952:	4299      	cmp	r1, r3
 8003954:	bf0c      	ite	eq
 8003956:	2301      	moveq	r3, #1
 8003958:	2300      	movne	r3, #0
 800395a:	b2db      	uxtb	r3, r3
 800395c:	4013      	ands	r3, r2
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b00      	cmp	r3, #0
 8003962:	f040 85b9 	bne.w	80044d8 <_ZN9WaveShare10showScreenE6Screenh+0x16b0>
				break;

			CurrentDisplayedScreen = SpeedScreen;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0

			fillScreen(0x0000);
 800396e:	2100      	movs	r1, #0
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f7ff f8a4 	bl	8002abe <_ZN9WaveShare10fillScreenEt>
			drawString(55, 5, "Set", 0xFFFF, FONT24);
 8003976:	2300      	movs	r3, #0
 8003978:	9301      	str	r3, [sp, #4]
 800397a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800397e:	9300      	str	r3, [sp, #0]
 8003980:	4b92      	ldr	r3, [pc, #584]	@ (8003bcc <_ZN9WaveShare10showScreenE6Screenh+0xda4>)
 8003982:	2205      	movs	r2, #5
 8003984:	2137      	movs	r1, #55	@ 0x37
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f7ff f8e6 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
			drawString(43, 22, "Speed", 0xFFFF, FONT24);
 800398c:	2300      	movs	r3, #0
 800398e:	9301      	str	r3, [sp, #4]
 8003990:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	4b8e      	ldr	r3, [pc, #568]	@ (8003bd0 <_ZN9WaveShare10showScreenE6Screenh+0xda8>)
 8003998:	2216      	movs	r2, #22
 800399a:	212b      	movs	r1, #43	@ 0x2b
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	f7ff f8db 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>

			// uint8_t speed sets the speed, so display current speed

			if(speed == 0)
 80039a2:	78bb      	ldrb	r3, [r7, #2]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d12c      	bne.n	8003a02 <_ZN9WaveShare10showScreenE6Screenh+0xbda>
			{
				drawLine(5, 70, 20, 70, 0x001F);
 80039a8:	231f      	movs	r3, #31
 80039aa:	9301      	str	r3, [sp, #4]
 80039ac:	2346      	movs	r3, #70	@ 0x46
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	2314      	movs	r3, #20
 80039b2:	2246      	movs	r2, #70	@ 0x46
 80039b4:	2105      	movs	r1, #5
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7ff f9c8 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
				drawLine(5, 71, 20, 71, 0x001F);
 80039bc:	231f      	movs	r3, #31
 80039be:	9301      	str	r3, [sp, #4]
 80039c0:	2347      	movs	r3, #71	@ 0x47
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	2314      	movs	r3, #20
 80039c6:	2247      	movs	r2, #71	@ 0x47
 80039c8:	2105      	movs	r1, #5
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7ff f9be 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
				drawLine(5, 72, 20, 72, 0x001F);
 80039d0:	231f      	movs	r3, #31
 80039d2:	9301      	str	r3, [sp, #4]
 80039d4:	2348      	movs	r3, #72	@ 0x48
 80039d6:	9300      	str	r3, [sp, #0]
 80039d8:	2314      	movs	r3, #20
 80039da:	2248      	movs	r2, #72	@ 0x48
 80039dc:	2105      	movs	r1, #5
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff f9b4 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
				drawLine(5, 73, 20, 73, 0x001F);
 80039e4:	231f      	movs	r3, #31
 80039e6:	9301      	str	r3, [sp, #4]
 80039e8:	2349      	movs	r3, #73	@ 0x49
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	2314      	movs	r3, #20
 80039ee:	2249      	movs	r2, #73	@ 0x49
 80039f0:	2105      	movs	r1, #5
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f7ff f9aa 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
				currentSpeed = 0;
 80039f8:	4b73      	ldr	r3, [pc, #460]	@ (8003bc8 <_ZN9WaveShare10showScreenE6Screenh+0xda0>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	701a      	strb	r2, [r3, #0]
				drawLine(5, 72, 145, 72, 0x07E0);
				drawLine(5, 73, 145, 73, 0x07E0);
				currentSpeed = 2;
			}

			break;
 80039fe:	f000 bd6d 	b.w	80044dc <_ZN9WaveShare10showScreenE6Screenh+0x16b4>
			else if (speed == 1)
 8003a02:	78bb      	ldrb	r3, [r7, #2]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d130      	bne.n	8003a6a <_ZN9WaveShare10showScreenE6Screenh+0xc42>
				drawLine(5, 70, 85, 70, 0x07FF);
 8003a08:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003a0c:	9301      	str	r3, [sp, #4]
 8003a0e:	2346      	movs	r3, #70	@ 0x46
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	2355      	movs	r3, #85	@ 0x55
 8003a14:	2246      	movs	r2, #70	@ 0x46
 8003a16:	2105      	movs	r1, #5
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f7ff f997 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
				drawLine(5, 71, 85, 71, 0x07FF);
 8003a1e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003a22:	9301      	str	r3, [sp, #4]
 8003a24:	2347      	movs	r3, #71	@ 0x47
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	2355      	movs	r3, #85	@ 0x55
 8003a2a:	2247      	movs	r2, #71	@ 0x47
 8003a2c:	2105      	movs	r1, #5
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f7ff f98c 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
				drawLine(5, 72, 85, 72, 0x07FF);
 8003a34:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003a38:	9301      	str	r3, [sp, #4]
 8003a3a:	2348      	movs	r3, #72	@ 0x48
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	2355      	movs	r3, #85	@ 0x55
 8003a40:	2248      	movs	r2, #72	@ 0x48
 8003a42:	2105      	movs	r1, #5
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f7ff f981 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
				drawLine(5, 73, 85, 73, 0x07FF);
 8003a4a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8003a4e:	9301      	str	r3, [sp, #4]
 8003a50:	2349      	movs	r3, #73	@ 0x49
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	2355      	movs	r3, #85	@ 0x55
 8003a56:	2249      	movs	r2, #73	@ 0x49
 8003a58:	2105      	movs	r1, #5
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff f976 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
				currentSpeed = 1;
 8003a60:	4b59      	ldr	r3, [pc, #356]	@ (8003bc8 <_ZN9WaveShare10showScreenE6Screenh+0xda0>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	701a      	strb	r2, [r3, #0]
			break;
 8003a66:	f000 bd39 	b.w	80044dc <_ZN9WaveShare10showScreenE6Screenh+0x16b4>
			else if (speed == 2)
 8003a6a:	78bb      	ldrb	r3, [r7, #2]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	f040 8535 	bne.w	80044dc <_ZN9WaveShare10showScreenE6Screenh+0x16b4>
				drawLine(5, 70, 145, 70, 0x07E0);
 8003a72:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003a76:	9301      	str	r3, [sp, #4]
 8003a78:	2346      	movs	r3, #70	@ 0x46
 8003a7a:	9300      	str	r3, [sp, #0]
 8003a7c:	2391      	movs	r3, #145	@ 0x91
 8003a7e:	2246      	movs	r2, #70	@ 0x46
 8003a80:	2105      	movs	r1, #5
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff f962 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
				drawLine(5, 71, 145, 71, 0x07E0);
 8003a88:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003a8c:	9301      	str	r3, [sp, #4]
 8003a8e:	2347      	movs	r3, #71	@ 0x47
 8003a90:	9300      	str	r3, [sp, #0]
 8003a92:	2391      	movs	r3, #145	@ 0x91
 8003a94:	2247      	movs	r2, #71	@ 0x47
 8003a96:	2105      	movs	r1, #5
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff f957 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
				drawLine(5, 72, 145, 72, 0x07E0);
 8003a9e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003aa2:	9301      	str	r3, [sp, #4]
 8003aa4:	2348      	movs	r3, #72	@ 0x48
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	2391      	movs	r3, #145	@ 0x91
 8003aaa:	2248      	movs	r2, #72	@ 0x48
 8003aac:	2105      	movs	r1, #5
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff f94c 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
				drawLine(5, 73, 145, 73, 0x07E0);
 8003ab4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8003ab8:	9301      	str	r3, [sp, #4]
 8003aba:	2349      	movs	r3, #73	@ 0x49
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	2391      	movs	r3, #145	@ 0x91
 8003ac0:	2249      	movs	r2, #73	@ 0x49
 8003ac2:	2105      	movs	r1, #5
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff f941 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
				currentSpeed = 2;
 8003aca:	4b3f      	ldr	r3, [pc, #252]	@ (8003bc8 <_ZN9WaveShare10showScreenE6Screenh+0xda0>)
 8003acc:	2202      	movs	r2, #2
 8003ace:	701a      	strb	r2, [r3, #0]
			break;
 8003ad0:	f000 bd04 	b.w	80044dc <_ZN9WaveShare10showScreenE6Screenh+0x16b4>
		case OrientationScreen1:
		{
			// ---->
			// <----

			if(CurrentDisplayedScreen == OrientationScreen1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	f000 8500 	beq.w	80044e0 <_ZN9WaveShare10showScreenE6Screenh+0x16b8>
				break;

			CurrentDisplayedScreen = OrientationScreen1;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0

			fillScreen(0x0000);
 8003ae8:	2100      	movs	r1, #0
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7fe ffe7 	bl	8002abe <_ZN9WaveShare10fillScreenEt>
			drawString(62, 5, "Set", 0xFFFF, FONT16);
 8003af0:	2301      	movs	r3, #1
 8003af2:	9301      	str	r3, [sp, #4]
 8003af4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	4b34      	ldr	r3, [pc, #208]	@ (8003bcc <_ZN9WaveShare10showScreenE6Screenh+0xda4>)
 8003afc:	2205      	movs	r2, #5
 8003afe:	213e      	movs	r1, #62	@ 0x3e
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7ff f829 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
			drawString(40, 22, "Starting", 0xFFFF, FONT16);
 8003b06:	2301      	movs	r3, #1
 8003b08:	9301      	str	r3, [sp, #4]
 8003b0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	4b30      	ldr	r3, [pc, #192]	@ (8003bd4 <_ZN9WaveShare10showScreenE6Screenh+0xdac>)
 8003b12:	2216      	movs	r2, #22
 8003b14:	2128      	movs	r1, #40	@ 0x28
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff f81e 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
			drawString(40, 39, "Position", 0xFFFF, FONT16);
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	9301      	str	r3, [sp, #4]
 8003b20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	4b2c      	ldr	r3, [pc, #176]	@ (8003bd8 <_ZN9WaveShare10showScreenE6Screenh+0xdb0>)
 8003b28:	2227      	movs	r2, #39	@ 0x27
 8003b2a:	2128      	movs	r1, #40	@ 0x28
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7ff f813 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>

			drawLine(20, 70, 120, 70, 0xFFFF);
 8003b32:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b36:	9301      	str	r3, [sp, #4]
 8003b38:	2346      	movs	r3, #70	@ 0x46
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	2378      	movs	r3, #120	@ 0x78
 8003b3e:	2246      	movs	r2, #70	@ 0x46
 8003b40:	2114      	movs	r1, #20
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7ff f902 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(20, 70, 30, 60, 0xFFFF);
 8003b48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b4c:	9301      	str	r3, [sp, #4]
 8003b4e:	233c      	movs	r3, #60	@ 0x3c
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	231e      	movs	r3, #30
 8003b54:	2246      	movs	r2, #70	@ 0x46
 8003b56:	2114      	movs	r1, #20
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f7ff f8f7 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(20, 70, 30, 80, 0xFFFF);
 8003b5e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b62:	9301      	str	r3, [sp, #4]
 8003b64:	2350      	movs	r3, #80	@ 0x50
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	231e      	movs	r3, #30
 8003b6a:	2246      	movs	r2, #70	@ 0x46
 8003b6c:	2114      	movs	r1, #20
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff f8ec 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>

			drawLine(20, 100, 120, 100, 0xFFFF);
 8003b74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b78:	9301      	str	r3, [sp, #4]
 8003b7a:	2364      	movs	r3, #100	@ 0x64
 8003b7c:	9300      	str	r3, [sp, #0]
 8003b7e:	2378      	movs	r3, #120	@ 0x78
 8003b80:	2264      	movs	r2, #100	@ 0x64
 8003b82:	2114      	movs	r1, #20
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff f8e1 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(120, 100, 110, 90, 0xFFFF);
 8003b8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b8e:	9301      	str	r3, [sp, #4]
 8003b90:	235a      	movs	r3, #90	@ 0x5a
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	236e      	movs	r3, #110	@ 0x6e
 8003b96:	2264      	movs	r2, #100	@ 0x64
 8003b98:	2178      	movs	r1, #120	@ 0x78
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff f8d6 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(120, 100, 110, 110, 0xFFFF);
 8003ba0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ba4:	9301      	str	r3, [sp, #4]
 8003ba6:	236e      	movs	r3, #110	@ 0x6e
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	236e      	movs	r3, #110	@ 0x6e
 8003bac:	2264      	movs	r2, #100	@ 0x64
 8003bae:	2178      	movs	r1, #120	@ 0x78
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f7ff f8cb 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>

			break;
 8003bb6:	f000 bca8 	b.w	800450a <_ZN9WaveShare10showScreenE6Screenh+0x16e2>
 8003bba:	bf00      	nop
 8003bbc:	0800b1e0 	.word	0x0800b1e0
 8003bc0:	0800b1e4 	.word	0x0800b1e4
 8003bc4:	0800b1e8 	.word	0x0800b1e8
 8003bc8:	24000004 	.word	0x24000004
 8003bcc:	0800b1ec 	.word	0x0800b1ec
 8003bd0:	0800b1f0 	.word	0x0800b1f0
 8003bd4:	0800b1f8 	.word	0x0800b1f8
 8003bd8:	0800b204 	.word	0x0800b204
		case OrientationScreen2:
		{
			// ----> US
			// ---->

			if(CurrentDisplayedScreen == OrientationScreen2)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	f000 847e 	beq.w	80044e4 <_ZN9WaveShare10showScreenE6Screenh+0x16bc>
				break;

			CurrentDisplayedScreen = OrientationScreen2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2203      	movs	r2, #3
 8003bec:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0

			fillScreen(0x0000);
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7fe ff63 	bl	8002abe <_ZN9WaveShare10fillScreenEt>
			drawString(62, 5, "Set", 0xFFFF, FONT16);
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	9301      	str	r3, [sp, #4]
 8003bfc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	4ba9      	ldr	r3, [pc, #676]	@ (8003ea8 <_ZN9WaveShare10showScreenE6Screenh+0x1080>)
 8003c04:	2205      	movs	r2, #5
 8003c06:	213e      	movs	r1, #62	@ 0x3e
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7fe ffa5 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
			drawString(40, 22, "Starting", 0xFFFF, FONT16);
 8003c0e:	2301      	movs	r3, #1
 8003c10:	9301      	str	r3, [sp, #4]
 8003c12:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	4ba4      	ldr	r3, [pc, #656]	@ (8003eac <_ZN9WaveShare10showScreenE6Screenh+0x1084>)
 8003c1a:	2216      	movs	r2, #22
 8003c1c:	2128      	movs	r1, #40	@ 0x28
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fe ff9a 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
			drawString(40, 39, "Position", 0xFFFF, FONT16);
 8003c24:	2301      	movs	r3, #1
 8003c26:	9301      	str	r3, [sp, #4]
 8003c28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	4ba0      	ldr	r3, [pc, #640]	@ (8003eb0 <_ZN9WaveShare10showScreenE6Screenh+0x1088>)
 8003c30:	2227      	movs	r2, #39	@ 0x27
 8003c32:	2128      	movs	r1, #40	@ 0x28
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7fe ff8f 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>

			drawString(20, 62, "ST", 0x001F, FONT16);
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	9301      	str	r3, [sp, #4]
 8003c3e:	231f      	movs	r3, #31
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	4b9c      	ldr	r3, [pc, #624]	@ (8003eb4 <_ZN9WaveShare10showScreenE6Screenh+0x108c>)
 8003c44:	223e      	movs	r2, #62	@ 0x3e
 8003c46:	2114      	movs	r1, #20
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f7fe ff85 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
			drawLine(50, 70, 120, 70, 0x001F);
 8003c4e:	231f      	movs	r3, #31
 8003c50:	9301      	str	r3, [sp, #4]
 8003c52:	2346      	movs	r3, #70	@ 0x46
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	2378      	movs	r3, #120	@ 0x78
 8003c58:	2246      	movs	r2, #70	@ 0x46
 8003c5a:	2132      	movs	r1, #50	@ 0x32
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff f875 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(120, 70, 110, 60, 0x001F);
 8003c62:	231f      	movs	r3, #31
 8003c64:	9301      	str	r3, [sp, #4]
 8003c66:	233c      	movs	r3, #60	@ 0x3c
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	236e      	movs	r3, #110	@ 0x6e
 8003c6c:	2246      	movs	r2, #70	@ 0x46
 8003c6e:	2178      	movs	r1, #120	@ 0x78
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff f86b 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(120, 70, 110, 80, 0x001F);
 8003c76:	231f      	movs	r3, #31
 8003c78:	9301      	str	r3, [sp, #4]
 8003c7a:	2350      	movs	r3, #80	@ 0x50
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	236e      	movs	r3, #110	@ 0x6e
 8003c80:	2246      	movs	r2, #70	@ 0x46
 8003c82:	2178      	movs	r1, #120	@ 0x78
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f7ff f861 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>

			drawLine(20, 100, 120, 100, 0xFFFF);
 8003c8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c8e:	9301      	str	r3, [sp, #4]
 8003c90:	2364      	movs	r3, #100	@ 0x64
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	2378      	movs	r3, #120	@ 0x78
 8003c96:	2264      	movs	r2, #100	@ 0x64
 8003c98:	2114      	movs	r1, #20
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f7ff f856 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(120, 100, 110, 90, 0xFFFF);
 8003ca0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ca4:	9301      	str	r3, [sp, #4]
 8003ca6:	235a      	movs	r3, #90	@ 0x5a
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	236e      	movs	r3, #110	@ 0x6e
 8003cac:	2264      	movs	r2, #100	@ 0x64
 8003cae:	2178      	movs	r1, #120	@ 0x78
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7ff f84b 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(120, 100, 110, 110, 0xFFFF);
 8003cb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003cba:	9301      	str	r3, [sp, #4]
 8003cbc:	236e      	movs	r3, #110	@ 0x6e
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	236e      	movs	r3, #110	@ 0x6e
 8003cc2:	2264      	movs	r2, #100	@ 0x64
 8003cc4:	2178      	movs	r1, #120	@ 0x78
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f7ff f840 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>

			break;
 8003ccc:	f000 bc1d 	b.w	800450a <_ZN9WaveShare10showScreenE6Screenh+0x16e2>
		case OrientationScreen3:
		{
			// ---->
			// ----> US

			if(CurrentDisplayedScreen == OrientationScreen3)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	f000 8406 	beq.w	80044e8 <_ZN9WaveShare10showScreenE6Screenh+0x16c0>
				break;

			CurrentDisplayedScreen = OrientationScreen3;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2204      	movs	r2, #4
 8003ce0:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0

			fillScreen(0x0000);
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7fe fee9 	bl	8002abe <_ZN9WaveShare10fillScreenEt>
			drawString(62, 5, "Set", 0xFFFF, FONT16);
 8003cec:	2301      	movs	r3, #1
 8003cee:	9301      	str	r3, [sp, #4]
 8003cf0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	4b6c      	ldr	r3, [pc, #432]	@ (8003ea8 <_ZN9WaveShare10showScreenE6Screenh+0x1080>)
 8003cf8:	2205      	movs	r2, #5
 8003cfa:	213e      	movs	r1, #62	@ 0x3e
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f7fe ff2b 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
			drawString(40, 22, "Starting", 0xFFFF, FONT16);
 8003d02:	2301      	movs	r3, #1
 8003d04:	9301      	str	r3, [sp, #4]
 8003d06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d0a:	9300      	str	r3, [sp, #0]
 8003d0c:	4b67      	ldr	r3, [pc, #412]	@ (8003eac <_ZN9WaveShare10showScreenE6Screenh+0x1084>)
 8003d0e:	2216      	movs	r2, #22
 8003d10:	2128      	movs	r1, #40	@ 0x28
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	f7fe ff20 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
			drawString(40, 39, "Position", 0xFFFF, FONT16);
 8003d18:	2301      	movs	r3, #1
 8003d1a:	9301      	str	r3, [sp, #4]
 8003d1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	4b63      	ldr	r3, [pc, #396]	@ (8003eb0 <_ZN9WaveShare10showScreenE6Screenh+0x1088>)
 8003d24:	2227      	movs	r2, #39	@ 0x27
 8003d26:	2128      	movs	r1, #40	@ 0x28
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7fe ff15 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>


			drawLine(20, 70, 120, 70, 0xFFFF);
 8003d2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d32:	9301      	str	r3, [sp, #4]
 8003d34:	2346      	movs	r3, #70	@ 0x46
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	2378      	movs	r3, #120	@ 0x78
 8003d3a:	2246      	movs	r2, #70	@ 0x46
 8003d3c:	2114      	movs	r1, #20
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7ff f804 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(120, 70, 110, 60, 0xFFFF);
 8003d44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d48:	9301      	str	r3, [sp, #4]
 8003d4a:	233c      	movs	r3, #60	@ 0x3c
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	236e      	movs	r3, #110	@ 0x6e
 8003d50:	2246      	movs	r2, #70	@ 0x46
 8003d52:	2178      	movs	r1, #120	@ 0x78
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7fe fff9 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(120, 70, 110, 80, 0xFFFF);
 8003d5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003d5e:	9301      	str	r3, [sp, #4]
 8003d60:	2350      	movs	r3, #80	@ 0x50
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	236e      	movs	r3, #110	@ 0x6e
 8003d66:	2246      	movs	r2, #70	@ 0x46
 8003d68:	2178      	movs	r1, #120	@ 0x78
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f7fe ffee 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>

			drawString(20, 92, "ST", 0x001F, FONT16);
 8003d70:	2301      	movs	r3, #1
 8003d72:	9301      	str	r3, [sp, #4]
 8003d74:	231f      	movs	r3, #31
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	4b4e      	ldr	r3, [pc, #312]	@ (8003eb4 <_ZN9WaveShare10showScreenE6Screenh+0x108c>)
 8003d7a:	225c      	movs	r2, #92	@ 0x5c
 8003d7c:	2114      	movs	r1, #20
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7fe feea 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
			drawLine(50, 100, 120, 100, 0x001F);
 8003d84:	231f      	movs	r3, #31
 8003d86:	9301      	str	r3, [sp, #4]
 8003d88:	2364      	movs	r3, #100	@ 0x64
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	2378      	movs	r3, #120	@ 0x78
 8003d8e:	2264      	movs	r2, #100	@ 0x64
 8003d90:	2132      	movs	r1, #50	@ 0x32
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fe ffda 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(120, 100, 110, 90, 0x001F);
 8003d98:	231f      	movs	r3, #31
 8003d9a:	9301      	str	r3, [sp, #4]
 8003d9c:	235a      	movs	r3, #90	@ 0x5a
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	236e      	movs	r3, #110	@ 0x6e
 8003da2:	2264      	movs	r2, #100	@ 0x64
 8003da4:	2178      	movs	r1, #120	@ 0x78
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7fe ffd0 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(120, 100, 110, 110, 0x001F);
 8003dac:	231f      	movs	r3, #31
 8003dae:	9301      	str	r3, [sp, #4]
 8003db0:	236e      	movs	r3, #110	@ 0x6e
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	236e      	movs	r3, #110	@ 0x6e
 8003db6:	2264      	movs	r2, #100	@ 0x64
 8003db8:	2178      	movs	r1, #120	@ 0x78
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7fe ffc6 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>

			break;
 8003dc0:	e3a3      	b.n	800450a <_ZN9WaveShare10showScreenE6Screenh+0x16e2>
		}
		case OrientationScreen4:
		{
			// <---- ---->

			if(CurrentDisplayedScreen == OrientationScreen4)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8003dc8:	2b05      	cmp	r3, #5
 8003dca:	f000 838f 	beq.w	80044ec <_ZN9WaveShare10showScreenE6Screenh+0x16c4>
				break;

			CurrentDisplayedScreen = OrientationScreen4;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2205      	movs	r2, #5
 8003dd2:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0

			fillScreen(0x0000);
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f7fe fe70 	bl	8002abe <_ZN9WaveShare10fillScreenEt>
			drawString(62, 5, "Set", 0xFFFF, FONT16);
 8003dde:	2301      	movs	r3, #1
 8003de0:	9301      	str	r3, [sp, #4]
 8003de2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	4b2f      	ldr	r3, [pc, #188]	@ (8003ea8 <_ZN9WaveShare10showScreenE6Screenh+0x1080>)
 8003dea:	2205      	movs	r2, #5
 8003dec:	213e      	movs	r1, #62	@ 0x3e
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7fe feb2 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
			drawString(40, 22, "Starting", 0xFFFF, FONT16);
 8003df4:	2301      	movs	r3, #1
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	4b2b      	ldr	r3, [pc, #172]	@ (8003eac <_ZN9WaveShare10showScreenE6Screenh+0x1084>)
 8003e00:	2216      	movs	r2, #22
 8003e02:	2128      	movs	r1, #40	@ 0x28
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7fe fea7 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
			drawString(40, 39, "Position", 0xFFFF, FONT16);
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	9301      	str	r3, [sp, #4]
 8003e0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	4b26      	ldr	r3, [pc, #152]	@ (8003eb0 <_ZN9WaveShare10showScreenE6Screenh+0x1088>)
 8003e16:	2227      	movs	r2, #39	@ 0x27
 8003e18:	2128      	movs	r1, #40	@ 0x28
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f7fe fe9c 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>

			drawLine(10, 85, 70, 85, 0xFFFF);
 8003e20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e24:	9301      	str	r3, [sp, #4]
 8003e26:	2355      	movs	r3, #85	@ 0x55
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	2346      	movs	r3, #70	@ 0x46
 8003e2c:	2255      	movs	r2, #85	@ 0x55
 8003e2e:	210a      	movs	r1, #10
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7fe ff8b 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(10, 85, 20, 75, 0xFFFF);
 8003e36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e3a:	9301      	str	r3, [sp, #4]
 8003e3c:	234b      	movs	r3, #75	@ 0x4b
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	2314      	movs	r3, #20
 8003e42:	2255      	movs	r2, #85	@ 0x55
 8003e44:	210a      	movs	r1, #10
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fe ff80 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(10, 85, 20, 95, 0xFFFF);
 8003e4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e50:	9301      	str	r3, [sp, #4]
 8003e52:	235f      	movs	r3, #95	@ 0x5f
 8003e54:	9300      	str	r3, [sp, #0]
 8003e56:	2314      	movs	r3, #20
 8003e58:	2255      	movs	r2, #85	@ 0x55
 8003e5a:	210a      	movs	r1, #10
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f7fe ff75 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>

			drawLine(90, 85, 150, 85, 0xFFFF);
 8003e62:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e66:	9301      	str	r3, [sp, #4]
 8003e68:	2355      	movs	r3, #85	@ 0x55
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	2396      	movs	r3, #150	@ 0x96
 8003e6e:	2255      	movs	r2, #85	@ 0x55
 8003e70:	215a      	movs	r1, #90	@ 0x5a
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fe ff6a 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(150, 85, 140, 75, 0xFFFF);
 8003e78:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e7c:	9301      	str	r3, [sp, #4]
 8003e7e:	234b      	movs	r3, #75	@ 0x4b
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	238c      	movs	r3, #140	@ 0x8c
 8003e84:	2255      	movs	r2, #85	@ 0x55
 8003e86:	2196      	movs	r1, #150	@ 0x96
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7fe ff5f 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(150, 85, 140, 95, 0xFFFF);
 8003e8e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e92:	9301      	str	r3, [sp, #4]
 8003e94:	235f      	movs	r3, #95	@ 0x5f
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	238c      	movs	r3, #140	@ 0x8c
 8003e9a:	2255      	movs	r2, #85	@ 0x55
 8003e9c:	2196      	movs	r1, #150	@ 0x96
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fe ff54 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			break;
 8003ea4:	e331      	b.n	800450a <_ZN9WaveShare10showScreenE6Screenh+0x16e2>
 8003ea6:	bf00      	nop
 8003ea8:	0800b1ec 	.word	0x0800b1ec
 8003eac:	0800b1f8 	.word	0x0800b1f8
 8003eb0:	0800b204 	.word	0x0800b204
 8003eb4:	0800b210 	.word	0x0800b210
		}
		case OrientationScreen5:
		{
			// ----> <----

			if(CurrentDisplayedScreen == OrientationScreen5)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8003ebe:	2b06      	cmp	r3, #6
 8003ec0:	f000 8316 	beq.w	80044f0 <_ZN9WaveShare10showScreenE6Screenh+0x16c8>
				break;

			CurrentDisplayedScreen = OrientationScreen5;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2206      	movs	r2, #6
 8003ec8:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0

			fillScreen(0x0000);
 8003ecc:	2100      	movs	r1, #0
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7fe fdf5 	bl	8002abe <_ZN9WaveShare10fillScreenEt>
			drawString(62, 5, "Set", 0xFFFF, FONT16);
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	9301      	str	r3, [sp, #4]
 8003ed8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	4b3c      	ldr	r3, [pc, #240]	@ (8003fd0 <_ZN9WaveShare10showScreenE6Screenh+0x11a8>)
 8003ee0:	2205      	movs	r2, #5
 8003ee2:	213e      	movs	r1, #62	@ 0x3e
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	f7fe fe37 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
			drawString(40, 22, "Starting", 0xFFFF, FONT16);
 8003eea:	2301      	movs	r3, #1
 8003eec:	9301      	str	r3, [sp, #4]
 8003eee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	4b37      	ldr	r3, [pc, #220]	@ (8003fd4 <_ZN9WaveShare10showScreenE6Screenh+0x11ac>)
 8003ef6:	2216      	movs	r2, #22
 8003ef8:	2128      	movs	r1, #40	@ 0x28
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f7fe fe2c 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
			drawString(40, 39, "Position", 0xFFFF, FONT16);
 8003f00:	2301      	movs	r3, #1
 8003f02:	9301      	str	r3, [sp, #4]
 8003f04:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	4b33      	ldr	r3, [pc, #204]	@ (8003fd8 <_ZN9WaveShare10showScreenE6Screenh+0x11b0>)
 8003f0c:	2227      	movs	r2, #39	@ 0x27
 8003f0e:	2128      	movs	r1, #40	@ 0x28
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7fe fe21 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>

			drawLine(10, 85, 70, 85, 0xFFFF);
 8003f16:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f1a:	9301      	str	r3, [sp, #4]
 8003f1c:	2355      	movs	r3, #85	@ 0x55
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	2346      	movs	r3, #70	@ 0x46
 8003f22:	2255      	movs	r2, #85	@ 0x55
 8003f24:	210a      	movs	r1, #10
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fe ff10 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(70, 85, 60, 75, 0xFFFF);
 8003f2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f30:	9301      	str	r3, [sp, #4]
 8003f32:	234b      	movs	r3, #75	@ 0x4b
 8003f34:	9300      	str	r3, [sp, #0]
 8003f36:	233c      	movs	r3, #60	@ 0x3c
 8003f38:	2255      	movs	r2, #85	@ 0x55
 8003f3a:	2146      	movs	r1, #70	@ 0x46
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f7fe ff05 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(70, 85, 60, 95, 0xFFFF);
 8003f42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f46:	9301      	str	r3, [sp, #4]
 8003f48:	235f      	movs	r3, #95	@ 0x5f
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	233c      	movs	r3, #60	@ 0x3c
 8003f4e:	2255      	movs	r2, #85	@ 0x55
 8003f50:	2146      	movs	r1, #70	@ 0x46
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7fe fefa 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>

			drawLine(90, 85, 150, 85, 0xFFFF);
 8003f58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f5c:	9301      	str	r3, [sp, #4]
 8003f5e:	2355      	movs	r3, #85	@ 0x55
 8003f60:	9300      	str	r3, [sp, #0]
 8003f62:	2396      	movs	r3, #150	@ 0x96
 8003f64:	2255      	movs	r2, #85	@ 0x55
 8003f66:	215a      	movs	r1, #90	@ 0x5a
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f7fe feef 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(90, 85, 100, 75, 0xFFFF);
 8003f6e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	234b      	movs	r3, #75	@ 0x4b
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	2364      	movs	r3, #100	@ 0x64
 8003f7a:	2255      	movs	r2, #85	@ 0x55
 8003f7c:	215a      	movs	r1, #90	@ 0x5a
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7fe fee4 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(90, 85, 100, 95, 0xFFFF);
 8003f84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003f88:	9301      	str	r3, [sp, #4]
 8003f8a:	235f      	movs	r3, #95	@ 0x5f
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	2364      	movs	r3, #100	@ 0x64
 8003f90:	2255      	movs	r2, #85	@ 0x55
 8003f92:	215a      	movs	r1, #90	@ 0x5a
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7fe fed9 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>

			break;
 8003f9a:	e2b6      	b.n	800450a <_ZN9WaveShare10showScreenE6Screenh+0x16e2>
		}
		case ArmConfirmationScreen:
		{
			if(CurrentDisplayedScreen == ArmConfirmationScreen)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8003fa2:	2b07      	cmp	r3, #7
 8003fa4:	f000 82a6 	beq.w	80044f4 <_ZN9WaveShare10showScreenE6Screenh+0x16cc>
				break;

			CurrentDisplayedScreen = ArmConfirmationScreen;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2207      	movs	r2, #7
 8003fac:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0

			fillScreen(0x0000);
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fe fd83 	bl	8002abe <_ZN9WaveShare10fillScreenEt>
			drawString(40, 10, "ARM?", 0xFFFF, FONT24);
 8003fb8:	2300      	movs	r3, #0
 8003fba:	9301      	str	r3, [sp, #4]
 8003fbc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	4b06      	ldr	r3, [pc, #24]	@ (8003fdc <_ZN9WaveShare10showScreenE6Screenh+0x11b4>)
 8003fc4:	220a      	movs	r2, #10
 8003fc6:	2128      	movs	r1, #40	@ 0x28
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7fe fdc5 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>

			break;
 8003fce:	e29c      	b.n	800450a <_ZN9WaveShare10showScreenE6Screenh+0x16e2>
 8003fd0:	0800b1ec 	.word	0x0800b1ec
 8003fd4:	0800b1f8 	.word	0x0800b1f8
 8003fd8:	0800b204 	.word	0x0800b204
 8003fdc:	0800b214 	.word	0x0800b214
		}
		case ArmedScreen:
		{
			if(CurrentDisplayedScreen == ArmedScreen)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	f000 8286 	beq.w	80044f8 <_ZN9WaveShare10showScreenE6Screenh+0x16d0>
				break;

			CurrentDisplayedScreen = ArmedScreen;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2208      	movs	r2, #8
 8003ff0:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0

			fillScreen(0x0000);
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fe fd61 	bl	8002abe <_ZN9WaveShare10fillScreenEt>
			drawString(40, 10, "ARMED", 0x07E0, FONT24);
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	9301      	str	r3, [sp, #4]
 8004000:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	4bb9      	ldr	r3, [pc, #740]	@ (80042ec <_ZN9WaveShare10showScreenE6Screenh+0x14c4>)
 8004008:	220a      	movs	r2, #10
 800400a:	2128      	movs	r1, #40	@ 0x28
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7fe fda3 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>

			setPixel(70, 60, 0x07E0);
 8004012:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004016:	223c      	movs	r2, #60	@ 0x3c
 8004018:	2146      	movs	r1, #70	@ 0x46
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fe fd79 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(70, 61, 0x07E0);
 8004020:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004024:	223d      	movs	r2, #61	@ 0x3d
 8004026:	2146      	movs	r1, #70	@ 0x46
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7fe fd72 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(71, 60, 0x07E0);
 800402e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004032:	223c      	movs	r2, #60	@ 0x3c
 8004034:	2147      	movs	r1, #71	@ 0x47
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fe fd6b 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(71, 61, 0x07E0);
 800403c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004040:	223d      	movs	r2, #61	@ 0x3d
 8004042:	2147      	movs	r1, #71	@ 0x47
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7fe fd64 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			setPixel(91, 60, 0x07E0);
 800404a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800404e:	223c      	movs	r2, #60	@ 0x3c
 8004050:	215b      	movs	r1, #91	@ 0x5b
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7fe fd5d 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(91, 61, 0x07E0);
 8004058:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800405c:	223d      	movs	r2, #61	@ 0x3d
 800405e:	215b      	movs	r1, #91	@ 0x5b
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f7fe fd56 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(92, 60, 0x07E0);
 8004066:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800406a:	223c      	movs	r2, #60	@ 0x3c
 800406c:	215c      	movs	r1, #92	@ 0x5c
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7fe fd4f 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>
			setPixel(92, 61, 0x07E0);
 8004074:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004078:	223d      	movs	r2, #61	@ 0x3d
 800407a:	215c      	movs	r1, #92	@ 0x5c
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7fe fd48 	bl	8002b12 <_ZN9WaveShare8setPixelEttt>

			drawLine(52, 45, 52, 75, 0x07E0);
 8004082:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004086:	9301      	str	r3, [sp, #4]
 8004088:	234b      	movs	r3, #75	@ 0x4b
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	2334      	movs	r3, #52	@ 0x34
 800408e:	222d      	movs	r2, #45	@ 0x2d
 8004090:	2134      	movs	r1, #52	@ 0x34
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fe fe5a 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(52, 75, 65, 75, 0x07E0);
 8004098:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800409c:	9301      	str	r3, [sp, #4]
 800409e:	234b      	movs	r3, #75	@ 0x4b
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	2341      	movs	r3, #65	@ 0x41
 80040a4:	224b      	movs	r2, #75	@ 0x4b
 80040a6:	2134      	movs	r1, #52	@ 0x34
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f7fe fe4f 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(65, 75, 65, 81, 0x07E0);
 80040ae:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80040b2:	9301      	str	r3, [sp, #4]
 80040b4:	2351      	movs	r3, #81	@ 0x51
 80040b6:	9300      	str	r3, [sp, #0]
 80040b8:	2341      	movs	r3, #65	@ 0x41
 80040ba:	224b      	movs	r2, #75	@ 0x4b
 80040bc:	2141      	movs	r1, #65	@ 0x41
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fe fe44 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(65, 81, 70, 89, 0x07E0);
 80040c4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80040c8:	9301      	str	r3, [sp, #4]
 80040ca:	2359      	movs	r3, #89	@ 0x59
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	2346      	movs	r3, #70	@ 0x46
 80040d0:	2251      	movs	r2, #81	@ 0x51
 80040d2:	2141      	movs	r1, #65	@ 0x41
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f7fe fe39 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(70, 89, 75, 80, 0x07E0);
 80040da:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80040de:	9301      	str	r3, [sp, #4]
 80040e0:	2350      	movs	r3, #80	@ 0x50
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	234b      	movs	r3, #75	@ 0x4b
 80040e6:	2259      	movs	r2, #89	@ 0x59
 80040e8:	2146      	movs	r1, #70	@ 0x46
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7fe fe2e 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(70, 89, 68, 89, 0x07E0);
 80040f0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80040f4:	9301      	str	r3, [sp, #4]
 80040f6:	2359      	movs	r3, #89	@ 0x59
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	2344      	movs	r3, #68	@ 0x44
 80040fc:	2259      	movs	r2, #89	@ 0x59
 80040fe:	2146      	movs	r1, #70	@ 0x46
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f7fe fe23 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(68, 89, 68, 95, 0x07E0);
 8004106:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800410a:	9301      	str	r3, [sp, #4]
 800410c:	235f      	movs	r3, #95	@ 0x5f
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	2344      	movs	r3, #68	@ 0x44
 8004112:	2259      	movs	r2, #89	@ 0x59
 8004114:	2144      	movs	r1, #68	@ 0x44
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fe fe18 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(68, 95, 93, 95, 0x07E0);
 800411c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004120:	9301      	str	r3, [sp, #4]
 8004122:	235f      	movs	r3, #95	@ 0x5f
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	235d      	movs	r3, #93	@ 0x5d
 8004128:	225f      	movs	r2, #95	@ 0x5f
 800412a:	2144      	movs	r1, #68	@ 0x44
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7fe fe0d 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(75, 80, 80, 90, 0x07E0);
 8004132:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004136:	9301      	str	r3, [sp, #4]
 8004138:	235a      	movs	r3, #90	@ 0x5a
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	2350      	movs	r3, #80	@ 0x50
 800413e:	2250      	movs	r2, #80	@ 0x50
 8004140:	214b      	movs	r1, #75	@ 0x4b
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fe fe02 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(81, 90, 86, 80, 0x07E0);
 8004148:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800414c:	9301      	str	r3, [sp, #4]
 800414e:	2350      	movs	r3, #80	@ 0x50
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	2356      	movs	r3, #86	@ 0x56
 8004154:	225a      	movs	r2, #90	@ 0x5a
 8004156:	2151      	movs	r1, #81	@ 0x51
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7fe fdf7 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(86, 80, 91, 89, 0x07E0);
 800415e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004162:	9301      	str	r3, [sp, #4]
 8004164:	2359      	movs	r3, #89	@ 0x59
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	235b      	movs	r3, #91	@ 0x5b
 800416a:	2250      	movs	r2, #80	@ 0x50
 800416c:	2156      	movs	r1, #86	@ 0x56
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fe fdec 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(91, 89, 93, 89, 0x07E0);
 8004174:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004178:	9301      	str	r3, [sp, #4]
 800417a:	2359      	movs	r3, #89	@ 0x59
 800417c:	9300      	str	r3, [sp, #0]
 800417e:	235d      	movs	r3, #93	@ 0x5d
 8004180:	2259      	movs	r2, #89	@ 0x59
 8004182:	215b      	movs	r1, #91	@ 0x5b
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f7fe fde1 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(93, 89, 93, 95, 0x07E0);
 800418a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800418e:	9301      	str	r3, [sp, #4]
 8004190:	235f      	movs	r3, #95	@ 0x5f
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	235d      	movs	r3, #93	@ 0x5d
 8004196:	2259      	movs	r2, #89	@ 0x59
 8004198:	215d      	movs	r1, #93	@ 0x5d
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fe fdd6 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(91, 89, 96, 81, 0x07E0);
 80041a0:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80041a4:	9301      	str	r3, [sp, #4]
 80041a6:	2351      	movs	r3, #81	@ 0x51
 80041a8:	9300      	str	r3, [sp, #0]
 80041aa:	2360      	movs	r3, #96	@ 0x60
 80041ac:	2259      	movs	r2, #89	@ 0x59
 80041ae:	215b      	movs	r1, #91	@ 0x5b
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7fe fdcb 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(96, 81, 96, 75, 0x07E0);
 80041b6:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80041ba:	9301      	str	r3, [sp, #4]
 80041bc:	234b      	movs	r3, #75	@ 0x4b
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	2360      	movs	r3, #96	@ 0x60
 80041c2:	2251      	movs	r2, #81	@ 0x51
 80041c4:	2160      	movs	r1, #96	@ 0x60
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f7fe fdc0 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(96, 75, 109, 75, 0x07E0);
 80041cc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80041d0:	9301      	str	r3, [sp, #4]
 80041d2:	234b      	movs	r3, #75	@ 0x4b
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	236d      	movs	r3, #109	@ 0x6d
 80041d8:	224b      	movs	r2, #75	@ 0x4b
 80041da:	2160      	movs	r1, #96	@ 0x60
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7fe fdb5 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(109, 75, 109, 45, 0x07E0);
 80041e2:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80041e6:	9301      	str	r3, [sp, #4]
 80041e8:	232d      	movs	r3, #45	@ 0x2d
 80041ea:	9300      	str	r3, [sp, #0]
 80041ec:	236d      	movs	r3, #109	@ 0x6d
 80041ee:	224b      	movs	r2, #75	@ 0x4b
 80041f0:	216d      	movs	r1, #109	@ 0x6d
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f7fe fdaa 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(52, 45, 109, 45, 0x07E0);
 80041f8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	232d      	movs	r3, #45	@ 0x2d
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	236d      	movs	r3, #109	@ 0x6d
 8004204:	222d      	movs	r2, #45	@ 0x2d
 8004206:	2134      	movs	r1, #52	@ 0x34
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7fe fd9f 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>

			drawLine(65, 55, 65, 62, 0x07E0);
 800420e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004212:	9301      	str	r3, [sp, #4]
 8004214:	233e      	movs	r3, #62	@ 0x3e
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	2341      	movs	r3, #65	@ 0x41
 800421a:	2237      	movs	r2, #55	@ 0x37
 800421c:	2141      	movs	r1, #65	@ 0x41
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7fe fd94 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(65, 62, 74, 62, 0x07E0);
 8004224:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004228:	9301      	str	r3, [sp, #4]
 800422a:	233e      	movs	r3, #62	@ 0x3e
 800422c:	9300      	str	r3, [sp, #0]
 800422e:	234a      	movs	r3, #74	@ 0x4a
 8004230:	223e      	movs	r2, #62	@ 0x3e
 8004232:	2141      	movs	r1, #65	@ 0x41
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7fe fd89 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(74, 62, 74, 55, 0x07E0);
 800423a:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800423e:	9301      	str	r3, [sp, #4]
 8004240:	2337      	movs	r3, #55	@ 0x37
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	234a      	movs	r3, #74	@ 0x4a
 8004246:	223e      	movs	r2, #62	@ 0x3e
 8004248:	214a      	movs	r1, #74	@ 0x4a
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7fe fd7e 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(74, 55, 65, 55, 0x07E0);
 8004250:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004254:	9301      	str	r3, [sp, #4]
 8004256:	2337      	movs	r3, #55	@ 0x37
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	2341      	movs	r3, #65	@ 0x41
 800425c:	2237      	movs	r2, #55	@ 0x37
 800425e:	214a      	movs	r1, #74	@ 0x4a
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f7fe fd73 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>

			drawLine(87, 55, 87, 62, 0x07E0);
 8004266:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800426a:	9301      	str	r3, [sp, #4]
 800426c:	233e      	movs	r3, #62	@ 0x3e
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	2357      	movs	r3, #87	@ 0x57
 8004272:	2237      	movs	r2, #55	@ 0x37
 8004274:	2157      	movs	r1, #87	@ 0x57
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fe fd68 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(87, 62, 96, 62, 0x07E0);
 800427c:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004280:	9301      	str	r3, [sp, #4]
 8004282:	233e      	movs	r3, #62	@ 0x3e
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	2360      	movs	r3, #96	@ 0x60
 8004288:	223e      	movs	r2, #62	@ 0x3e
 800428a:	2157      	movs	r1, #87	@ 0x57
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7fe fd5d 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(96, 62, 96, 55, 0x07E0);
 8004292:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8004296:	9301      	str	r3, [sp, #4]
 8004298:	2337      	movs	r3, #55	@ 0x37
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	2360      	movs	r3, #96	@ 0x60
 800429e:	223e      	movs	r2, #62	@ 0x3e
 80042a0:	2160      	movs	r1, #96	@ 0x60
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7fe fd52 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(96, 55, 87, 55, 0x07E0);
 80042a8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80042ac:	9301      	str	r3, [sp, #4]
 80042ae:	2337      	movs	r3, #55	@ 0x37
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	2357      	movs	r3, #87	@ 0x57
 80042b4:	2237      	movs	r2, #55	@ 0x37
 80042b6:	2160      	movs	r1, #96	@ 0x60
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7fe fd47 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>

			drawLine(80, 64, 76, 68, 0x07E0);
 80042be:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80042c2:	9301      	str	r3, [sp, #4]
 80042c4:	2344      	movs	r3, #68	@ 0x44
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	234c      	movs	r3, #76	@ 0x4c
 80042ca:	2240      	movs	r2, #64	@ 0x40
 80042cc:	2150      	movs	r1, #80	@ 0x50
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7fe fd3c 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(81, 64, 85, 68, 0x07E0);
 80042d4:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80042d8:	9301      	str	r3, [sp, #4]
 80042da:	2344      	movs	r3, #68	@ 0x44
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	2355      	movs	r3, #85	@ 0x55
 80042e0:	2240      	movs	r2, #64	@ 0x40
 80042e2:	2151      	movs	r1, #81	@ 0x51
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7fe fd31 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>

			break;
 80042ea:	e10e      	b.n	800450a <_ZN9WaveShare10showScreenE6Screenh+0x16e2>
 80042ec:	0800b21c 	.word	0x0800b21c
		}
		case ESTOP:
		{
			if(CurrentDisplayedScreen == ESTOP)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80042f6:	2b0c      	cmp	r3, #12
 80042f8:	f000 8100 	beq.w	80044fc <_ZN9WaveShare10showScreenE6Screenh+0x16d4>
				break;

			CurrentDisplayedScreen = ESTOP;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	220c      	movs	r2, #12
 8004300:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0

			fillScreen(0x0000);
 8004304:	2100      	movs	r1, #0
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fe fbd9 	bl	8002abe <_ZN9WaveShare10fillScreenEt>
			drawString(40, 10, "ESTOP", 0xFFFF, FONT24);
 800430c:	2300      	movs	r3, #0
 800430e:	9301      	str	r3, [sp, #4]
 8004310:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	4b7f      	ldr	r3, [pc, #508]	@ (8004514 <_ZN9WaveShare10showScreenE6Screenh+0x16ec>)
 8004318:	220a      	movs	r2, #10
 800431a:	2128      	movs	r1, #40	@ 0x28
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f7fe fc1b 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
			drawString(5, 27, "TRIGGERED", 0xFFFF, FONT24);
 8004322:	2300      	movs	r3, #0
 8004324:	9301      	str	r3, [sp, #4]
 8004326:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	4b7a      	ldr	r3, [pc, #488]	@ (8004518 <_ZN9WaveShare10showScreenE6Screenh+0x16f0>)
 800432e:	221b      	movs	r2, #27
 8004330:	2105      	movs	r1, #5
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fe fc10 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>

			drawLine(58, 67, 106, 67, 0x07FF);
 8004338:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	2343      	movs	r3, #67	@ 0x43
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	236a      	movs	r3, #106	@ 0x6a
 8004344:	2243      	movs	r2, #67	@ 0x43
 8004346:	213a      	movs	r1, #58	@ 0x3a
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7fe fcff 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(57, 67, 80, 112, 0x07FF);
 800434e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8004352:	9301      	str	r3, [sp, #4]
 8004354:	2370      	movs	r3, #112	@ 0x70
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	2350      	movs	r3, #80	@ 0x50
 800435a:	2243      	movs	r2, #67	@ 0x43
 800435c:	2139      	movs	r1, #57	@ 0x39
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7fe fcf4 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(106, 67, 81, 112, 0x07FF);
 8004364:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8004368:	9301      	str	r3, [sp, #4]
 800436a:	2370      	movs	r3, #112	@ 0x70
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	2351      	movs	r3, #81	@ 0x51
 8004370:	2243      	movs	r2, #67	@ 0x43
 8004372:	216a      	movs	r1, #106	@ 0x6a
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7fe fce9 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>

			drawLine(80, 71, 80, 90, 0x07FF);
 800437a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800437e:	9301      	str	r3, [sp, #4]
 8004380:	235a      	movs	r3, #90	@ 0x5a
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	2350      	movs	r3, #80	@ 0x50
 8004386:	2247      	movs	r2, #71	@ 0x47
 8004388:	2150      	movs	r1, #80	@ 0x50
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fe fcde 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(81, 71, 81, 90, 0x07FF);
 8004390:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8004394:	9301      	str	r3, [sp, #4]
 8004396:	235a      	movs	r3, #90	@ 0x5a
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	2351      	movs	r3, #81	@ 0x51
 800439c:	2247      	movs	r2, #71	@ 0x47
 800439e:	2151      	movs	r1, #81	@ 0x51
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7fe fcd3 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>

			drawLine(80, 97, 80, 100, 0x07FF);
 80043a6:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80043aa:	9301      	str	r3, [sp, #4]
 80043ac:	2364      	movs	r3, #100	@ 0x64
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	2350      	movs	r3, #80	@ 0x50
 80043b2:	2261      	movs	r2, #97	@ 0x61
 80043b4:	2150      	movs	r1, #80	@ 0x50
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fe fcc8 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>
			drawLine(81, 97, 81, 100, 0x07FF);
 80043bc:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80043c0:	9301      	str	r3, [sp, #4]
 80043c2:	2364      	movs	r3, #100	@ 0x64
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	2351      	movs	r3, #81	@ 0x51
 80043c8:	2261      	movs	r2, #97	@ 0x61
 80043ca:	2151      	movs	r1, #81	@ 0x51
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7fe fcbd 	bl	8002d4c <_ZN9WaveShare8drawLineEhhhht>

			break;
 80043d2:	e09a      	b.n	800450a <_ZN9WaveShare10showScreenE6Screenh+0x16e2>
		}
		case wheelCleanOff:
		{
			if(CurrentDisplayedScreen == wheelCleanOff)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80043da:	2b09      	cmp	r3, #9
 80043dc:	f000 8090 	beq.w	8004500 <_ZN9WaveShare10showScreenE6Screenh+0x16d8>
				break;

			CurrentDisplayedScreen = wheelCleanOff;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2209      	movs	r2, #9
 80043e4:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0

			fillScreen(0x0000);
 80043e8:	2100      	movs	r1, #0
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fe fb67 	bl	8002abe <_ZN9WaveShare10fillScreenEt>
			drawString(40, 10, "Wheel", 0xFFFF, FONT24);
 80043f0:	2300      	movs	r3, #0
 80043f2:	9301      	str	r3, [sp, #4]
 80043f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	4b48      	ldr	r3, [pc, #288]	@ (800451c <_ZN9WaveShare10showScreenE6Screenh+0x16f4>)
 80043fc:	220a      	movs	r2, #10
 80043fe:	2128      	movs	r1, #40	@ 0x28
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7fe fba9 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
			drawString(40, 27, "Clean", 0xFFFF, FONT24);
 8004406:	2300      	movs	r3, #0
 8004408:	9301      	str	r3, [sp, #4]
 800440a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	4b43      	ldr	r3, [pc, #268]	@ (8004520 <_ZN9WaveShare10showScreenE6Screenh+0x16f8>)
 8004412:	221b      	movs	r2, #27
 8004414:	2128      	movs	r1, #40	@ 0x28
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fe fb9e 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
			drawString(48, 44, "Off", 0xFFFF, FONT24);
 800441c:	2300      	movs	r3, #0
 800441e:	9301      	str	r3, [sp, #4]
 8004420:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	4b3f      	ldr	r3, [pc, #252]	@ (8004524 <_ZN9WaveShare10showScreenE6Screenh+0x16fc>)
 8004428:	222c      	movs	r2, #44	@ 0x2c
 800442a:	2130      	movs	r1, #48	@ 0x30
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7fe fb93 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
		}
		case wheelCleanOn:
		{
			if(CurrentDisplayedScreen == wheelCleanOn)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8004438:	2b0a      	cmp	r3, #10
 800443a:	d063      	beq.n	8004504 <_ZN9WaveShare10showScreenE6Screenh+0x16dc>
				break;

			CurrentDisplayedScreen = wheelCleanOn;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	220a      	movs	r2, #10
 8004440:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0

			fillScreen(0x0000);
 8004444:	2100      	movs	r1, #0
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fe fb39 	bl	8002abe <_ZN9WaveShare10fillScreenEt>
			drawString(40, 10, "Wheel", 0xFFFF, FONT24);
 800444c:	2300      	movs	r3, #0
 800444e:	9301      	str	r3, [sp, #4]
 8004450:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004454:	9300      	str	r3, [sp, #0]
 8004456:	4b31      	ldr	r3, [pc, #196]	@ (800451c <_ZN9WaveShare10showScreenE6Screenh+0x16f4>)
 8004458:	220a      	movs	r2, #10
 800445a:	2128      	movs	r1, #40	@ 0x28
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7fe fb7b 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
			drawString(40, 27, "Clean", 0xFFFF, FONT24);
 8004462:	2300      	movs	r3, #0
 8004464:	9301      	str	r3, [sp, #4]
 8004466:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	4b2c      	ldr	r3, [pc, #176]	@ (8004520 <_ZN9WaveShare10showScreenE6Screenh+0x16f8>)
 800446e:	221b      	movs	r2, #27
 8004470:	2128      	movs	r1, #40	@ 0x28
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fe fb70 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
			drawString(48, 44, "On", 0xFFFF, FONT24);
 8004478:	2300      	movs	r3, #0
 800447a:	9301      	str	r3, [sp, #4]
 800447c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	4b29      	ldr	r3, [pc, #164]	@ (8004528 <_ZN9WaveShare10showScreenE6Screenh+0x1700>)
 8004484:	222c      	movs	r2, #44	@ 0x2c
 8004486:	2130      	movs	r1, #48	@ 0x30
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f7fe fb65 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
		}
		case wheelCleanScreen:
		{
			if(CurrentDisplayedScreen == wheelCleanScreen)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8004494:	2b0b      	cmp	r3, #11
 8004496:	d037      	beq.n	8004508 <_ZN9WaveShare10showScreenE6Screenh+0x16e0>
				break;

			CurrentDisplayedScreen = wheelCleanScreen;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	220b      	movs	r2, #11
 800449c:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0

			fillScreen(0x0000);
 80044a0:	2100      	movs	r1, #0
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7fe fb0b 	bl	8002abe <_ZN9WaveShare10fillScreenEt>
			drawString(40, 10, "Wheel", 0xFFFF, FONT24);
 80044a8:	2300      	movs	r3, #0
 80044aa:	9301      	str	r3, [sp, #4]
 80044ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044b0:	9300      	str	r3, [sp, #0]
 80044b2:	4b1a      	ldr	r3, [pc, #104]	@ (800451c <_ZN9WaveShare10showScreenE6Screenh+0x16f4>)
 80044b4:	220a      	movs	r2, #10
 80044b6:	2128      	movs	r1, #40	@ 0x28
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f7fe fb4d 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
			drawString(40, 27, "Clean", 0xFFFF, FONT24);
 80044be:	2300      	movs	r3, #0
 80044c0:	9301      	str	r3, [sp, #4]
 80044c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	4b15      	ldr	r3, [pc, #84]	@ (8004520 <_ZN9WaveShare10showScreenE6Screenh+0x16f8>)
 80044ca:	221b      	movs	r2, #27
 80044cc:	2128      	movs	r1, #40	@ 0x28
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7fe fb42 	bl	8002b58 <_ZN9WaveShare10drawStringEhhPKcth>
		}
		default:
		{
			break;
 80044d4:	bf00      	nop
 80044d6:	e018      	b.n	800450a <_ZN9WaveShare10showScreenE6Screenh+0x16e2>
				break;
 80044d8:	bf00      	nop
 80044da:	e016      	b.n	800450a <_ZN9WaveShare10showScreenE6Screenh+0x16e2>
			break;
 80044dc:	bf00      	nop
 80044de:	e014      	b.n	800450a <_ZN9WaveShare10showScreenE6Screenh+0x16e2>
				break;
 80044e0:	bf00      	nop
 80044e2:	e012      	b.n	800450a <_ZN9WaveShare10showScreenE6Screenh+0x16e2>
				break;
 80044e4:	bf00      	nop
 80044e6:	e010      	b.n	800450a <_ZN9WaveShare10showScreenE6Screenh+0x16e2>
				break;
 80044e8:	bf00      	nop
 80044ea:	e00e      	b.n	800450a <_ZN9WaveShare10showScreenE6Screenh+0x16e2>
				break;
 80044ec:	bf00      	nop
 80044ee:	e00c      	b.n	800450a <_ZN9WaveShare10showScreenE6Screenh+0x16e2>
				break;
 80044f0:	bf00      	nop
 80044f2:	e00a      	b.n	800450a <_ZN9WaveShare10showScreenE6Screenh+0x16e2>
				break;
 80044f4:	bf00      	nop
 80044f6:	e008      	b.n	800450a <_ZN9WaveShare10showScreenE6Screenh+0x16e2>
				break;
 80044f8:	bf00      	nop
 80044fa:	e006      	b.n	800450a <_ZN9WaveShare10showScreenE6Screenh+0x16e2>
				break;
 80044fc:	bf00      	nop
 80044fe:	e004      	b.n	800450a <_ZN9WaveShare10showScreenE6Screenh+0x16e2>
				break;
 8004500:	bf00      	nop
 8004502:	e002      	b.n	800450a <_ZN9WaveShare10showScreenE6Screenh+0x16e2>
				break;
 8004504:	bf00      	nop
 8004506:	e000      	b.n	800450a <_ZN9WaveShare10showScreenE6Screenh+0x16e2>
				break;
 8004508:	bf00      	nop
		}
	}
}
 800450a:	bf00      	nop
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	0800b224 	.word	0x0800b224
 8004518:	0800b22c 	.word	0x0800b22c
 800451c:	0800b238 	.word	0x0800b238
 8004520:	0800b240 	.word	0x0800b240
 8004524:	0800b248 	.word	0x0800b248
 8004528:	0800b24c 	.word	0x0800b24c

0800452c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689a      	ldr	r2, [r3, #8]
 8004538:	4b05      	ldr	r3, [pc, #20]	@ (8004550 <LL_ADC_Enable+0x24>)
 800453a:	4013      	ands	r3, r2
 800453c:	f043 0201 	orr.w	r2, r3, #1
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	7fffffc0 	.word	0x7fffffc0

08004554 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	4b05      	ldr	r3, [pc, #20]	@ (8004578 <LL_ADC_REG_StartConversion+0x24>)
 8004562:	4013      	ands	r3, r2
 8004564:	f043 0204 	orr.w	r2, r3, #4
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	7fffffc0 	.word	0x7fffffc0

0800457c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	4b05      	ldr	r3, [pc, #20]	@ (80045a0 <LL_ADC_REG_StopConversion+0x24>)
 800458a:	4013      	ands	r3, r2
 800458c:	f043 0210 	orr.w	r2, r3, #16
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	7fffffc0 	.word	0x7fffffc0

080045a4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b04      	cmp	r3, #4
 80045b6:	d101      	bne.n	80045bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <LL_ADC_REG_IsStopConversionOngoing>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_IsStopConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no command of conversion stop is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsStopConversionOngoing(const ADC_TypeDef *ADCx)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP)) ? 1UL : 0UL);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 0310 	and.w	r3, r3, #16
 80045da:	2b10      	cmp	r3, #16
 80045dc:	d101      	bne.n	80045e2 <LL_ADC_REG_IsStopConversionOngoing+0x18>
 80045de:	2301      	movs	r3, #1
 80045e0:	e000      	b.n	80045e4 <LL_ADC_REG_IsStopConversionOngoing+0x1a>
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <LL_ADC_REG_ReadConversionData16>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData16
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData16(const ADC_TypeDef *ADCx)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fc:	b29b      	uxth	r3, r3
}
 80045fe:	4618      	mov	r0, r3
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
	...

0800460c <_ZN6btnMatC1Ev>:
#include "stdint.h"
#include "stm32h7xx.h"
#include "../Inc/btn_matrix.hpp"


btnMat::btnMat()
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
{
	LL_ADC_Enable(ADC1);
 8004614:	4805      	ldr	r0, [pc, #20]	@ (800462c <_ZN6btnMatC1Ev+0x20>)
 8004616:	f7ff ff89 	bl	800452c <LL_ADC_Enable>

    matrixState = 0;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	801a      	strh	r2, [r3, #0]

    return;
 8004620:	687b      	ldr	r3, [r7, #4]
}
 8004622:	4618      	mov	r0, r3
 8004624:	3708      	adds	r7, #8
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40022000 	.word	0x40022000

08004630 <_ZN6btnMat6updateEPt>:


void btnMat::update(uint16_t *matrixOP)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
	uint16_t btn_read = 0;
 800463a:	2300      	movs	r3, #0
 800463c:	81fb      	strh	r3, [r7, #14]

	readADC(ADC1, &btn_read);
 800463e:	f107 030e 	add.w	r3, r7, #14
 8004642:	461a      	mov	r2, r3
 8004644:	4997      	ldr	r1, [pc, #604]	@ (80048a4 <_ZN6btnMat6updateEPt+0x274>)
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f930 	bl	80048ac <_ZN6btnMat7readADCEP11ADC_TypeDefPt>

	if(btn_read > 40000)								{return;} 							//no buttons pressed
 800464c:	89fb      	ldrh	r3, [r7, #14]
 800464e:	f649 4240 	movw	r2, #40000	@ 0x9c40
 8004652:	4293      	cmp	r3, r2
 8004654:	f200 8122 	bhi.w	800489c <_ZN6btnMat6updateEPt+0x26c>
	else if (btn_read >= 13397 && btn_read < 14397) 	{*matrixOP |= (1 << 0);}			//S1
 8004658:	89fb      	ldrh	r3, [r7, #14]
 800465a:	f243 4254 	movw	r2, #13396	@ 0x3454
 800465e:	4293      	cmp	r3, r2
 8004660:	d90c      	bls.n	800467c <_ZN6btnMat6updateEPt+0x4c>
 8004662:	89fb      	ldrh	r3, [r7, #14]
 8004664:	f643 023c 	movw	r2, #14396	@ 0x383c
 8004668:	4293      	cmp	r3, r2
 800466a:	d807      	bhi.n	800467c <_ZN6btnMat6updateEPt+0x4c>
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	881b      	ldrh	r3, [r3, #0]
 8004670:	f043 0301 	orr.w	r3, r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	801a      	strh	r2, [r3, #0]
 800467a:	e10b      	b.n	8004894 <_ZN6btnMat6updateEPt+0x264>
	else if (btn_read >= 10670 && btn_read < 11670) 	{*matrixOP |= (1 << 1);}			//S2
 800467c:	89fb      	ldrh	r3, [r7, #14]
 800467e:	f642 12ad 	movw	r2, #10669	@ 0x29ad
 8004682:	4293      	cmp	r3, r2
 8004684:	d90c      	bls.n	80046a0 <_ZN6btnMat6updateEPt+0x70>
 8004686:	89fb      	ldrh	r3, [r7, #14]
 8004688:	f642 5295 	movw	r2, #11669	@ 0x2d95
 800468c:	4293      	cmp	r3, r2
 800468e:	d807      	bhi.n	80046a0 <_ZN6btnMat6updateEPt+0x70>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	f043 0302 	orr.w	r3, r3, #2
 8004698:	b29a      	uxth	r2, r3
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	801a      	strh	r2, [r3, #0]
 800469e:	e0f9      	b.n	8004894 <_ZN6btnMat6updateEPt+0x264>
	else if (btn_read >= 7648 && btn_read < 8648)   	{*matrixOP |= (1 << 2);}			//S3
 80046a0:	89fb      	ldrh	r3, [r7, #14]
 80046a2:	f5b3 5fef 	cmp.w	r3, #7648	@ 0x1de0
 80046a6:	d30c      	bcc.n	80046c2 <_ZN6btnMat6updateEPt+0x92>
 80046a8:	89fb      	ldrh	r3, [r7, #14]
 80046aa:	f242 12c7 	movw	r2, #8647	@ 0x21c7
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d807      	bhi.n	80046c2 <_ZN6btnMat6updateEPt+0x92>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	881b      	ldrh	r3, [r3, #0]
 80046b6:	f043 0304 	orr.w	r3, r3, #4
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	801a      	strh	r2, [r3, #0]
 80046c0:	e0e8      	b.n	8004894 <_ZN6btnMat6updateEPt+0x264>
	else if (btn_read >= 4283 && btn_read < 5283)   	{*matrixOP |= (1 << 3);}			//S4
 80046c2:	89fb      	ldrh	r3, [r7, #14]
 80046c4:	f241 02ba 	movw	r2, #4282	@ 0x10ba
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d90c      	bls.n	80046e6 <_ZN6btnMat6updateEPt+0xb6>
 80046cc:	89fb      	ldrh	r3, [r7, #14]
 80046ce:	f241 42a2 	movw	r2, #5282	@ 0x14a2
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d807      	bhi.n	80046e6 <_ZN6btnMat6updateEPt+0xb6>
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	881b      	ldrh	r3, [r3, #0]
 80046da:	f043 0308 	orr.w	r3, r3, #8
 80046de:	b29a      	uxth	r2, r3
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	801a      	strh	r2, [r3, #0]
 80046e4:	e0d6      	b.n	8004894 <_ZN6btnMat6updateEPt+0x264>
	else if (btn_read >= 25414 && btn_read < 26414) 	{*matrixOP |= (1 << 4);}			//S5
 80046e6:	89fb      	ldrh	r3, [r7, #14]
 80046e8:	f246 3245 	movw	r2, #25413	@ 0x6345
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d90c      	bls.n	800470a <_ZN6btnMat6updateEPt+0xda>
 80046f0:	89fb      	ldrh	r3, [r7, #14]
 80046f2:	f246 722d 	movw	r2, #26413	@ 0x672d
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d807      	bhi.n	800470a <_ZN6btnMat6updateEPt+0xda>
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	f043 0310 	orr.w	r3, r3, #16
 8004702:	b29a      	uxth	r2, r3
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	801a      	strh	r2, [r3, #0]
 8004708:	e0c4      	b.n	8004894 <_ZN6btnMat6updateEPt+0x264>
	else if (btn_read >= 23820 && btn_read < 24820) 	{*matrixOP |= (1 << 5);}			//S6
 800470a:	89fb      	ldrh	r3, [r7, #14]
 800470c:	f645 520b 	movw	r2, #23819	@ 0x5d0b
 8004710:	4293      	cmp	r3, r2
 8004712:	d90c      	bls.n	800472e <_ZN6btnMat6updateEPt+0xfe>
 8004714:	89fb      	ldrh	r3, [r7, #14]
 8004716:	f246 02f3 	movw	r2, #24819	@ 0x60f3
 800471a:	4293      	cmp	r3, r2
 800471c:	d807      	bhi.n	800472e <_ZN6btnMat6updateEPt+0xfe>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	f043 0320 	orr.w	r3, r3, #32
 8004726:	b29a      	uxth	r2, r3
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	801a      	strh	r2, [r3, #0]
 800472c:	e0b2      	b.n	8004894 <_ZN6btnMat6updateEPt+0x264>
	else if (btn_read >= 22083 && btn_read < 23083) 	{*matrixOP |= (1 << 6);}			//S7
 800472e:	89fb      	ldrh	r3, [r7, #14]
 8004730:	f245 6242 	movw	r2, #22082	@ 0x5642
 8004734:	4293      	cmp	r3, r2
 8004736:	d90c      	bls.n	8004752 <_ZN6btnMat6updateEPt+0x122>
 8004738:	89fb      	ldrh	r3, [r7, #14]
 800473a:	f645 222a 	movw	r2, #23082	@ 0x5a2a
 800473e:	4293      	cmp	r3, r2
 8004740:	d807      	bhi.n	8004752 <_ZN6btnMat6updateEPt+0x122>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800474a:	b29a      	uxth	r2, r3
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	801a      	strh	r2, [r3, #0]
 8004750:	e0a0      	b.n	8004894 <_ZN6btnMat6updateEPt+0x264>
	else if (btn_read >= 20201 && btn_read < 21201) 	{*matrixOP |= (1 << 7);}			//S8
 8004752:	89fb      	ldrh	r3, [r7, #14]
 8004754:	f644 62e8 	movw	r2, #20200	@ 0x4ee8
 8004758:	4293      	cmp	r3, r2
 800475a:	d90c      	bls.n	8004776 <_ZN6btnMat6updateEPt+0x146>
 800475c:	89fb      	ldrh	r3, [r7, #14]
 800475e:	f245 22d0 	movw	r2, #21200	@ 0x52d0
 8004762:	4293      	cmp	r3, r2
 8004764:	d807      	bhi.n	8004776 <_ZN6btnMat6updateEPt+0x146>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	881b      	ldrh	r3, [r3, #0]
 800476a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800476e:	b29a      	uxth	r2, r3
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	801a      	strh	r2, [r3, #0]
 8004774:	e08e      	b.n	8004894 <_ZN6btnMat6updateEPt+0x264>
	else if (btn_read >= 32823 && btn_read < 33823) 	{*matrixOP |= (1 << 8);}			//S9
 8004776:	89fb      	ldrh	r3, [r7, #14]
 8004778:	f248 0236 	movw	r2, #32822	@ 0x8036
 800477c:	4293      	cmp	r3, r2
 800477e:	d90c      	bls.n	800479a <_ZN6btnMat6updateEPt+0x16a>
 8004780:	89fb      	ldrh	r3, [r7, #14]
 8004782:	f248 421e 	movw	r2, #33822	@ 0x841e
 8004786:	4293      	cmp	r3, r2
 8004788:	d807      	bhi.n	800479a <_ZN6btnMat6updateEPt+0x16a>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004792:	b29a      	uxth	r2, r3
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	801a      	strh	r2, [r3, #0]
 8004798:	e07c      	b.n	8004894 <_ZN6btnMat6updateEPt+0x264>
	else if (btn_read >= 31792 && btn_read < 32792) 	{*matrixOP |= (1 << 9);}			//S10
 800479a:	89fb      	ldrh	r3, [r7, #14]
 800479c:	f647 422f 	movw	r2, #31791	@ 0x7c2f
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d90c      	bls.n	80047be <_ZN6btnMat6updateEPt+0x18e>
 80047a4:	89fb      	ldrh	r3, [r7, #14]
 80047a6:	f248 0217 	movw	r2, #32791	@ 0x8017
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d807      	bhi.n	80047be <_ZN6btnMat6updateEPt+0x18e>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	881b      	ldrh	r3, [r3, #0]
 80047b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047b6:	b29a      	uxth	r2, r3
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	801a      	strh	r2, [r3, #0]
 80047bc:	e06a      	b.n	8004894 <_ZN6btnMat6updateEPt+0x264>
	else if (btn_read >= 30672 && btn_read < 31672) 	{*matrixOP |= (1 << 10);}			//S11
 80047be:	89fb      	ldrh	r3, [r7, #14]
 80047c0:	f247 72cf 	movw	r2, #30671	@ 0x77cf
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d90c      	bls.n	80047e2 <_ZN6btnMat6updateEPt+0x1b2>
 80047c8:	89fb      	ldrh	r3, [r7, #14]
 80047ca:	f647 32b7 	movw	r2, #31671	@ 0x7bb7
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d807      	bhi.n	80047e2 <_ZN6btnMat6updateEPt+0x1b2>
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047da:	b29a      	uxth	r2, r3
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	801a      	strh	r2, [r3, #0]
 80047e0:	e058      	b.n	8004894 <_ZN6btnMat6updateEPt+0x264>
	else if (btn_read >= 29518 && btn_read < 30518) 	{*matrixOP |= (1 << 11);}			//S12
 80047e2:	89fb      	ldrh	r3, [r7, #14]
 80047e4:	f247 324d 	movw	r2, #29517	@ 0x734d
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d90c      	bls.n	8004806 <_ZN6btnMat6updateEPt+0x1d6>
 80047ec:	89fb      	ldrh	r3, [r7, #14]
 80047ee:	f247 7235 	movw	r2, #30517	@ 0x7735
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d807      	bhi.n	8004806 <_ZN6btnMat6updateEPt+0x1d6>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	881b      	ldrh	r3, [r3, #0]
 80047fa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80047fe:	b29a      	uxth	r2, r3
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	801a      	strh	r2, [r3, #0]
 8004804:	e046      	b.n	8004894 <_ZN6btnMat6updateEPt+0x264>
	else if (btn_read >= 38098 && btn_read < 39098)   	{*matrixOP |= (1 << 12);}			//S13
 8004806:	89fb      	ldrh	r3, [r7, #14]
 8004808:	f249 42d1 	movw	r2, #38097	@ 0x94d1
 800480c:	4293      	cmp	r3, r2
 800480e:	d90c      	bls.n	800482a <_ZN6btnMat6updateEPt+0x1fa>
 8004810:	89fb      	ldrh	r3, [r7, #14]
 8004812:	f649 02b9 	movw	r2, #39097	@ 0x98b9
 8004816:	4293      	cmp	r3, r2
 8004818:	d807      	bhi.n	800482a <_ZN6btnMat6updateEPt+0x1fa>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004822:	b29a      	uxth	r2, r3
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	801a      	strh	r2, [r3, #0]
 8004828:	e034      	b.n	8004894 <_ZN6btnMat6updateEPt+0x264>
	else if (btn_read >= 37367 && btn_read < 38367)   	{*matrixOP |= (1 << 13);}			//S14
 800482a:	89fb      	ldrh	r3, [r7, #14]
 800482c:	f249 12f6 	movw	r2, #37366	@ 0x91f6
 8004830:	4293      	cmp	r3, r2
 8004832:	d90c      	bls.n	800484e <_ZN6btnMat6updateEPt+0x21e>
 8004834:	89fb      	ldrh	r3, [r7, #14]
 8004836:	f249 52de 	movw	r2, #38366	@ 0x95de
 800483a:	4293      	cmp	r3, r2
 800483c:	d807      	bhi.n	800484e <_ZN6btnMat6updateEPt+0x21e>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	881b      	ldrh	r3, [r3, #0]
 8004842:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004846:	b29a      	uxth	r2, r3
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	801a      	strh	r2, [r3, #0]
 800484c:	e022      	b.n	8004894 <_ZN6btnMat6updateEPt+0x264>
	else if (btn_read >= 36593 && btn_read < 37593)   	{*matrixOP |= (1 << 14);}			//S15
 800484e:	89fb      	ldrh	r3, [r7, #14]
 8004850:	f648 62f0 	movw	r2, #36592	@ 0x8ef0
 8004854:	4293      	cmp	r3, r2
 8004856:	d90c      	bls.n	8004872 <_ZN6btnMat6updateEPt+0x242>
 8004858:	89fb      	ldrh	r3, [r7, #14]
 800485a:	f249 22d8 	movw	r2, #37592	@ 0x92d8
 800485e:	4293      	cmp	r3, r2
 8004860:	d807      	bhi.n	8004872 <_ZN6btnMat6updateEPt+0x242>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800486a:	b29a      	uxth	r2, r3
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	801a      	strh	r2, [r3, #0]
 8004870:	e010      	b.n	8004894 <_ZN6btnMat6updateEPt+0x264>
	else if (btn_read >= 35795 && btn_read < 36795)   	{*matrixOP |= (1 << 15);}			//S16
 8004872:	89fb      	ldrh	r3, [r7, #14]
 8004874:	f648 32d2 	movw	r2, #35794	@ 0x8bd2
 8004878:	4293      	cmp	r3, r2
 800487a:	d90b      	bls.n	8004894 <_ZN6btnMat6updateEPt+0x264>
 800487c:	89fb      	ldrh	r3, [r7, #14]
 800487e:	f648 72ba 	movw	r2, #36794	@ 0x8fba
 8004882:	4293      	cmp	r3, r2
 8004884:	d806      	bhi.n	8004894 <_ZN6btnMat6updateEPt+0x264>
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	881a      	ldrh	r2, [r3, #0]
 800488a:	4b07      	ldr	r3, [pc, #28]	@ (80048a8 <_ZN6btnMat6updateEPt+0x278>)
 800488c:	4313      	orrs	r3, r2
 800488e:	b29a      	uxth	r2, r3
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	801a      	strh	r2, [r3, #0]

    resetState();
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 f86b 	bl	8004970 <_ZN6btnMat10resetStateEv>

    return;
 800489a:	e000      	b.n	800489e <_ZN6btnMat6updateEPt+0x26e>
	if(btn_read > 40000)								{return;} 							//no buttons pressed
 800489c:	bf00      	nop
}
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40022000 	.word	0x40022000
 80048a8:	ffff8000 	.word	0xffff8000

080048ac <_ZN6btnMat7readADCEP11ADC_TypeDefPt>:


void btnMat::readADC(ADC_TypeDef* adc, uint16_t* read)
{
 80048ac:	b590      	push	{r4, r7, lr}
 80048ae:	b08d      	sub	sp, #52	@ 0x34
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
	uint32_t temp = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint16_t holder[AVERAGE] = {0};
 80048bc:	f107 0314 	add.w	r3, r7, #20
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	605a      	str	r2, [r3, #4]
 80048c6:	609a      	str	r2, [r3, #8]
 80048c8:	60da      	str	r2, [r3, #12]
 80048ca:	611a      	str	r2, [r3, #16]

	for(uint8_t i = 0; i < AVERAGE; i++)
 80048cc:	2300      	movs	r3, #0
 80048ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048d2:	e039      	b.n	8004948 <_ZN6btnMat7readADCEP11ADC_TypeDefPt+0x9c>
	{
	    //Start ADC conversion
	    LL_ADC_REG_StartConversion(adc);
 80048d4:	68b8      	ldr	r0, [r7, #8]
 80048d6:	f7ff fe3d 	bl	8004554 <LL_ADC_REG_StartConversion>
	    //wait until ADC conversion has finished
	    while(LL_ADC_REG_IsConversionOngoing(adc)) {}
 80048da:	bf00      	nop
 80048dc:	68b8      	ldr	r0, [r7, #8]
 80048de:	f7ff fe61 	bl	80045a4 <LL_ADC_REG_IsConversionOngoing>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	bf14      	ite	ne
 80048e8:	2301      	movne	r3, #1
 80048ea:	2300      	moveq	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f4      	bne.n	80048dc <_ZN6btnMat7readADCEP11ADC_TypeDefPt+0x30>
	    //Read in the value on the ADC pin
	    holder[i] = LL_ADC_REG_ReadConversionData16(adc);
 80048f2:	f897 402b 	ldrb.w	r4, [r7, #43]	@ 0x2b
 80048f6:	68b8      	ldr	r0, [r7, #8]
 80048f8:	f7ff fe7a 	bl	80045f0 <LL_ADC_REG_ReadConversionData16>
 80048fc:	4603      	mov	r3, r0
 80048fe:	461a      	mov	r2, r3
 8004900:	0063      	lsls	r3, r4, #1
 8004902:	3330      	adds	r3, #48	@ 0x30
 8004904:	443b      	add	r3, r7
 8004906:	f823 2c1c 	strh.w	r2, [r3, #-28]
	    //Stop ADC conversion
	    LL_ADC_REG_StopConversion(adc);
 800490a:	68b8      	ldr	r0, [r7, #8]
 800490c:	f7ff fe36 	bl	800457c <LL_ADC_REG_StopConversion>
	    //wait until ADC stop conversion has finished
	    while(LL_ADC_REG_IsStopConversionOngoing(adc)) {}
 8004910:	bf00      	nop
 8004912:	68b8      	ldr	r0, [r7, #8]
 8004914:	f7ff fe59 	bl	80045ca <LL_ADC_REG_IsStopConversionOngoing>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	bf14      	ite	ne
 800491e:	2301      	movne	r3, #1
 8004920:	2300      	moveq	r3, #0
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1f4      	bne.n	8004912 <_ZN6btnMat7readADCEP11ADC_TypeDefPt+0x66>
	    temp += holder[i];
 8004928:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	3330      	adds	r3, #48	@ 0x30
 8004930:	443b      	add	r3, r7
 8004932:	f833 3c1c 	ldrh.w	r3, [r3, #-28]
 8004936:	461a      	mov	r2, r3
 8004938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800493a:	4413      	add	r3, r2
 800493c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for(uint8_t i = 0; i < AVERAGE; i++)
 800493e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004942:	3301      	adds	r3, #1
 8004944:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004948:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800494c:	2b09      	cmp	r3, #9
 800494e:	d9c1      	bls.n	80048d4 <_ZN6btnMat7readADCEP11ADC_TypeDefPt+0x28>
	}
	temp /= AVERAGE;
 8004950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004952:	4a06      	ldr	r2, [pc, #24]	@ (800496c <_ZN6btnMat7readADCEP11ADC_TypeDefPt+0xc0>)
 8004954:	fba2 2303 	umull	r2, r3, r2, r3
 8004958:	08db      	lsrs	r3, r3, #3
 800495a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	*read = temp;
 800495c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800495e:	b29a      	uxth	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	801a      	strh	r2, [r3, #0]
	return;
 8004964:	bf00      	nop
}
 8004966:	3734      	adds	r7, #52	@ 0x34
 8004968:	46bd      	mov	sp, r7
 800496a:	bd90      	pop	{r4, r7, pc}
 800496c:	cccccccd 	.word	0xcccccccd

08004970 <_ZN6btnMat10resetStateEv>:

void btnMat::resetState()
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
	matrixState = 0;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	801a      	strh	r2, [r3, #0]
	return;
 800497e:	bf00      	nop
}
 8004980:	370c      	adds	r7, #12
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
	...

0800498c <HAL_GPIO_EXTI_Callback>:
uint8_t SloppyTopEstopFlag = 0;
uint8_t initialEstopCheckFlag = 0;

// Interrupt for the ESTOPS
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	4603      	mov	r3, r0
 8004994:	80fb      	strh	r3, [r7, #6]
	if((GPIO_Pin == GPIO_PIN_0) | (GPIO_Pin == GPIO_PIN_1))
 8004996:	88fb      	ldrh	r3, [r7, #6]
 8004998:	2b01      	cmp	r3, #1
 800499a:	bf0c      	ite	eq
 800499c:	2301      	moveq	r3, #1
 800499e:	2300      	movne	r3, #0
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	88fb      	ldrh	r3, [r7, #6]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	bf0c      	ite	eq
 80049a8:	2301      	moveq	r3, #1
 80049aa:	2300      	movne	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	4313      	orrs	r3, r2
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d003      	beq.n	80049be <HAL_GPIO_EXTI_Callback+0x32>
	{
		SloppyTopEstopFlag = 1;
 80049b6:	4b04      	ldr	r3, [pc, #16]	@ (80049c8 <HAL_GPIO_EXTI_Callback+0x3c>)
 80049b8:	2201      	movs	r2, #1
 80049ba:	701a      	strb	r2, [r3, #0]
		return;
 80049bc:	bf00      	nop
	}
}
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	24000037 	.word	0x24000037

080049cc <_Z12EstopEngagedv>:
 * Level Checking Estops
 * Note: PG0 to 0 so since it is normally closed
 * Note: PG1 to 1 since it introduces a voltage into the system
 *  */ 
void EstopEngaged()
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
	if(((READ(PG,0) == 0) || (READ(PG,1) == 1)))
 80049d0:	4b15      	ldr	r3, [pc, #84]	@ (8004a28 <_Z12EstopEngagedv+0x5c>)
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <_Z12EstopEngagedv+0x1c>
 80049dc:	4b12      	ldr	r3, [pc, #72]	@ (8004a28 <_Z12EstopEngagedv+0x5c>)
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d101      	bne.n	80049ec <_Z12EstopEngagedv+0x20>
 80049e8:	2301      	movs	r3, #1
 80049ea:	e000      	b.n	80049ee <_Z12EstopEngagedv+0x22>
 80049ec:	2300      	movs	r3, #0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d015      	beq.n	8004a1e <_Z12EstopEngagedv+0x52>
	{
		SloppyTopEstopFlag = 1;
 80049f2:	4b0e      	ldr	r3, [pc, #56]	@ (8004a2c <_Z12EstopEngagedv+0x60>)
 80049f4:	2201      	movs	r2, #1
 80049f6:	701a      	strb	r2, [r3, #0]
		CLEAR(PA,3);
 80049f8:	4b0d      	ldr	r3, [pc, #52]	@ (8004a30 <_Z12EstopEngagedv+0x64>)
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	4a0c      	ldr	r2, [pc, #48]	@ (8004a30 <_Z12EstopEngagedv+0x64>)
 80049fe:	f023 0308 	bic.w	r3, r3, #8
 8004a02:	6153      	str	r3, [r2, #20]
		CLEAR(PC,3);
 8004a04:	4b0b      	ldr	r3, [pc, #44]	@ (8004a34 <_Z12EstopEngagedv+0x68>)
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	4a0a      	ldr	r2, [pc, #40]	@ (8004a34 <_Z12EstopEngagedv+0x68>)
 8004a0a:	f023 0308 	bic.w	r3, r3, #8
 8004a0e:	6153      	str	r3, [r2, #20]
		CLEAR(PC,0);
 8004a10:	4b08      	ldr	r3, [pc, #32]	@ (8004a34 <_Z12EstopEngagedv+0x68>)
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	4a07      	ldr	r2, [pc, #28]	@ (8004a34 <_Z12EstopEngagedv+0x68>)
 8004a16:	f023 0301 	bic.w	r3, r3, #1
 8004a1a:	6153      	str	r3, [r2, #20]
	}
	return;
 8004a1c:	bf00      	nop
 8004a1e:	bf00      	nop
}
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	58021800 	.word	0x58021800
 8004a2c:	24000037 	.word	0x24000037
 8004a30:	58020000 	.word	0x58020000
 8004a34:	58020800 	.word	0x58020800

08004a38 <main_cpp_loop>:


void main_cpp_loop()
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	f5ad 7d52 	sub.w	sp, sp, #840	@ 0x348
 8004a3e:	af04      	add	r7, sp, #16
	// This is the object that controls all function for the robot
	Sumo_Robot SloppyTop(&hspi1, &hi2c4, &hi2c1, &hi2c3, &hi2c5, &hi2c2, TIM3);
 8004a40:	4638      	mov	r0, r7
 8004a42:	4b11      	ldr	r3, [pc, #68]	@ (8004a88 <main_cpp_loop+0x50>)
 8004a44:	9303      	str	r3, [sp, #12]
 8004a46:	4b11      	ldr	r3, [pc, #68]	@ (8004a8c <main_cpp_loop+0x54>)
 8004a48:	9302      	str	r3, [sp, #8]
 8004a4a:	4b11      	ldr	r3, [pc, #68]	@ (8004a90 <main_cpp_loop+0x58>)
 8004a4c:	9301      	str	r3, [sp, #4]
 8004a4e:	4b11      	ldr	r3, [pc, #68]	@ (8004a94 <main_cpp_loop+0x5c>)
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	4b11      	ldr	r3, [pc, #68]	@ (8004a98 <main_cpp_loop+0x60>)
 8004a54:	4a11      	ldr	r2, [pc, #68]	@ (8004a9c <main_cpp_loop+0x64>)
 8004a56:	4912      	ldr	r1, [pc, #72]	@ (8004aa0 <main_cpp_loop+0x68>)
 8004a58:	f7fb fcda 	bl	8000410 <_ZN10Sumo_RobotC1EP19__SPI_HandleTypeDefP19__I2C_HandleTypeDefS3_S3_S3_S3_P11TIM_TypeDef>

	// Good idea to clear the ESTOP flag when the microcontroller reboots
	initialEstopCheckFlag = 0;
 8004a5c:	4b11      	ldr	r3, [pc, #68]	@ (8004aa4 <main_cpp_loop+0x6c>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	701a      	strb	r2, [r3, #0]
	SloppyTopEstopFlag = 0;
 8004a62:	4b11      	ldr	r3, [pc, #68]	@ (8004aa8 <main_cpp_loop+0x70>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		// As of 20250214, this merely runs the code for the current state and sets the next state for the next run
		SloppyTop.updateState();
 8004a68:	463b      	mov	r3, r7
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fc f814 	bl	8000a98 <_ZN10Sumo_Robot11updateStateEv>

		// This runs after every update to check if the interrupt fired and the ESTOP has been pressed. The states take
		// such little time to update that there isn't a reason why the robot would need to shut down as soon as the
		// interrupt fires. If we find that it takes an unreasonable amount of time to update future states, we can
		// change how this works.
		EstopEngaged();
 8004a70:	f7ff ffac 	bl	80049cc <_Z12EstopEngagedv>
		if(SloppyTopEstopFlag)
 8004a74:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa8 <main_cpp_loop+0x70>)
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0f5      	beq.n	8004a68 <main_cpp_loop+0x30>
			SloppyTop.EstopActivate();
 8004a7c:	463b      	mov	r3, r7
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fb fd82 	bl	8000588 <_ZN10Sumo_Robot13EstopActivateEv>
		SloppyTop.updateState();
 8004a84:	e7f0      	b.n	8004a68 <main_cpp_loop+0x30>
 8004a86:	bf00      	nop
 8004a88:	40000400 	.word	0x40000400
 8004a8c:	24000090 	.word	0x24000090
 8004a90:	2400018c 	.word	0x2400018c
 8004a94:	240000e4 	.word	0x240000e4
 8004a98:	2400003c 	.word	0x2400003c
 8004a9c:	24000138 	.word	0x24000138
 8004aa0:	240001e0 	.word	0x240001e0
 8004aa4:	24000038 	.word	0x24000038
 8004aa8:	24000037 	.word	0x24000037

08004aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ab0:	4b04      	ldr	r3, [pc, #16]	@ (8004ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	0a1b      	lsrs	r3, r3, #8
 8004ab6:	f003 0307 	and.w	r3, r3, #7
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr
 8004ac4:	e000ed00 	.word	0xe000ed00

08004ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	4603      	mov	r3, r0
 8004ad0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004ad2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	db0b      	blt.n	8004af2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	f003 021f 	and.w	r2, r3, #31
 8004ae0:	4907      	ldr	r1, [pc, #28]	@ (8004b00 <__NVIC_EnableIRQ+0x38>)
 8004ae2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ae6:	095b      	lsrs	r3, r3, #5
 8004ae8:	2001      	movs	r0, #1
 8004aea:	fa00 f202 	lsl.w	r2, r0, r2
 8004aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004af2:	bf00      	nop
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	e000e100 	.word	0xe000e100

08004b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	6039      	str	r1, [r7, #0]
 8004b0e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004b10:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	db0a      	blt.n	8004b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	b2da      	uxtb	r2, r3
 8004b1c:	490c      	ldr	r1, [pc, #48]	@ (8004b50 <__NVIC_SetPriority+0x4c>)
 8004b1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b22:	0112      	lsls	r2, r2, #4
 8004b24:	b2d2      	uxtb	r2, r2
 8004b26:	440b      	add	r3, r1
 8004b28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b2c:	e00a      	b.n	8004b44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	4908      	ldr	r1, [pc, #32]	@ (8004b54 <__NVIC_SetPriority+0x50>)
 8004b34:	88fb      	ldrh	r3, [r7, #6]
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	3b04      	subs	r3, #4
 8004b3c:	0112      	lsls	r2, r2, #4
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	440b      	add	r3, r1
 8004b42:	761a      	strb	r2, [r3, #24]
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	e000e100 	.word	0xe000e100
 8004b54:	e000ed00 	.word	0xe000ed00

08004b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b089      	sub	sp, #36	@ 0x24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f003 0307 	and.w	r3, r3, #7
 8004b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f1c3 0307 	rsb	r3, r3, #7
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	bf28      	it	cs
 8004b76:	2304      	movcs	r3, #4
 8004b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	3304      	adds	r3, #4
 8004b7e:	2b06      	cmp	r3, #6
 8004b80:	d902      	bls.n	8004b88 <NVIC_EncodePriority+0x30>
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	3b03      	subs	r3, #3
 8004b86:	e000      	b.n	8004b8a <NVIC_EncodePriority+0x32>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	fa02 f303 	lsl.w	r3, r2, r3
 8004b96:	43da      	mvns	r2, r3
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	401a      	ands	r2, r3
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ba0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8004baa:	43d9      	mvns	r1, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004bb0:	4313      	orrs	r3, r2
         );
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3724      	adds	r7, #36	@ 0x24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
	...

08004bc0 <LL_ADC_SetChannelPreselection>:
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
    if (ADCx != ADC3)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a18      	ldr	r2, [pc, #96]	@ (8004c30 <LL_ADC_SetChannelPreselection+0x70>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d027      	beq.n	8004c22 <LL_ADC_SetChannelPreselection+0x62>
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d107      	bne.n	8004bec <LL_ADC_SetChannelPreselection+0x2c>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	0e9b      	lsrs	r3, r3, #26
 8004be0:	f003 031f 	and.w	r3, r3, #31
 8004be4:	2201      	movs	r2, #1
 8004be6:	fa02 f303 	lsl.w	r3, r2, r3
 8004bea:	e015      	b.n	8004c18 <LL_ADC_SetChannelPreselection+0x58>
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	fa93 f3a3 	rbit	r3, r3
 8004bf6:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <LL_ADC_SetChannelPreselection+0x46>
  {
    return 32U;
 8004c02:	2320      	movs	r3, #32
 8004c04:	e003      	b.n	8004c0e <LL_ADC_SetChannelPreselection+0x4e>
  }
  return __builtin_clz(value);
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	fab3 f383 	clz	r3, r3
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	f003 031f 	and.w	r3, r3, #31
 8004c12:	2201      	movs	r2, #1
 8004c14:	fa02 f303 	lsl.w	r3, r2, r3
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	69d2      	ldr	r2, [r2, #28]
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	61da      	str	r2, [r3, #28]
}
 8004c22:	bf00      	nop
 8004c24:	371c      	adds	r7, #28
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	58026000 	.word	0x58026000

08004c34 <LL_ADC_REG_SetSequencerRanks>:
{
 8004c34:	b480      	push	{r7}
 8004c36:	b087      	sub	sp, #28
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	3330      	adds	r3, #48	@ 0x30
 8004c44:	461a      	mov	r2, r3
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	0a1b      	lsrs	r3, r3, #8
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	f003 030c 	and.w	r3, r3, #12
 8004c50:	4413      	add	r3, r2
 8004c52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	f003 031f 	and.w	r3, r3, #31
 8004c5e:	211f      	movs	r1, #31
 8004c60:	fa01 f303 	lsl.w	r3, r1, r3
 8004c64:	43db      	mvns	r3, r3
 8004c66:	401a      	ands	r2, r3
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	0e9b      	lsrs	r3, r3, #26
 8004c6c:	f003 011f 	and.w	r1, r3, #31
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f003 031f 	and.w	r3, r3, #31
 8004c76:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7a:	431a      	orrs	r2, r3
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	601a      	str	r2, [r3, #0]
}
 8004c80:	bf00      	nop
 8004c82:	371c      	adds	r7, #28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <LL_ADC_REG_SetDataTransferMode>:
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f023 0203 	bic.w	r2, r3, #3
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	60da      	str	r2, [r3, #12]
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr

08004cb2 <LL_ADC_SetChannelSamplingTime>:
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b087      	sub	sp, #28
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	60f8      	str	r0, [r7, #12]
 8004cba:	60b9      	str	r1, [r7, #8]
 8004cbc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	3314      	adds	r3, #20
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	0e5b      	lsrs	r3, r3, #25
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	4413      	add	r3, r2
 8004cd0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	0d1b      	lsrs	r3, r3, #20
 8004cda:	f003 031f 	and.w	r3, r3, #31
 8004cde:	2107      	movs	r1, #7
 8004ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ce4:	43db      	mvns	r3, r3
 8004ce6:	401a      	ands	r2, r3
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	0d1b      	lsrs	r3, r3, #20
 8004cec:	f003 031f 	and.w	r3, r3, #31
 8004cf0:	6879      	ldr	r1, [r7, #4]
 8004cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8004cf6:	431a      	orrs	r2, r3
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	601a      	str	r2, [r3, #0]
}
 8004cfc:	bf00      	nop
 8004cfe:	371c      	adds	r7, #28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <LL_ADC_SetChannelSingleDiff>:
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4a1a      	ldr	r2, [pc, #104]	@ (8004d80 <LL_ADC_SetChannelSingleDiff+0x78>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d115      	bne.n	8004d48 <LL_ADC_SetChannelSingleDiff+0x40>
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	401a      	ands	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f003 0318 	and.w	r3, r3, #24
 8004d32:	4914      	ldr	r1, [pc, #80]	@ (8004d84 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004d34:	40d9      	lsrs	r1, r3
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	400b      	ands	r3, r1
 8004d3a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8004d46:	e014      	b.n	8004d72 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d54:	43db      	mvns	r3, r3
 8004d56:	401a      	ands	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f003 0318 	and.w	r3, r3, #24
 8004d5e:	4909      	ldr	r1, [pc, #36]	@ (8004d84 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8004d60:	40d9      	lsrs	r1, r3
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	400b      	ands	r3, r1
 8004d66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8004d72:	bf00      	nop
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	58026000 	.word	0x58026000
 8004d84:	000fffff 	.word	0x000fffff

08004d88 <LL_ADC_SetOverSamplingScope>:
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	691a      	ldr	r2, [r3, #16]
 8004d96:	4b06      	ldr	r3, [pc, #24]	@ (8004db0 <LL_ADC_SetOverSamplingScope+0x28>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	611a      	str	r2, [r3, #16]
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	fffffbfc 	.word	0xfffffbfc

08004db4 <LL_ADC_DisableDeepPowerDown>:
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689a      	ldr	r2, [r3, #8]
 8004dc0:	4b04      	ldr	r3, [pc, #16]	@ (8004dd4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	6093      	str	r3, [r2, #8]
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr
 8004dd4:	5fffffc0 	.word	0x5fffffc0

08004dd8 <LL_ADC_EnableInternalRegulator>:
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689a      	ldr	r2, [r3, #8]
 8004de4:	4b05      	ldr	r3, [pc, #20]	@ (8004dfc <LL_ADC_EnableInternalRegulator+0x24>)
 8004de6:	4013      	ands	r3, r2
 8004de8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	609a      	str	r2, [r3, #8]
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	6fffffc0 	.word	0x6fffffc0

08004e00 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b083      	sub	sp, #12
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	601a      	str	r2, [r3, #0]
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	2b01      	cmp	r3, #1
 8004e2e:	d028      	beq.n	8004e82 <LL_TIM_OC_DisableFast+0x62>
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d023      	beq.n	8004e7e <LL_TIM_OC_DisableFast+0x5e>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b10      	cmp	r3, #16
 8004e3a:	d01e      	beq.n	8004e7a <LL_TIM_OC_DisableFast+0x5a>
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2b40      	cmp	r3, #64	@ 0x40
 8004e40:	d019      	beq.n	8004e76 <LL_TIM_OC_DisableFast+0x56>
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e48:	d013      	beq.n	8004e72 <LL_TIM_OC_DisableFast+0x52>
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e50:	d00d      	beq.n	8004e6e <LL_TIM_OC_DisableFast+0x4e>
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e58:	d007      	beq.n	8004e6a <LL_TIM_OC_DisableFast+0x4a>
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e60:	d101      	bne.n	8004e66 <LL_TIM_OC_DisableFast+0x46>
 8004e62:	2307      	movs	r3, #7
 8004e64:	e00e      	b.n	8004e84 <LL_TIM_OC_DisableFast+0x64>
 8004e66:	2308      	movs	r3, #8
 8004e68:	e00c      	b.n	8004e84 <LL_TIM_OC_DisableFast+0x64>
 8004e6a:	2306      	movs	r3, #6
 8004e6c:	e00a      	b.n	8004e84 <LL_TIM_OC_DisableFast+0x64>
 8004e6e:	2305      	movs	r3, #5
 8004e70:	e008      	b.n	8004e84 <LL_TIM_OC_DisableFast+0x64>
 8004e72:	2304      	movs	r3, #4
 8004e74:	e006      	b.n	8004e84 <LL_TIM_OC_DisableFast+0x64>
 8004e76:	2303      	movs	r3, #3
 8004e78:	e004      	b.n	8004e84 <LL_TIM_OC_DisableFast+0x64>
 8004e7a:	2302      	movs	r3, #2
 8004e7c:	e002      	b.n	8004e84 <LL_TIM_OC_DisableFast+0x64>
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e000      	b.n	8004e84 <LL_TIM_OC_DisableFast+0x64>
 8004e82:	2300      	movs	r3, #0
 8004e84:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	3318      	adds	r3, #24
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	4a0b      	ldr	r2, [pc, #44]	@ (8004ebc <LL_TIM_OC_DisableFast+0x9c>)
 8004e90:	5cd3      	ldrb	r3, [r2, r3]
 8004e92:	440b      	add	r3, r1
 8004e94:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	7bfb      	ldrb	r3, [r7, #15]
 8004e9c:	4908      	ldr	r1, [pc, #32]	@ (8004ec0 <LL_TIM_OC_DisableFast+0xa0>)
 8004e9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	2304      	movs	r3, #4
 8004ea4:	408b      	lsls	r3, r1
 8004ea6:	43db      	mvns	r3, r3
 8004ea8:	401a      	ands	r2, r3
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	601a      	str	r2, [r3, #0]

}
 8004eae:	bf00      	nop
 8004eb0:	3714      	adds	r7, #20
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	0800d8e8 	.word	0x0800d8e8
 8004ec0:	0800d8f4 	.word	0x0800d8f4

08004ec4 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d028      	beq.n	8004f26 <LL_TIM_OC_EnablePreload+0x62>
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	d023      	beq.n	8004f22 <LL_TIM_OC_EnablePreload+0x5e>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b10      	cmp	r3, #16
 8004ede:	d01e      	beq.n	8004f1e <LL_TIM_OC_EnablePreload+0x5a>
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b40      	cmp	r3, #64	@ 0x40
 8004ee4:	d019      	beq.n	8004f1a <LL_TIM_OC_EnablePreload+0x56>
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eec:	d013      	beq.n	8004f16 <LL_TIM_OC_EnablePreload+0x52>
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ef4:	d00d      	beq.n	8004f12 <LL_TIM_OC_EnablePreload+0x4e>
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004efc:	d007      	beq.n	8004f0e <LL_TIM_OC_EnablePreload+0x4a>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f04:	d101      	bne.n	8004f0a <LL_TIM_OC_EnablePreload+0x46>
 8004f06:	2307      	movs	r3, #7
 8004f08:	e00e      	b.n	8004f28 <LL_TIM_OC_EnablePreload+0x64>
 8004f0a:	2308      	movs	r3, #8
 8004f0c:	e00c      	b.n	8004f28 <LL_TIM_OC_EnablePreload+0x64>
 8004f0e:	2306      	movs	r3, #6
 8004f10:	e00a      	b.n	8004f28 <LL_TIM_OC_EnablePreload+0x64>
 8004f12:	2305      	movs	r3, #5
 8004f14:	e008      	b.n	8004f28 <LL_TIM_OC_EnablePreload+0x64>
 8004f16:	2304      	movs	r3, #4
 8004f18:	e006      	b.n	8004f28 <LL_TIM_OC_EnablePreload+0x64>
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e004      	b.n	8004f28 <LL_TIM_OC_EnablePreload+0x64>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	e002      	b.n	8004f28 <LL_TIM_OC_EnablePreload+0x64>
 8004f22:	2301      	movs	r3, #1
 8004f24:	e000      	b.n	8004f28 <LL_TIM_OC_EnablePreload+0x64>
 8004f26:	2300      	movs	r3, #0
 8004f28:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3318      	adds	r3, #24
 8004f2e:	4619      	mov	r1, r3
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	4a0a      	ldr	r2, [pc, #40]	@ (8004f5c <LL_TIM_OC_EnablePreload+0x98>)
 8004f34:	5cd3      	ldrb	r3, [r2, r3]
 8004f36:	440b      	add	r3, r1
 8004f38:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
 8004f40:	4907      	ldr	r1, [pc, #28]	@ (8004f60 <LL_TIM_OC_EnablePreload+0x9c>)
 8004f42:	5ccb      	ldrb	r3, [r1, r3]
 8004f44:	4619      	mov	r1, r3
 8004f46:	2308      	movs	r3, #8
 8004f48:	408b      	lsls	r3, r1
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	601a      	str	r2, [r3, #0]
}
 8004f50:	bf00      	nop
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	0800d8e8 	.word	0x0800d8e8
 8004f60:	0800d8f4 	.word	0x0800d8f4

08004f64 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	4b06      	ldr	r3, [pc, #24]	@ (8004f8c <LL_TIM_SetClockSource+0x28>)
 8004f74:	4013      	ands	r3, r2
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	609a      	str	r2, [r3, #8]
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	fffebff8 	.word	0xfffebff8

08004f90 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	605a      	str	r2, [r3, #4]
}
 8004faa:	bf00      	nop
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	609a      	str	r2, [r3, #8]
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
	...

08004fd8 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800500c <LL_AHB1_GRP1_EnableClock+0x34>)
 8004fe2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8004fe6:	4909      	ldr	r1, [pc, #36]	@ (800500c <LL_AHB1_GRP1_EnableClock+0x34>)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	f8c1 30d8 	str.w	r3, [r1, #216]	@ 0xd8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004ff0:	4b06      	ldr	r3, [pc, #24]	@ (800500c <LL_AHB1_GRP1_EnableClock+0x34>)
 8004ff2:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
}
 8004ffe:	bf00      	nop
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	58024400 	.word	0x58024400

08005010 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 8005010:	b480      	push	{r7}
 8005012:	b085      	sub	sp, #20
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 8005018:	4b0a      	ldr	r3, [pc, #40]	@ (8005044 <LL_AHB4_GRP1_EnableClock+0x34>)
 800501a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800501e:	4909      	ldr	r1, [pc, #36]	@ (8005044 <LL_AHB4_GRP1_EnableClock+0x34>)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4313      	orrs	r3, r2
 8005024:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8005028:	4b06      	ldr	r3, [pc, #24]	@ (8005044 <LL_AHB4_GRP1_EnableClock+0x34>)
 800502a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4013      	ands	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005034:	68fb      	ldr	r3, [r7, #12]
}
 8005036:	bf00      	nop
 8005038:	3714      	adds	r7, #20
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	58024400 	.word	0x58024400

08005048 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8005050:	4b0a      	ldr	r3, [pc, #40]	@ (800507c <LL_APB1_GRP1_EnableClock+0x34>)
 8005052:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8005056:	4909      	ldr	r1, [pc, #36]	@ (800507c <LL_APB1_GRP1_EnableClock+0x34>)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4313      	orrs	r3, r2
 800505c:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8005060:	4b06      	ldr	r3, [pc, #24]	@ (800507c <LL_APB1_GRP1_EnableClock+0x34>)
 8005062:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4013      	ands	r3, r2
 800506a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800506c:	68fb      	ldr	r3, [r7, #12]
}
 800506e:	bf00      	nop
 8005070:	3714      	adds	r7, #20
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	58024400 	.word	0x58024400

08005080 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8005084:	f000 fd4a 	bl	8005b1c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005088:	f001 f928 	bl	80062dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800508c:	f000 f816 	bl	80050bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005090:	f000 fc12 	bl	80058b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8005094:	f000 f880 	bl	8005198 <MX_ADC1_Init>
  MX_I2C1_Init();
 8005098:	f000 f9a6 	bl	80053e8 <MX_I2C1_Init>
  MX_I2C2_Init();
 800509c:	f000 f9e4 	bl	8005468 <MX_I2C2_Init>
  MX_I2C3_Init();
 80050a0:	f000 fa22 	bl	80054e8 <MX_I2C3_Init>
  MX_I2C4_Init();
 80050a4:	f000 fa60 	bl	8005568 <MX_I2C4_Init>
  MX_I2C5_Init();
 80050a8:	f000 fa9e 	bl	80055e8 <MX_I2C5_Init>
  MX_SPI1_Init();
 80050ac:	f000 fadc 	bl	8005668 <MX_SPI1_Init>
  MX_TIM3_Init();
 80050b0:	f000 fb32 	bl	8005718 <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  main_cpp_loop();
 80050b4:	f7ff fcc0 	bl	8004a38 <main_cpp_loop>
  while (1)
 80050b8:	bf00      	nop
 80050ba:	e7fd      	b.n	80050b8 <main+0x38>

080050bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b09c      	sub	sp, #112	@ 0x70
 80050c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80050c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050c6:	224c      	movs	r2, #76	@ 0x4c
 80050c8:	2100      	movs	r1, #0
 80050ca:	4618      	mov	r0, r3
 80050cc:	f006 f83c 	bl	800b148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80050d0:	1d3b      	adds	r3, r7, #4
 80050d2:	2220      	movs	r2, #32
 80050d4:	2100      	movs	r1, #0
 80050d6:	4618      	mov	r0, r3
 80050d8:	f006 f836 	bl	800b148 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80050dc:	2002      	movs	r0, #2
 80050de:	f002 fb3b 	bl	8007758 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80050e2:	2300      	movs	r3, #0
 80050e4:	603b      	str	r3, [r7, #0]
 80050e6:	4b2b      	ldr	r3, [pc, #172]	@ (8005194 <SystemClock_Config+0xd8>)
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	4a2a      	ldr	r2, [pc, #168]	@ (8005194 <SystemClock_Config+0xd8>)
 80050ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050f0:	6193      	str	r3, [r2, #24]
 80050f2:	4b28      	ldr	r3, [pc, #160]	@ (8005194 <SystemClock_Config+0xd8>)
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80050fe:	bf00      	nop
 8005100:	4b24      	ldr	r3, [pc, #144]	@ (8005194 <SystemClock_Config+0xd8>)
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005108:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800510c:	d1f8      	bne.n	8005100 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800510e:	2301      	movs	r3, #1
 8005110:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005112:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005116:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005118:	2302      	movs	r3, #2
 800511a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800511c:	2302      	movs	r3, #2
 800511e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005120:	2301      	movs	r3, #1
 8005122:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 45;
 8005124:	232d      	movs	r3, #45	@ 0x2d
 8005126:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8005128:	2301      	movs	r3, #1
 800512a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800512c:	2302      	movs	r3, #2
 800512e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005130:	2302      	movs	r3, #2
 8005132:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8005134:	230c      	movs	r3, #12
 8005136:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005138:	2300      	movs	r3, #0
 800513a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005140:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005144:	4618      	mov	r0, r3
 8005146:	f002 fb41 	bl	80077cc <HAL_RCC_OscConfig>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d001      	beq.n	8005154 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8005150:	f000 fd10 	bl	8005b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005154:	233f      	movs	r3, #63	@ 0x3f
 8005156:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005158:	2303      	movs	r3, #3
 800515a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800515c:	2300      	movs	r3, #0
 800515e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8005160:	2308      	movs	r3, #8
 8005162:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8005164:	2340      	movs	r3, #64	@ 0x40
 8005166:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8005168:	2340      	movs	r3, #64	@ 0x40
 800516a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800516c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005170:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8005172:	2340      	movs	r3, #64	@ 0x40
 8005174:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005176:	1d3b      	adds	r3, r7, #4
 8005178:	2102      	movs	r1, #2
 800517a:	4618      	mov	r0, r3
 800517c:	f002 ff00 	bl	8007f80 <HAL_RCC_ClockConfig>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <SystemClock_Config+0xce>
  {
    Error_Handler();
 8005186:	f000 fcf5 	bl	8005b74 <Error_Handler>
  }
}
 800518a:	bf00      	nop
 800518c:	3770      	adds	r7, #112	@ 0x70
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	58024800 	.word	0x58024800

08005198 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b0c4      	sub	sp, #272	@ 0x110
 800519c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800519e:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
 80051a6:	605a      	str	r2, [r3, #4]
 80051a8:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80051aa:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]
 80051b2:	605a      	str	r2, [r3, #4]
 80051b4:	609a      	str	r2, [r3, #8]
 80051b6:	60da      	str	r2, [r3, #12]
 80051b8:	611a      	str	r2, [r3, #16]
 80051ba:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80051bc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80051c0:	2200      	movs	r2, #0
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	605a      	str	r2, [r3, #4]
 80051c6:	609a      	str	r2, [r3, #8]
 80051c8:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051ca:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]
 80051d2:	605a      	str	r2, [r3, #4]
 80051d4:	609a      	str	r2, [r3, #8]
 80051d6:	60da      	str	r2, [r3, #12]
 80051d8:	611a      	str	r2, [r3, #16]
 80051da:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80051dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80051e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80051e4:	4618      	mov	r0, r3
 80051e6:	23b8      	movs	r3, #184	@ 0xb8
 80051e8:	461a      	mov	r2, r3
 80051ea:	2100      	movs	r1, #0
 80051ec:	f005 ffac 	bl	800b148 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80051f0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80051f4:	f5a3 7184 	sub.w	r1, r3, #264	@ 0x108
 80051f8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80051fc:	f04f 0300 	mov.w	r3, #0
 8005200:	e9c1 2300 	strd	r2, r3, [r1]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 8005204:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800520c:	2201      	movs	r2, #1
 800520e:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 25;
 8005210:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005214:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005218:	2219      	movs	r2, #25
 800521a:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 20;
 800521c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005220:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005224:	2214      	movs	r2, #20
 8005226:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8005228:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800522c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005230:	2202      	movs	r2, #2
 8005232:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8005234:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800523c:	2202      	movs	r2, #2
 800523e:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8005240:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005244:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005248:	22c0      	movs	r2, #192	@ 0xc0
 800524a:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800524c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005250:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005254:	2200      	movs	r2, #0
 8005256:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8005258:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800525c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005260:	2200      	movs	r2, #0
 8005262:	625a      	str	r2, [r3, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8005264:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005268:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800526c:	2200      	movs	r2, #0
 800526e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005272:	f107 0308 	add.w	r3, r7, #8
 8005276:	4618      	mov	r0, r3
 8005278:	f003 f9b2 	bl	80085e0 <HAL_RCCEx_PeriphCLKConfig>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d001      	beq.n	8005286 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8005282:	f000 fc77 	bl	8005b74 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 8005286:	2020      	movs	r0, #32
 8005288:	f7ff fea6 	bl	8004fd8 <LL_AHB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOF);
 800528c:	2020      	movs	r0, #32
 800528e:	f7ff febf 	bl	8005010 <LL_AHB4_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PF11   ------> ADC1_INP2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8005292:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005296:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800529a:	2303      	movs	r3, #3
 800529c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80052a0:	2300      	movs	r3, #0
 80052a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80052a6:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80052aa:	4619      	mov	r1, r3
 80052ac:	4847      	ldr	r0, [pc, #284]	@ (80053cc <MX_ADC1_Init+0x234>)
 80052ae:	f005 fa91 	bl	800a7d4 <LL_GPIO_Init>

  /* ADC1 interrupt Init */
  NVIC_SetPriority(ADC_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80052b2:	f7ff fbfb 	bl	8004aac <__NVIC_GetPriorityGrouping>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2200      	movs	r2, #0
 80052ba:	2100      	movs	r1, #0
 80052bc:	4618      	mov	r0, r3
 80052be:	f7ff fc4b 	bl	8004b58 <NVIC_EncodePriority>
 80052c2:	4603      	mov	r3, r0
 80052c4:	4619      	mov	r1, r3
 80052c6:	2012      	movs	r0, #18
 80052c8:	f7ff fc1c 	bl	8004b04 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC_IRQn);
 80052cc:	2012      	movs	r0, #18
 80052ce:	f7ff fbfb 	bl	8004ac8 <__NVIC_EnableIRQ>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 80052d2:	2100      	movs	r1, #0
 80052d4:	483e      	ldr	r0, [pc, #248]	@ (80053d0 <MX_ADC1_Init+0x238>)
 80052d6:	f7ff fd57 	bl	8004d88 <LL_ADC_SetOverSamplingScope>
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_16B;
 80052da:	2300      	movs	r3, #0
 80052dc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80052e0:	2300      	movs	r3, #0
 80052e2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80052e6:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 80052ea:	4619      	mov	r1, r3
 80052ec:	4838      	ldr	r0, [pc, #224]	@ (80053d0 <MX_ADC1_Init+0x238>)
 80052ee:	f005 f8f5 	bl	800a4dc <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80052f2:	2300      	movs	r3, #0
 80052f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_DISABLE;
 80052f8:	2300      	movs	r3, #0
 80052fa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  ADC_REG_InitStruct.SequencerDiscont = DISABLE;
 80052fe:	2300      	movs	r3, #0
 8005300:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_SINGLE;
 8005304:	2300      	movs	r3, #0
 8005306:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 800530a:	2300      	movs	r3, #0
 800530c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8005310:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8005314:	4619      	mov	r1, r3
 8005316:	482e      	ldr	r0, [pc, #184]	@ (80053d0 <MX_ADC1_Init+0x238>)
 8005318:	f005 f938 	bl	800a58c <LL_ADC_REG_Init>
  LL_ADC_REG_SetDataTransferMode(ADC1, LL_ADC_REG_DR_TRANSFER);
 800531c:	2100      	movs	r1, #0
 800531e:	482c      	ldr	r0, [pc, #176]	@ (80053d0 <MX_ADC1_Init+0x238>)
 8005320:	f7ff fcb4 	bl	8004c8c <LL_ADC_REG_SetDataTransferMode>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8005324:	2300      	movs	r3, #0
 8005326:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800532a:	2300      	movs	r3, #0
 800532c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8005330:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8005334:	4619      	mov	r1, r3
 8005336:	4827      	ldr	r0, [pc, #156]	@ (80053d4 <MX_ADC1_Init+0x23c>)
 8005338:	f005 f878 	bl	800a42c <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 800533c:	4824      	ldr	r0, [pc, #144]	@ (80053d0 <MX_ADC1_Init+0x238>)
 800533e:	f7ff fd39 	bl	8004db4 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8005342:	4823      	ldr	r0, [pc, #140]	@ (80053d0 <MX_ADC1_Init+0x238>)
 8005344:	f7ff fd48 	bl	8004dd8 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  __IO uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8005348:	4b23      	ldr	r3, [pc, #140]	@ (80053d8 <MX_ADC1_Init+0x240>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	099b      	lsrs	r3, r3, #6
 800534e:	4a23      	ldr	r2, [pc, #140]	@ (80053dc <MX_ADC1_Init+0x244>)
 8005350:	fba2 2303 	umull	r2, r3, r2, r3
 8005354:	099a      	lsrs	r2, r3, #6
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	461a      	mov	r2, r3
 8005360:	4b1f      	ldr	r3, [pc, #124]	@ (80053e0 <MX_ADC1_Init+0x248>)
 8005362:	fba3 2302 	umull	r2, r3, r3, r2
 8005366:	08da      	lsrs	r2, r3, #3
 8005368:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800536c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005370:	601a      	str	r2, [r3, #0]
  while(wait_loop_index != 0)
 8005372:	e00a      	b.n	800538a <MX_ADC1_Init+0x1f2>
  {
    wait_loop_index--;
 8005374:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005378:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	1e5a      	subs	r2, r3, #1
 8005380:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8005384:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005388:	601a      	str	r2, [r3, #0]
  while(wait_loop_index != 0)
 800538a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800538e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1ed      	bne.n	8005374 <MX_ADC1_Init+0x1dc>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 8005398:	4a12      	ldr	r2, [pc, #72]	@ (80053e4 <MX_ADC1_Init+0x24c>)
 800539a:	2106      	movs	r1, #6
 800539c:	480c      	ldr	r0, [pc, #48]	@ (80053d0 <MX_ADC1_Init+0x238>)
 800539e:	f7ff fc49 	bl	8004c34 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80053a2:	2200      	movs	r2, #0
 80053a4:	490f      	ldr	r1, [pc, #60]	@ (80053e4 <MX_ADC1_Init+0x24c>)
 80053a6:	480a      	ldr	r0, [pc, #40]	@ (80053d0 <MX_ADC1_Init+0x238>)
 80053a8:	f7ff fc83 	bl	8004cb2 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SINGLE_ENDED);
 80053ac:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80053b0:	490c      	ldr	r1, [pc, #48]	@ (80053e4 <MX_ADC1_Init+0x24c>)
 80053b2:	4807      	ldr	r0, [pc, #28]	@ (80053d0 <MX_ADC1_Init+0x238>)
 80053b4:	f7ff fca8 	bl	8004d08 <LL_ADC_SetChannelSingleDiff>
  LL_ADC_SetChannelPreselection(ADC1, LL_ADC_CHANNEL_2);
 80053b8:	490a      	ldr	r1, [pc, #40]	@ (80053e4 <MX_ADC1_Init+0x24c>)
 80053ba:	4805      	ldr	r0, [pc, #20]	@ (80053d0 <MX_ADC1_Init+0x238>)
 80053bc:	f7ff fc00 	bl	8004bc0 <LL_ADC_SetChannelPreselection>
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80053c0:	bf00      	nop
 80053c2:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	58021400 	.word	0x58021400
 80053d0:	40022000 	.word	0x40022000
 80053d4:	40022300 	.word	0x40022300
 80053d8:	24000008 	.word	0x24000008
 80053dc:	053e2d63 	.word	0x053e2d63
 80053e0:	cccccccd 	.word	0xcccccccd
 80053e4:	08600004 	.word	0x08600004

080053e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80053ec:	4b1b      	ldr	r3, [pc, #108]	@ (800545c <MX_I2C1_Init+0x74>)
 80053ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005460 <MX_I2C1_Init+0x78>)
 80053f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x207077AF;
 80053f2:	4b1a      	ldr	r3, [pc, #104]	@ (800545c <MX_I2C1_Init+0x74>)
 80053f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005464 <MX_I2C1_Init+0x7c>)
 80053f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80053f8:	4b18      	ldr	r3, [pc, #96]	@ (800545c <MX_I2C1_Init+0x74>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80053fe:	4b17      	ldr	r3, [pc, #92]	@ (800545c <MX_I2C1_Init+0x74>)
 8005400:	2201      	movs	r2, #1
 8005402:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005404:	4b15      	ldr	r3, [pc, #84]	@ (800545c <MX_I2C1_Init+0x74>)
 8005406:	2200      	movs	r2, #0
 8005408:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800540a:	4b14      	ldr	r3, [pc, #80]	@ (800545c <MX_I2C1_Init+0x74>)
 800540c:	2200      	movs	r2, #0
 800540e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005410:	4b12      	ldr	r3, [pc, #72]	@ (800545c <MX_I2C1_Init+0x74>)
 8005412:	2200      	movs	r2, #0
 8005414:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005416:	4b11      	ldr	r3, [pc, #68]	@ (800545c <MX_I2C1_Init+0x74>)
 8005418:	2200      	movs	r2, #0
 800541a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800541c:	4b0f      	ldr	r3, [pc, #60]	@ (800545c <MX_I2C1_Init+0x74>)
 800541e:	2200      	movs	r2, #0
 8005420:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005422:	480e      	ldr	r0, [pc, #56]	@ (800545c <MX_I2C1_Init+0x74>)
 8005424:	f001 fb74 	bl	8006b10 <HAL_I2C_Init>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800542e:	f000 fba1 	bl	8005b74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005432:	2100      	movs	r1, #0
 8005434:	4809      	ldr	r0, [pc, #36]	@ (800545c <MX_I2C1_Init+0x74>)
 8005436:	f002 f8f7 	bl	8007628 <HAL_I2CEx_ConfigAnalogFilter>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005440:	f000 fb98 	bl	8005b74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005444:	2100      	movs	r1, #0
 8005446:	4805      	ldr	r0, [pc, #20]	@ (800545c <MX_I2C1_Init+0x74>)
 8005448:	f002 f939 	bl	80076be <HAL_I2CEx_ConfigDigitalFilter>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005452:	f000 fb8f 	bl	8005b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005456:	bf00      	nop
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	2400003c 	.word	0x2400003c
 8005460:	40005400 	.word	0x40005400
 8005464:	207077af 	.word	0x207077af

08005468 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800546c:	4b1b      	ldr	r3, [pc, #108]	@ (80054dc <MX_I2C2_Init+0x74>)
 800546e:	4a1c      	ldr	r2, [pc, #112]	@ (80054e0 <MX_I2C2_Init+0x78>)
 8005470:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x207077AF;
 8005472:	4b1a      	ldr	r3, [pc, #104]	@ (80054dc <MX_I2C2_Init+0x74>)
 8005474:	4a1b      	ldr	r2, [pc, #108]	@ (80054e4 <MX_I2C2_Init+0x7c>)
 8005476:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8005478:	4b18      	ldr	r3, [pc, #96]	@ (80054dc <MX_I2C2_Init+0x74>)
 800547a:	2200      	movs	r2, #0
 800547c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800547e:	4b17      	ldr	r3, [pc, #92]	@ (80054dc <MX_I2C2_Init+0x74>)
 8005480:	2201      	movs	r2, #1
 8005482:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005484:	4b15      	ldr	r3, [pc, #84]	@ (80054dc <MX_I2C2_Init+0x74>)
 8005486:	2200      	movs	r2, #0
 8005488:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800548a:	4b14      	ldr	r3, [pc, #80]	@ (80054dc <MX_I2C2_Init+0x74>)
 800548c:	2200      	movs	r2, #0
 800548e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005490:	4b12      	ldr	r3, [pc, #72]	@ (80054dc <MX_I2C2_Init+0x74>)
 8005492:	2200      	movs	r2, #0
 8005494:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005496:	4b11      	ldr	r3, [pc, #68]	@ (80054dc <MX_I2C2_Init+0x74>)
 8005498:	2200      	movs	r2, #0
 800549a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800549c:	4b0f      	ldr	r3, [pc, #60]	@ (80054dc <MX_I2C2_Init+0x74>)
 800549e:	2200      	movs	r2, #0
 80054a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80054a2:	480e      	ldr	r0, [pc, #56]	@ (80054dc <MX_I2C2_Init+0x74>)
 80054a4:	f001 fb34 	bl	8006b10 <HAL_I2C_Init>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80054ae:	f000 fb61 	bl	8005b74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80054b2:	2100      	movs	r1, #0
 80054b4:	4809      	ldr	r0, [pc, #36]	@ (80054dc <MX_I2C2_Init+0x74>)
 80054b6:	f002 f8b7 	bl	8007628 <HAL_I2CEx_ConfigAnalogFilter>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80054c0:	f000 fb58 	bl	8005b74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80054c4:	2100      	movs	r1, #0
 80054c6:	4805      	ldr	r0, [pc, #20]	@ (80054dc <MX_I2C2_Init+0x74>)
 80054c8:	f002 f8f9 	bl	80076be <HAL_I2CEx_ConfigDigitalFilter>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80054d2:	f000 fb4f 	bl	8005b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80054d6:	bf00      	nop
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	24000090 	.word	0x24000090
 80054e0:	40005800 	.word	0x40005800
 80054e4:	207077af 	.word	0x207077af

080054e8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80054ec:	4b1b      	ldr	r3, [pc, #108]	@ (800555c <MX_I2C3_Init+0x74>)
 80054ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005560 <MX_I2C3_Init+0x78>)
 80054f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x207077AF;
 80054f2:	4b1a      	ldr	r3, [pc, #104]	@ (800555c <MX_I2C3_Init+0x74>)
 80054f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005564 <MX_I2C3_Init+0x7c>)
 80054f6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80054f8:	4b18      	ldr	r3, [pc, #96]	@ (800555c <MX_I2C3_Init+0x74>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80054fe:	4b17      	ldr	r3, [pc, #92]	@ (800555c <MX_I2C3_Init+0x74>)
 8005500:	2201      	movs	r2, #1
 8005502:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005504:	4b15      	ldr	r3, [pc, #84]	@ (800555c <MX_I2C3_Init+0x74>)
 8005506:	2200      	movs	r2, #0
 8005508:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800550a:	4b14      	ldr	r3, [pc, #80]	@ (800555c <MX_I2C3_Init+0x74>)
 800550c:	2200      	movs	r2, #0
 800550e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005510:	4b12      	ldr	r3, [pc, #72]	@ (800555c <MX_I2C3_Init+0x74>)
 8005512:	2200      	movs	r2, #0
 8005514:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005516:	4b11      	ldr	r3, [pc, #68]	@ (800555c <MX_I2C3_Init+0x74>)
 8005518:	2200      	movs	r2, #0
 800551a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800551c:	4b0f      	ldr	r3, [pc, #60]	@ (800555c <MX_I2C3_Init+0x74>)
 800551e:	2200      	movs	r2, #0
 8005520:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8005522:	480e      	ldr	r0, [pc, #56]	@ (800555c <MX_I2C3_Init+0x74>)
 8005524:	f001 faf4 	bl	8006b10 <HAL_I2C_Init>
 8005528:	4603      	mov	r3, r0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d001      	beq.n	8005532 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800552e:	f000 fb21 	bl	8005b74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005532:	2100      	movs	r1, #0
 8005534:	4809      	ldr	r0, [pc, #36]	@ (800555c <MX_I2C3_Init+0x74>)
 8005536:	f002 f877 	bl	8007628 <HAL_I2CEx_ConfigAnalogFilter>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8005540:	f000 fb18 	bl	8005b74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8005544:	2100      	movs	r1, #0
 8005546:	4805      	ldr	r0, [pc, #20]	@ (800555c <MX_I2C3_Init+0x74>)
 8005548:	f002 f8b9 	bl	80076be <HAL_I2CEx_ConfigDigitalFilter>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d001      	beq.n	8005556 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8005552:	f000 fb0f 	bl	8005b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8005556:	bf00      	nop
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	240000e4 	.word	0x240000e4
 8005560:	40005c00 	.word	0x40005c00
 8005564:	207077af 	.word	0x207077af

08005568 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800556c:	4b1b      	ldr	r3, [pc, #108]	@ (80055dc <MX_I2C4_Init+0x74>)
 800556e:	4a1c      	ldr	r2, [pc, #112]	@ (80055e0 <MX_I2C4_Init+0x78>)
 8005570:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x207077AF;
 8005572:	4b1a      	ldr	r3, [pc, #104]	@ (80055dc <MX_I2C4_Init+0x74>)
 8005574:	4a1b      	ldr	r2, [pc, #108]	@ (80055e4 <MX_I2C4_Init+0x7c>)
 8005576:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8005578:	4b18      	ldr	r3, [pc, #96]	@ (80055dc <MX_I2C4_Init+0x74>)
 800557a:	2200      	movs	r2, #0
 800557c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800557e:	4b17      	ldr	r3, [pc, #92]	@ (80055dc <MX_I2C4_Init+0x74>)
 8005580:	2201      	movs	r2, #1
 8005582:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005584:	4b15      	ldr	r3, [pc, #84]	@ (80055dc <MX_I2C4_Init+0x74>)
 8005586:	2200      	movs	r2, #0
 8005588:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800558a:	4b14      	ldr	r3, [pc, #80]	@ (80055dc <MX_I2C4_Init+0x74>)
 800558c:	2200      	movs	r2, #0
 800558e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005590:	4b12      	ldr	r3, [pc, #72]	@ (80055dc <MX_I2C4_Init+0x74>)
 8005592:	2200      	movs	r2, #0
 8005594:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005596:	4b11      	ldr	r3, [pc, #68]	@ (80055dc <MX_I2C4_Init+0x74>)
 8005598:	2200      	movs	r2, #0
 800559a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800559c:	4b0f      	ldr	r3, [pc, #60]	@ (80055dc <MX_I2C4_Init+0x74>)
 800559e:	2200      	movs	r2, #0
 80055a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80055a2:	480e      	ldr	r0, [pc, #56]	@ (80055dc <MX_I2C4_Init+0x74>)
 80055a4:	f001 fab4 	bl	8006b10 <HAL_I2C_Init>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80055ae:	f000 fae1 	bl	8005b74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80055b2:	2100      	movs	r1, #0
 80055b4:	4809      	ldr	r0, [pc, #36]	@ (80055dc <MX_I2C4_Init+0x74>)
 80055b6:	f002 f837 	bl	8007628 <HAL_I2CEx_ConfigAnalogFilter>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80055c0:	f000 fad8 	bl	8005b74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80055c4:	2100      	movs	r1, #0
 80055c6:	4805      	ldr	r0, [pc, #20]	@ (80055dc <MX_I2C4_Init+0x74>)
 80055c8:	f002 f879 	bl	80076be <HAL_I2CEx_ConfigDigitalFilter>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80055d2:	f000 facf 	bl	8005b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80055d6:	bf00      	nop
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	24000138 	.word	0x24000138
 80055e0:	58001c00 	.word	0x58001c00
 80055e4:	207077af 	.word	0x207077af

080055e8 <MX_I2C5_Init>:
  * @brief I2C5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C5_Init(void)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C5_Init 0 */

  /* USER CODE BEGIN I2C5_Init 1 */

  /* USER CODE END I2C5_Init 1 */
  hi2c5.Instance = I2C5;
 80055ec:	4b1b      	ldr	r3, [pc, #108]	@ (800565c <MX_I2C5_Init+0x74>)
 80055ee:	4a1c      	ldr	r2, [pc, #112]	@ (8005660 <MX_I2C5_Init+0x78>)
 80055f0:	601a      	str	r2, [r3, #0]
  hi2c5.Init.Timing = 0x207077AF;
 80055f2:	4b1a      	ldr	r3, [pc, #104]	@ (800565c <MX_I2C5_Init+0x74>)
 80055f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005664 <MX_I2C5_Init+0x7c>)
 80055f6:	605a      	str	r2, [r3, #4]
  hi2c5.Init.OwnAddress1 = 0;
 80055f8:	4b18      	ldr	r3, [pc, #96]	@ (800565c <MX_I2C5_Init+0x74>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	609a      	str	r2, [r3, #8]
  hi2c5.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80055fe:	4b17      	ldr	r3, [pc, #92]	@ (800565c <MX_I2C5_Init+0x74>)
 8005600:	2201      	movs	r2, #1
 8005602:	60da      	str	r2, [r3, #12]
  hi2c5.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005604:	4b15      	ldr	r3, [pc, #84]	@ (800565c <MX_I2C5_Init+0x74>)
 8005606:	2200      	movs	r2, #0
 8005608:	611a      	str	r2, [r3, #16]
  hi2c5.Init.OwnAddress2 = 0;
 800560a:	4b14      	ldr	r3, [pc, #80]	@ (800565c <MX_I2C5_Init+0x74>)
 800560c:	2200      	movs	r2, #0
 800560e:	615a      	str	r2, [r3, #20]
  hi2c5.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005610:	4b12      	ldr	r3, [pc, #72]	@ (800565c <MX_I2C5_Init+0x74>)
 8005612:	2200      	movs	r2, #0
 8005614:	619a      	str	r2, [r3, #24]
  hi2c5.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005616:	4b11      	ldr	r3, [pc, #68]	@ (800565c <MX_I2C5_Init+0x74>)
 8005618:	2200      	movs	r2, #0
 800561a:	61da      	str	r2, [r3, #28]
  hi2c5.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800561c:	4b0f      	ldr	r3, [pc, #60]	@ (800565c <MX_I2C5_Init+0x74>)
 800561e:	2200      	movs	r2, #0
 8005620:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c5) != HAL_OK)
 8005622:	480e      	ldr	r0, [pc, #56]	@ (800565c <MX_I2C5_Init+0x74>)
 8005624:	f001 fa74 	bl	8006b10 <HAL_I2C_Init>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d001      	beq.n	8005632 <MX_I2C5_Init+0x4a>
  {
    Error_Handler();
 800562e:	f000 faa1 	bl	8005b74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c5, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005632:	2100      	movs	r1, #0
 8005634:	4809      	ldr	r0, [pc, #36]	@ (800565c <MX_I2C5_Init+0x74>)
 8005636:	f001 fff7 	bl	8007628 <HAL_I2CEx_ConfigAnalogFilter>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <MX_I2C5_Init+0x5c>
  {
    Error_Handler();
 8005640:	f000 fa98 	bl	8005b74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c5, 0) != HAL_OK)
 8005644:	2100      	movs	r1, #0
 8005646:	4805      	ldr	r0, [pc, #20]	@ (800565c <MX_I2C5_Init+0x74>)
 8005648:	f002 f839 	bl	80076be <HAL_I2CEx_ConfigDigitalFilter>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <MX_I2C5_Init+0x6e>
  {
    Error_Handler();
 8005652:	f000 fa8f 	bl	8005b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C5_Init 2 */

  /* USER CODE END I2C5_Init 2 */

}
 8005656:	bf00      	nop
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	2400018c 	.word	0x2400018c
 8005660:	40006400 	.word	0x40006400
 8005664:	207077af 	.word	0x207077af

08005668 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800566c:	4b28      	ldr	r3, [pc, #160]	@ (8005710 <MX_SPI1_Init+0xa8>)
 800566e:	4a29      	ldr	r2, [pc, #164]	@ (8005714 <MX_SPI1_Init+0xac>)
 8005670:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005672:	4b27      	ldr	r3, [pc, #156]	@ (8005710 <MX_SPI1_Init+0xa8>)
 8005674:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8005678:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800567a:	4b25      	ldr	r3, [pc, #148]	@ (8005710 <MX_SPI1_Init+0xa8>)
 800567c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005680:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005682:	4b23      	ldr	r3, [pc, #140]	@ (8005710 <MX_SPI1_Init+0xa8>)
 8005684:	2207      	movs	r2, #7
 8005686:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005688:	4b21      	ldr	r3, [pc, #132]	@ (8005710 <MX_SPI1_Init+0xa8>)
 800568a:	2200      	movs	r2, #0
 800568c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800568e:	4b20      	ldr	r3, [pc, #128]	@ (8005710 <MX_SPI1_Init+0xa8>)
 8005690:	2200      	movs	r2, #0
 8005692:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005694:	4b1e      	ldr	r3, [pc, #120]	@ (8005710 <MX_SPI1_Init+0xa8>)
 8005696:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800569a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800569c:	4b1c      	ldr	r3, [pc, #112]	@ (8005710 <MX_SPI1_Init+0xa8>)
 800569e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80056a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80056a4:	4b1a      	ldr	r3, [pc, #104]	@ (8005710 <MX_SPI1_Init+0xa8>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80056aa:	4b19      	ldr	r3, [pc, #100]	@ (8005710 <MX_SPI1_Init+0xa8>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056b0:	4b17      	ldr	r3, [pc, #92]	@ (8005710 <MX_SPI1_Init+0xa8>)
 80056b2:	2200      	movs	r2, #0
 80056b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80056b6:	4b16      	ldr	r3, [pc, #88]	@ (8005710 <MX_SPI1_Init+0xa8>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80056bc:	4b14      	ldr	r3, [pc, #80]	@ (8005710 <MX_SPI1_Init+0xa8>)
 80056be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80056c2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80056c4:	4b12      	ldr	r3, [pc, #72]	@ (8005710 <MX_SPI1_Init+0xa8>)
 80056c6:	2200      	movs	r2, #0
 80056c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80056ca:	4b11      	ldr	r3, [pc, #68]	@ (8005710 <MX_SPI1_Init+0xa8>)
 80056cc:	2200      	movs	r2, #0
 80056ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80056d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005710 <MX_SPI1_Init+0xa8>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80056d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005710 <MX_SPI1_Init+0xa8>)
 80056d8:	2200      	movs	r2, #0
 80056da:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80056dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005710 <MX_SPI1_Init+0xa8>)
 80056de:	2200      	movs	r2, #0
 80056e0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80056e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005710 <MX_SPI1_Init+0xa8>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80056e8:	4b09      	ldr	r3, [pc, #36]	@ (8005710 <MX_SPI1_Init+0xa8>)
 80056ea:	2200      	movs	r2, #0
 80056ec:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80056ee:	4b08      	ldr	r3, [pc, #32]	@ (8005710 <MX_SPI1_Init+0xa8>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80056f4:	4b06      	ldr	r3, [pc, #24]	@ (8005710 <MX_SPI1_Init+0xa8>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80056fa:	4805      	ldr	r0, [pc, #20]	@ (8005710 <MX_SPI1_Init+0xa8>)
 80056fc:	f004 fa74 	bl	8009be8 <HAL_SPI_Init>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8005706:	f000 fa35 	bl	8005b74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800570a:	bf00      	nop
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	240001e0 	.word	0x240001e0
 8005714:	40013000 	.word	0x40013000

08005718 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b094      	sub	sp, #80	@ 0x50
 800571c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800571e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]
 8005726:	605a      	str	r2, [r3, #4]
 8005728:	609a      	str	r2, [r3, #8]
 800572a:	60da      	str	r2, [r3, #12]
 800572c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800572e:	f107 031c 	add.w	r3, r7, #28
 8005732:	2220      	movs	r2, #32
 8005734:	2100      	movs	r1, #0
 8005736:	4618      	mov	r0, r3
 8005738:	f005 fd06 	bl	800b148 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800573c:	1d3b      	adds	r3, r7, #4
 800573e:	2200      	movs	r2, #0
 8005740:	601a      	str	r2, [r3, #0]
 8005742:	605a      	str	r2, [r3, #4]
 8005744:	609a      	str	r2, [r3, #8]
 8005746:	60da      	str	r2, [r3, #12]
 8005748:	611a      	str	r2, [r3, #16]
 800574a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800574c:	2002      	movs	r0, #2
 800574e:	f7ff fc7b 	bl	8005048 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 1779;
 8005752:	f240 63f3 	movw	r3, #1779	@ 0x6f3
 8005756:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8005758:	2300      	movs	r3, #0
 800575a:	643b      	str	r3, [r7, #64]	@ 0x40
  TIM_InitStruct.Autoreload = 999;
 800575c:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8005760:	647b      	str	r3, [r7, #68]	@ 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8005762:	2300      	movs	r3, #0
 8005764:	64bb      	str	r3, [r7, #72]	@ 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8005766:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800576a:	4619      	mov	r1, r3
 800576c:	484e      	ldr	r0, [pc, #312]	@ (80058a8 <MX_TIM3_Init+0x190>)
 800576e:	f005 f92f 	bl	800a9d0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8005772:	484d      	ldr	r0, [pc, #308]	@ (80058a8 <MX_TIM3_Init+0x190>)
 8005774:	f7ff fb44 	bl	8004e00 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8005778:	2100      	movs	r1, #0
 800577a:	484b      	ldr	r0, [pc, #300]	@ (80058a8 <MX_TIM3_Init+0x190>)
 800577c:	f7ff fbf2 	bl	8004f64 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8005780:	2101      	movs	r1, #1
 8005782:	4849      	ldr	r0, [pc, #292]	@ (80058a8 <MX_TIM3_Init+0x190>)
 8005784:	f7ff fb9e 	bl	8004ec4 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8005788:	2360      	movs	r3, #96	@ 0x60
 800578a:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800578c:	2300      	movs	r3, #0
 800578e:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8005790:	2300      	movs	r3, #0
 8005792:	627b      	str	r3, [r7, #36]	@ 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 8005794:	2300      	movs	r3, #0
 8005796:	62bb      	str	r3, [r7, #40]	@ 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8005798:	2300      	movs	r3, #0
 800579a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800579c:	f107 031c 	add.w	r3, r7, #28
 80057a0:	461a      	mov	r2, r3
 80057a2:	2101      	movs	r1, #1
 80057a4:	4840      	ldr	r0, [pc, #256]	@ (80058a8 <MX_TIM3_Init+0x190>)
 80057a6:	f005 f9b3 	bl	800ab10 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 80057aa:	2101      	movs	r1, #1
 80057ac:	483e      	ldr	r0, [pc, #248]	@ (80058a8 <MX_TIM3_Init+0x190>)
 80057ae:	f7ff fb37 	bl	8004e20 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 80057b2:	2110      	movs	r1, #16
 80057b4:	483c      	ldr	r0, [pc, #240]	@ (80058a8 <MX_TIM3_Init+0x190>)
 80057b6:	f7ff fb85 	bl	8004ec4 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80057ba:	f107 031c 	add.w	r3, r7, #28
 80057be:	461a      	mov	r2, r3
 80057c0:	2110      	movs	r1, #16
 80057c2:	4839      	ldr	r0, [pc, #228]	@ (80058a8 <MX_TIM3_Init+0x190>)
 80057c4:	f005 f9a4 	bl	800ab10 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 80057c8:	2110      	movs	r1, #16
 80057ca:	4837      	ldr	r0, [pc, #220]	@ (80058a8 <MX_TIM3_Init+0x190>)
 80057cc:	f7ff fb28 	bl	8004e20 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH3);
 80057d0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80057d4:	4834      	ldr	r0, [pc, #208]	@ (80058a8 <MX_TIM3_Init+0x190>)
 80057d6:	f7ff fb75 	bl	8004ec4 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 80057da:	f107 031c 	add.w	r3, r7, #28
 80057de:	461a      	mov	r2, r3
 80057e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80057e4:	4830      	ldr	r0, [pc, #192]	@ (80058a8 <MX_TIM3_Init+0x190>)
 80057e6:	f005 f993 	bl	800ab10 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH3);
 80057ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80057ee:	482e      	ldr	r0, [pc, #184]	@ (80058a8 <MX_TIM3_Init+0x190>)
 80057f0:	f7ff fb16 	bl	8004e20 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 80057f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80057f8:	482b      	ldr	r0, [pc, #172]	@ (80058a8 <MX_TIM3_Init+0x190>)
 80057fa:	f7ff fb63 	bl	8004ec4 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80057fe:	f107 031c 	add.w	r3, r7, #28
 8005802:	461a      	mov	r2, r3
 8005804:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005808:	4827      	ldr	r0, [pc, #156]	@ (80058a8 <MX_TIM3_Init+0x190>)
 800580a:	f005 f981 	bl	800ab10 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 800580e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005812:	4825      	ldr	r0, [pc, #148]	@ (80058a8 <MX_TIM3_Init+0x190>)
 8005814:	f7ff fb04 	bl	8004e20 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8005818:	2100      	movs	r1, #0
 800581a:	4823      	ldr	r0, [pc, #140]	@ (80058a8 <MX_TIM3_Init+0x190>)
 800581c:	f7ff fbb8 	bl	8004f90 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8005820:	4821      	ldr	r0, [pc, #132]	@ (80058a8 <MX_TIM3_Init+0x190>)
 8005822:	f7ff fbc8 	bl	8004fb6 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8005826:	2001      	movs	r0, #1
 8005828:	f7ff fbf2 	bl	8005010 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 800582c:	2002      	movs	r0, #2
 800582e:	f7ff fbef 	bl	8005010 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8005832:	2004      	movs	r0, #4
 8005834:	f7ff fbec 	bl	8005010 <LL_AHB4_GRP1_EnableClock>
  PA6   ------> TIM3_CH1
  PB1   ------> TIM3_CH4
  PC7   ------> TIM3_CH2
  PC8   ------> TIM3_CH3
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8005838:	2340      	movs	r3, #64	@ 0x40
 800583a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800583c:	2302      	movs	r3, #2
 800583e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005840:	2300      	movs	r3, #0
 8005842:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005844:	2300      	movs	r3, #0
 8005846:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005848:	2300      	movs	r3, #0
 800584a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800584c:	2302      	movs	r3, #2
 800584e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005850:	1d3b      	adds	r3, r7, #4
 8005852:	4619      	mov	r1, r3
 8005854:	4815      	ldr	r0, [pc, #84]	@ (80058ac <MX_TIM3_Init+0x194>)
 8005856:	f004 ffbd 	bl	800a7d4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 800585a:	2302      	movs	r3, #2
 800585c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800585e:	2302      	movs	r3, #2
 8005860:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005862:	2300      	movs	r3, #0
 8005864:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005866:	2300      	movs	r3, #0
 8005868:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800586a:	2300      	movs	r3, #0
 800586c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800586e:	2302      	movs	r3, #2
 8005870:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005872:	1d3b      	adds	r3, r7, #4
 8005874:	4619      	mov	r1, r3
 8005876:	480e      	ldr	r0, [pc, #56]	@ (80058b0 <MX_TIM3_Init+0x198>)
 8005878:	f004 ffac 	bl	800a7d4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_7|LL_GPIO_PIN_8;
 800587c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8005880:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8005882:	2302      	movs	r3, #2
 8005884:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005886:	2300      	movs	r3, #0
 8005888:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800588a:	2300      	movs	r3, #0
 800588c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8005892:	2302      	movs	r3, #2
 8005894:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005896:	1d3b      	adds	r3, r7, #4
 8005898:	4619      	mov	r1, r3
 800589a:	4806      	ldr	r0, [pc, #24]	@ (80058b4 <MX_TIM3_Init+0x19c>)
 800589c:	f004 ff9a 	bl	800a7d4 <LL_GPIO_Init>

}
 80058a0:	bf00      	nop
 80058a2:	3750      	adds	r7, #80	@ 0x50
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40000400 	.word	0x40000400
 80058ac:	58020000 	.word	0x58020000
 80058b0:	58020400 	.word	0x58020400
 80058b4:	58020800 	.word	0x58020800

080058b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b08e      	sub	sp, #56	@ 0x38
 80058bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058c2:	2200      	movs	r2, #0
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	605a      	str	r2, [r3, #4]
 80058c8:	609a      	str	r2, [r3, #8]
 80058ca:	60da      	str	r2, [r3, #12]
 80058cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80058ce:	4b8c      	ldr	r3, [pc, #560]	@ (8005b00 <MX_GPIO_Init+0x248>)
 80058d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058d4:	4a8a      	ldr	r2, [pc, #552]	@ (8005b00 <MX_GPIO_Init+0x248>)
 80058d6:	f043 0304 	orr.w	r3, r3, #4
 80058da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80058de:	4b88      	ldr	r3, [pc, #544]	@ (8005b00 <MX_GPIO_Init+0x248>)
 80058e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	623b      	str	r3, [r7, #32]
 80058ea:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80058ec:	4b84      	ldr	r3, [pc, #528]	@ (8005b00 <MX_GPIO_Init+0x248>)
 80058ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80058f2:	4a83      	ldr	r2, [pc, #524]	@ (8005b00 <MX_GPIO_Init+0x248>)
 80058f4:	f043 0320 	orr.w	r3, r3, #32
 80058f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80058fc:	4b80      	ldr	r3, [pc, #512]	@ (8005b00 <MX_GPIO_Init+0x248>)
 80058fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005902:	f003 0320 	and.w	r3, r3, #32
 8005906:	61fb      	str	r3, [r7, #28]
 8005908:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800590a:	4b7d      	ldr	r3, [pc, #500]	@ (8005b00 <MX_GPIO_Init+0x248>)
 800590c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005910:	4a7b      	ldr	r2, [pc, #492]	@ (8005b00 <MX_GPIO_Init+0x248>)
 8005912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005916:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800591a:	4b79      	ldr	r3, [pc, #484]	@ (8005b00 <MX_GPIO_Init+0x248>)
 800591c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005920:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005924:	61bb      	str	r3, [r7, #24]
 8005926:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005928:	4b75      	ldr	r3, [pc, #468]	@ (8005b00 <MX_GPIO_Init+0x248>)
 800592a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800592e:	4a74      	ldr	r2, [pc, #464]	@ (8005b00 <MX_GPIO_Init+0x248>)
 8005930:	f043 0301 	orr.w	r3, r3, #1
 8005934:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005938:	4b71      	ldr	r3, [pc, #452]	@ (8005b00 <MX_GPIO_Init+0x248>)
 800593a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005946:	4b6e      	ldr	r3, [pc, #440]	@ (8005b00 <MX_GPIO_Init+0x248>)
 8005948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800594c:	4a6c      	ldr	r2, [pc, #432]	@ (8005b00 <MX_GPIO_Init+0x248>)
 800594e:	f043 0302 	orr.w	r3, r3, #2
 8005952:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005956:	4b6a      	ldr	r3, [pc, #424]	@ (8005b00 <MX_GPIO_Init+0x248>)
 8005958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800595c:	f003 0302 	and.w	r3, r3, #2
 8005960:	613b      	str	r3, [r7, #16]
 8005962:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005964:	4b66      	ldr	r3, [pc, #408]	@ (8005b00 <MX_GPIO_Init+0x248>)
 8005966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800596a:	4a65      	ldr	r2, [pc, #404]	@ (8005b00 <MX_GPIO_Init+0x248>)
 800596c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005970:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005974:	4b62      	ldr	r3, [pc, #392]	@ (8005b00 <MX_GPIO_Init+0x248>)
 8005976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800597a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005982:	4b5f      	ldr	r3, [pc, #380]	@ (8005b00 <MX_GPIO_Init+0x248>)
 8005984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005988:	4a5d      	ldr	r2, [pc, #372]	@ (8005b00 <MX_GPIO_Init+0x248>)
 800598a:	f043 0310 	orr.w	r3, r3, #16
 800598e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005992:	4b5b      	ldr	r3, [pc, #364]	@ (8005b00 <MX_GPIO_Init+0x248>)
 8005994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005998:	f003 0310 	and.w	r3, r3, #16
 800599c:	60bb      	str	r3, [r7, #8]
 800599e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80059a0:	4b57      	ldr	r3, [pc, #348]	@ (8005b00 <MX_GPIO_Init+0x248>)
 80059a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059a6:	4a56      	ldr	r2, [pc, #344]	@ (8005b00 <MX_GPIO_Init+0x248>)
 80059a8:	f043 0308 	orr.w	r3, r3, #8
 80059ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80059b0:	4b53      	ldr	r3, [pc, #332]	@ (8005b00 <MX_GPIO_Init+0x248>)
 80059b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059b6:	f003 0308 	and.w	r3, r3, #8
 80059ba:	607b      	str	r3, [r7, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DatCmd_Pin|WSRST_Pin|SPINCS_Pin, GPIO_PIN_RESET);
 80059be:	2200      	movs	r2, #0
 80059c0:	2138      	movs	r1, #56	@ 0x38
 80059c2:	4850      	ldr	r0, [pc, #320]	@ (8005b04 <MX_GPIO_Init+0x24c>)
 80059c4:	f001 f870 	bl	8006aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 80059c8:	2200      	movs	r2, #0
 80059ca:	f244 0101 	movw	r1, #16385	@ 0x4001
 80059ce:	484e      	ldr	r0, [pc, #312]	@ (8005b08 <MX_GPIO_Init+0x250>)
 80059d0:	f001 f86a 	bl	8006aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Right60Xshut_Pin|Right30Xshut_Pin|MiddleXshut_Pin, GPIO_PIN_SET);
 80059d4:	2201      	movs	r2, #1
 80059d6:	f44f 41a8 	mov.w	r1, #21504	@ 0x5400
 80059da:	484c      	ldr	r0, [pc, #304]	@ (8005b0c <MX_GPIO_Init+0x254>)
 80059dc:	f001 f864 	bl	8006aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Left30Xshut_Pin|Left60Xshut_Pin, GPIO_PIN_SET);
 80059e0:	2201      	movs	r2, #1
 80059e2:	2130      	movs	r1, #48	@ 0x30
 80059e4:	484a      	ldr	r0, [pc, #296]	@ (8005b10 <MX_GPIO_Init+0x258>)
 80059e6:	f001 f85f 	bl	8006aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80059ea:	2200      	movs	r2, #0
 80059ec:	2102      	movs	r1, #2
 80059ee:	4847      	ldr	r0, [pc, #284]	@ (8005b0c <MX_GPIO_Init+0x254>)
 80059f0:	f001 f85a 	bl	8006aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80059f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80059f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80059fa:	2300      	movs	r3, #0
 80059fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005a02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a06:	4619      	mov	r1, r3
 8005a08:	4842      	ldr	r0, [pc, #264]	@ (8005b14 <MX_GPIO_Init+0x25c>)
 8005a0a:	f000 fea5 	bl	8006758 <HAL_GPIO_Init>

  /*Configure GPIO pins : DatCmd_Pin WSRST_Pin SPINCS_Pin */
  GPIO_InitStruct.Pin = DatCmd_Pin|WSRST_Pin|SPINCS_Pin;
 8005a0e:	2338      	movs	r3, #56	@ 0x38
 8005a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a12:	2301      	movs	r3, #1
 8005a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a16:	2300      	movs	r3, #0
 8005a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005a1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a22:	4619      	mov	r1, r3
 8005a24:	4837      	ldr	r0, [pc, #220]	@ (8005b04 <MX_GPIO_Init+0x24c>)
 8005a26:	f000 fe97 	bl	8006758 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8005a2a:	f244 0301 	movw	r3, #16385	@ 0x4001
 8005a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a30:	2301      	movs	r3, #1
 8005a32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a34:	2300      	movs	r3, #0
 8005a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a40:	4619      	mov	r1, r3
 8005a42:	4831      	ldr	r0, [pc, #196]	@ (8005b08 <MX_GPIO_Init+0x250>)
 8005a44:	f000 fe88 	bl	8006758 <HAL_GPIO_Init>

  /*Configure GPIO pin : Physical_Pin */
  GPIO_InitStruct.Pin = Physical_Pin;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005a4c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8005a50:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005a52:	2302      	movs	r3, #2
 8005a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Physical_GPIO_Port, &GPIO_InitStruct);
 8005a56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	482e      	ldr	r0, [pc, #184]	@ (8005b18 <MX_GPIO_Init+0x260>)
 8005a5e:	f000 fe7b 	bl	8006758 <HAL_GPIO_Init>

  /*Configure GPIO pin : Remote_Pin */
  GPIO_InitStruct.Pin = Remote_Pin;
 8005a62:	2302      	movs	r3, #2
 8005a64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8005a66:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8005a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005a6c:	2302      	movs	r3, #2
 8005a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Remote_GPIO_Port, &GPIO_InitStruct);
 8005a70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a74:	4619      	mov	r1, r3
 8005a76:	4828      	ldr	r0, [pc, #160]	@ (8005b18 <MX_GPIO_Init+0x260>)
 8005a78:	f000 fe6e 	bl	8006758 <HAL_GPIO_Init>

  /*Configure GPIO pins : Right60Xshut_Pin Right30Xshut_Pin MiddleXshut_Pin LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = Right60Xshut_Pin|Right30Xshut_Pin|MiddleXshut_Pin|LED_YELLOW_Pin;
 8005a7c:	f245 4302 	movw	r3, #21506	@ 0x5402
 8005a80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a82:	2301      	movs	r3, #1
 8005a84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a86:	2300      	movs	r3, #0
 8005a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005a8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a92:	4619      	mov	r1, r3
 8005a94:	481d      	ldr	r0, [pc, #116]	@ (8005b0c <MX_GPIO_Init+0x254>)
 8005a96:	f000 fe5f 	bl	8006758 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_VCP_RX_Pin STLK_VCP_TX_Pin */
  GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8005a9a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005aac:	2307      	movs	r3, #7
 8005aae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	4816      	ldr	r0, [pc, #88]	@ (8005b10 <MX_GPIO_Init+0x258>)
 8005ab8:	f000 fe4e 	bl	8006758 <HAL_GPIO_Init>

  /*Configure GPIO pins : Left30Xshut_Pin Left60Xshut_Pin */
  GPIO_InitStruct.Pin = Left30Xshut_Pin|Left60Xshut_Pin;
 8005abc:	2330      	movs	r3, #48	@ 0x30
 8005abe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	480f      	ldr	r0, [pc, #60]	@ (8005b10 <MX_GPIO_Init+0x258>)
 8005ad4:	f000 fe40 	bl	8006758 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(Physical_EXTI_IRQn, 0, 0);
 8005ad8:	2200      	movs	r2, #0
 8005ada:	2100      	movs	r1, #0
 8005adc:	2006      	movs	r0, #6
 8005ade:	f000 fd8e 	bl	80065fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(Physical_EXTI_IRQn);
 8005ae2:	2006      	movs	r0, #6
 8005ae4:	f000 fda5 	bl	8006632 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(Remote_EXTI_IRQn, 0, 0);
 8005ae8:	2200      	movs	r2, #0
 8005aea:	2100      	movs	r1, #0
 8005aec:	2007      	movs	r0, #7
 8005aee:	f000 fd86 	bl	80065fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(Remote_EXTI_IRQn);
 8005af2:	2007      	movs	r0, #7
 8005af4:	f000 fd9d 	bl	8006632 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8005af8:	bf00      	nop
 8005afa:	3738      	adds	r7, #56	@ 0x38
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}
 8005b00:	58024400 	.word	0x58024400
 8005b04:	58021400 	.word	0x58021400
 8005b08:	58020400 	.word	0x58020400
 8005b0c:	58021000 	.word	0x58021000
 8005b10:	58020c00 	.word	0x58020c00
 8005b14:	58020800 	.word	0x58020800
 8005b18:	58021800 	.word	0x58021800

08005b1c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8005b22:	463b      	mov	r3, r7
 8005b24:	2200      	movs	r2, #0
 8005b26:	601a      	str	r2, [r3, #0]
 8005b28:	605a      	str	r2, [r3, #4]
 8005b2a:	609a      	str	r2, [r3, #8]
 8005b2c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8005b2e:	f000 fd9b 	bl	8006668 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005b32:	2301      	movs	r3, #1
 8005b34:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8005b36:	2300      	movs	r3, #0
 8005b38:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8005b3e:	231f      	movs	r3, #31
 8005b40:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8005b42:	2387      	movs	r3, #135	@ 0x87
 8005b44:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8005b46:	2300      	movs	r3, #0
 8005b48:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8005b52:	2301      	movs	r3, #1
 8005b54:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8005b56:	2300      	movs	r3, #0
 8005b58:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005b5e:	463b      	mov	r3, r7
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fdb9 	bl	80066d8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8005b66:	2004      	movs	r0, #4
 8005b68:	f000 fd96 	bl	8006698 <HAL_MPU_Enable>

}
 8005b6c:	bf00      	nop
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005b74:	b480      	push	{r7}
 8005b76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005b78:	b672      	cpsid	i
}
 8005b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005b7c:	bf00      	nop
 8005b7e:	e7fd      	b.n	8005b7c <Error_Handler+0x8>

08005b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b86:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb0 <HAL_MspInit+0x30>)
 8005b88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b8c:	4a08      	ldr	r2, [pc, #32]	@ (8005bb0 <HAL_MspInit+0x30>)
 8005b8e:	f043 0302 	orr.w	r3, r3, #2
 8005b92:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005b96:	4b06      	ldr	r3, [pc, #24]	@ (8005bb0 <HAL_MspInit+0x30>)
 8005b98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	607b      	str	r3, [r7, #4]
 8005ba2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005ba4:	bf00      	nop
 8005ba6:	370c      	adds	r7, #12
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bae:	4770      	bx	lr
 8005bb0:	58024400 	.word	0x58024400

08005bb4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b0c2      	sub	sp, #264	@ 0x108
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005bbe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bc2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bc4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8005bc8:	2200      	movs	r2, #0
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	605a      	str	r2, [r3, #4]
 8005bce:	609a      	str	r2, [r3, #8]
 8005bd0:	60da      	str	r2, [r3, #12]
 8005bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005bd4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005bd8:	22b8      	movs	r2, #184	@ 0xb8
 8005bda:	2100      	movs	r1, #0
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f005 fab3 	bl	800b148 <memset>
  if(hi2c->Instance==I2C1)
 8005be2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005be6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4ab1      	ldr	r2, [pc, #708]	@ (8005eb4 <HAL_I2C_MspInit+0x300>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d147      	bne.n	8005c84 <HAL_I2C_MspInit+0xd0>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005bf4:	f04f 0208 	mov.w	r2, #8
 8005bf8:	f04f 0300 	mov.w	r3, #0
 8005bfc:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8005c00:	2300      	movs	r3, #0
 8005c02:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c06:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f002 fce8 	bl	80085e0 <HAL_RCCEx_PeriphCLKConfig>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <HAL_I2C_MspInit+0x66>
    {
      Error_Handler();
 8005c16:	f7ff ffad 	bl	8005b74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c1a:	4ba7      	ldr	r3, [pc, #668]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c20:	4aa5      	ldr	r2, [pc, #660]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005c22:	f043 0302 	orr.w	r3, r3, #2
 8005c26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005c2a:	4ba3      	ldr	r3, [pc, #652]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c30:	f003 0302 	and.w	r3, r3, #2
 8005c34:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005c38:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005c3c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c40:	2312      	movs	r3, #18
 8005c42:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c46:	2300      	movs	r3, #0
 8005c48:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005c52:	2304      	movs	r3, #4
 8005c54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c58:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4897      	ldr	r0, [pc, #604]	@ (8005ebc <HAL_I2C_MspInit+0x308>)
 8005c60:	f000 fd7a 	bl	8006758 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005c64:	4b94      	ldr	r3, [pc, #592]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005c66:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005c6a:	4a93      	ldr	r2, [pc, #588]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005c6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005c70:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005c74:	4b90      	ldr	r3, [pc, #576]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005c76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005c7a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* USER CODE BEGIN I2C5_MspInit 1 */

    /* USER CODE END I2C5_MspInit 1 */
  }

}
 8005c82:	e179      	b.n	8005f78 <HAL_I2C_MspInit+0x3c4>
  else if(hi2c->Instance==I2C2)
 8005c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005c88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a8b      	ldr	r2, [pc, #556]	@ (8005ec0 <HAL_I2C_MspInit+0x30c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d146      	bne.n	8005d24 <HAL_I2C_MspInit+0x170>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8005c96:	f04f 0208 	mov.w	r2, #8
 8005c9a:	f04f 0300 	mov.w	r3, #0
 8005c9e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ca8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005cac:	4618      	mov	r0, r3
 8005cae:	f002 fc97 	bl	80085e0 <HAL_RCCEx_PeriphCLKConfig>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <HAL_I2C_MspInit+0x108>
      Error_Handler();
 8005cb8:	f7ff ff5c 	bl	8005b74 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005cbc:	4b7e      	ldr	r3, [pc, #504]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005cc2:	4a7d      	ldr	r2, [pc, #500]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005cc4:	f043 0320 	orr.w	r3, r3, #32
 8005cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005ccc:	4b7a      	ldr	r3, [pc, #488]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005ce0:	2312      	movs	r3, #18
 8005ce2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cec:	2300      	movs	r3, #0
 8005cee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005cf2:	2304      	movs	r3, #4
 8005cf4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005cf8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4871      	ldr	r0, [pc, #452]	@ (8005ec4 <HAL_I2C_MspInit+0x310>)
 8005d00:	f000 fd2a 	bl	8006758 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005d04:	4b6c      	ldr	r3, [pc, #432]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005d06:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d0a:	4a6b      	ldr	r2, [pc, #428]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005d0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005d10:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005d14:	4b68      	ldr	r3, [pc, #416]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005d16:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8005d22:	e129      	b.n	8005f78 <HAL_I2C_MspInit+0x3c4>
  else if(hi2c->Instance==I2C3)
 8005d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005d28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a65      	ldr	r2, [pc, #404]	@ (8005ec8 <HAL_I2C_MspInit+0x314>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d16c      	bne.n	8005e10 <HAL_I2C_MspInit+0x25c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8005d36:	f04f 0208 	mov.w	r2, #8
 8005d3a:	f04f 0300 	mov.w	r3, #0
 8005d3e:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8005d42:	2300      	movs	r3, #0
 8005d44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005d48:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f002 fc47 	bl	80085e0 <HAL_RCCEx_PeriphCLKConfig>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <HAL_I2C_MspInit+0x1a8>
      Error_Handler();
 8005d58:	f7ff ff0c 	bl	8005b74 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d5c:	4b56      	ldr	r3, [pc, #344]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d62:	4a55      	ldr	r2, [pc, #340]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005d64:	f043 0304 	orr.w	r3, r3, #4
 8005d68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005d6c:	4b52      	ldr	r3, [pc, #328]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d72:	f003 0304 	and.w	r3, r3, #4
 8005d76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d7a:	4b4f      	ldr	r3, [pc, #316]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d80:	4a4d      	ldr	r2, [pc, #308]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005d82:	f043 0301 	orr.w	r3, r3, #1
 8005d86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005d8a:	4b4b      	ldr	r3, [pc, #300]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005d90:	f003 0301 	and.w	r3, r3, #1
 8005d94:	623b      	str	r3, [r7, #32]
 8005d96:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005d98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d9c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005da0:	2312      	movs	r3, #18
 8005da2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005da6:	2300      	movs	r3, #0
 8005da8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dac:	2300      	movs	r3, #0
 8005dae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005db2:	2304      	movs	r3, #4
 8005db4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005db8:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4843      	ldr	r0, [pc, #268]	@ (8005ecc <HAL_I2C_MspInit+0x318>)
 8005dc0:	f000 fcca 	bl	8006758 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005dc4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005dc8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005dcc:	2312      	movs	r3, #18
 8005dce:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005dde:	2304      	movs	r3, #4
 8005de0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005de4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8005de8:	4619      	mov	r1, r3
 8005dea:	4839      	ldr	r0, [pc, #228]	@ (8005ed0 <HAL_I2C_MspInit+0x31c>)
 8005dec:	f000 fcb4 	bl	8006758 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005df0:	4b31      	ldr	r3, [pc, #196]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005df2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005df6:	4a30      	ldr	r2, [pc, #192]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005df8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005dfc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005e00:	4b2d      	ldr	r3, [pc, #180]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005e02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e0a:	61fb      	str	r3, [r7, #28]
 8005e0c:	69fb      	ldr	r3, [r7, #28]
}
 8005e0e:	e0b3      	b.n	8005f78 <HAL_I2C_MspInit+0x3c4>
  else if(hi2c->Instance==I2C4)
 8005e10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005e14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a2d      	ldr	r2, [pc, #180]	@ (8005ed4 <HAL_I2C_MspInit+0x320>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d15a      	bne.n	8005ed8 <HAL_I2C_MspInit+0x324>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8005e22:	f04f 0210 	mov.w	r2, #16
 8005e26:	f04f 0300 	mov.w	r3, #0
 8005e2a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e34:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f002 fbd1 	bl	80085e0 <HAL_RCCEx_PeriphCLKConfig>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <HAL_I2C_MspInit+0x294>
      Error_Handler();
 8005e44:	f7ff fe96 	bl	8005b74 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005e48:	4b1b      	ldr	r3, [pc, #108]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e4e:	4a1a      	ldr	r2, [pc, #104]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005e50:	f043 0320 	orr.w	r3, r3, #32
 8005e54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005e58:	4b17      	ldr	r3, [pc, #92]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e5e:	f003 0320 	and.w	r3, r3, #32
 8005e62:	61bb      	str	r3, [r7, #24]
 8005e64:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005e66:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8005e6a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005e6e:	2312      	movs	r3, #18
 8005e70:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e74:	2300      	movs	r3, #0
 8005e76:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8005e80:	2304      	movs	r3, #4
 8005e82:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005e86:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	480d      	ldr	r0, [pc, #52]	@ (8005ec4 <HAL_I2C_MspInit+0x310>)
 8005e8e:	f000 fc63 	bl	8006758 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8005e92:	4b09      	ldr	r3, [pc, #36]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005e94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005e98:	4a07      	ldr	r2, [pc, #28]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005e9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e9e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005ea2:	4b05      	ldr	r3, [pc, #20]	@ (8005eb8 <HAL_I2C_MspInit+0x304>)
 8005ea4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005ea8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005eac:	617b      	str	r3, [r7, #20]
 8005eae:	697b      	ldr	r3, [r7, #20]
}
 8005eb0:	e062      	b.n	8005f78 <HAL_I2C_MspInit+0x3c4>
 8005eb2:	bf00      	nop
 8005eb4:	40005400 	.word	0x40005400
 8005eb8:	58024400 	.word	0x58024400
 8005ebc:	58020400 	.word	0x58020400
 8005ec0:	40005800 	.word	0x40005800
 8005ec4:	58021400 	.word	0x58021400
 8005ec8:	40005c00 	.word	0x40005c00
 8005ecc:	58020800 	.word	0x58020800
 8005ed0:	58020000 	.word	0x58020000
 8005ed4:	58001c00 	.word	0x58001c00
  else if(hi2c->Instance==I2C5)
 8005ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005edc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a27      	ldr	r2, [pc, #156]	@ (8005f84 <HAL_I2C_MspInit+0x3d0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d146      	bne.n	8005f78 <HAL_I2C_MspInit+0x3c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C5;
 8005eea:	f04f 0208 	mov.w	r2, #8
 8005eee:	f04f 0300 	mov.w	r3, #0
 8005ef2:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005efc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005f00:	4618      	mov	r0, r3
 8005f02:	f002 fb6d 	bl	80085e0 <HAL_RCCEx_PeriphCLKConfig>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <HAL_I2C_MspInit+0x35c>
      Error_Handler();
 8005f0c:	f7ff fe32 	bl	8005b74 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f10:	4b1d      	ldr	r3, [pc, #116]	@ (8005f88 <HAL_I2C_MspInit+0x3d4>)
 8005f12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f16:	4a1c      	ldr	r2, [pc, #112]	@ (8005f88 <HAL_I2C_MspInit+0x3d4>)
 8005f18:	f043 0304 	orr.w	r3, r3, #4
 8005f1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005f20:	4b19      	ldr	r3, [pc, #100]	@ (8005f88 <HAL_I2C_MspInit+0x3d4>)
 8005f22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005f26:	f003 0304 	and.w	r3, r3, #4
 8005f2a:	613b      	str	r3, [r7, #16]
 8005f2c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005f2e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005f32:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005f36:	2312      	movs	r3, #18
 8005f38:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f42:	2300      	movs	r3, #0
 8005f44:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C5;
 8005f48:	2304      	movs	r3, #4
 8005f4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f4e:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8005f52:	4619      	mov	r1, r3
 8005f54:	480d      	ldr	r0, [pc, #52]	@ (8005f8c <HAL_I2C_MspInit+0x3d8>)
 8005f56:	f000 fbff 	bl	8006758 <HAL_GPIO_Init>
    __HAL_RCC_I2C5_CLK_ENABLE();
 8005f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f88 <HAL_I2C_MspInit+0x3d4>)
 8005f5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f60:	4a09      	ldr	r2, [pc, #36]	@ (8005f88 <HAL_I2C_MspInit+0x3d4>)
 8005f62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005f66:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005f6a:	4b07      	ldr	r3, [pc, #28]	@ (8005f88 <HAL_I2C_MspInit+0x3d4>)
 8005f6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005f70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	68fb      	ldr	r3, [r7, #12]
}
 8005f78:	bf00      	nop
 8005f7a:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	40006400 	.word	0x40006400
 8005f88:	58024400 	.word	0x58024400
 8005f8c:	58020800 	.word	0x58020800

08005f90 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b0ba      	sub	sp, #232	@ 0xe8
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f98:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	605a      	str	r2, [r3, #4]
 8005fa2:	609a      	str	r2, [r3, #8]
 8005fa4:	60da      	str	r2, [r3, #12]
 8005fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005fa8:	f107 0318 	add.w	r3, r7, #24
 8005fac:	22b8      	movs	r2, #184	@ 0xb8
 8005fae:	2100      	movs	r1, #0
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f005 f8c9 	bl	800b148 <memset>
  if(hspi->Instance==SPI1)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a38      	ldr	r2, [pc, #224]	@ (800609c <HAL_SPI_MspInit+0x10c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d168      	bne.n	8006092 <HAL_SPI_MspInit+0x102>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8005fc0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005fc4:	f04f 0300 	mov.w	r3, #0
 8005fc8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005fd0:	f107 0318 	add.w	r3, r7, #24
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f002 fb03 	bl	80085e0 <HAL_RCCEx_PeriphCLKConfig>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8005fe0:	f7ff fdc8 	bl	8005b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80060a0 <HAL_SPI_MspInit+0x110>)
 8005fe6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005fea:	4a2d      	ldr	r2, [pc, #180]	@ (80060a0 <HAL_SPI_MspInit+0x110>)
 8005fec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ff0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005ff4:	4b2a      	ldr	r3, [pc, #168]	@ (80060a0 <HAL_SPI_MspInit+0x110>)
 8005ff6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005ffa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006002:	4b27      	ldr	r3, [pc, #156]	@ (80060a0 <HAL_SPI_MspInit+0x110>)
 8006004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006008:	4a25      	ldr	r2, [pc, #148]	@ (80060a0 <HAL_SPI_MspInit+0x110>)
 800600a:	f043 0301 	orr.w	r3, r3, #1
 800600e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006012:	4b23      	ldr	r3, [pc, #140]	@ (80060a0 <HAL_SPI_MspInit+0x110>)
 8006014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006018:	f003 0301 	and.w	r3, r3, #1
 800601c:	613b      	str	r3, [r7, #16]
 800601e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006020:	4b1f      	ldr	r3, [pc, #124]	@ (80060a0 <HAL_SPI_MspInit+0x110>)
 8006022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006026:	4a1e      	ldr	r2, [pc, #120]	@ (80060a0 <HAL_SPI_MspInit+0x110>)
 8006028:	f043 0308 	orr.w	r3, r3, #8
 800602c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006030:	4b1b      	ldr	r3, [pc, #108]	@ (80060a0 <HAL_SPI_MspInit+0x110>)
 8006032:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006036:	f003 0308 	and.w	r3, r3, #8
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800603e:	2320      	movs	r3, #32
 8006040:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006044:	2302      	movs	r3, #2
 8006046:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800604a:	2300      	movs	r3, #0
 800604c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006050:	2300      	movs	r3, #0
 8006052:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006056:	2305      	movs	r3, #5
 8006058:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800605c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8006060:	4619      	mov	r1, r3
 8006062:	4810      	ldr	r0, [pc, #64]	@ (80060a4 <HAL_SPI_MspInit+0x114>)
 8006064:	f000 fb78 	bl	8006758 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8006068:	2380      	movs	r3, #128	@ 0x80
 800606a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800606e:	2302      	movs	r3, #2
 8006070:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006074:	2300      	movs	r3, #0
 8006076:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800607a:	2300      	movs	r3, #0
 800607c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006080:	2305      	movs	r3, #5
 8006082:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006086:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800608a:	4619      	mov	r1, r3
 800608c:	4806      	ldr	r0, [pc, #24]	@ (80060a8 <HAL_SPI_MspInit+0x118>)
 800608e:	f000 fb63 	bl	8006758 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8006092:	bf00      	nop
 8006094:	37e8      	adds	r7, #232	@ 0xe8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	40013000 	.word	0x40013000
 80060a0:	58024400 	.word	0x58024400
 80060a4:	58020000 	.word	0x58020000
 80060a8:	58020c00 	.word	0x58020c00

080060ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80060ac:	b480      	push	{r7}
 80060ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80060b0:	bf00      	nop
 80060b2:	e7fd      	b.n	80060b0 <NMI_Handler+0x4>

080060b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80060b4:	b480      	push	{r7}
 80060b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80060b8:	bf00      	nop
 80060ba:	e7fd      	b.n	80060b8 <HardFault_Handler+0x4>

080060bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80060bc:	b480      	push	{r7}
 80060be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80060c0:	bf00      	nop
 80060c2:	e7fd      	b.n	80060c0 <MemManage_Handler+0x4>

080060c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80060c4:	b480      	push	{r7}
 80060c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80060c8:	bf00      	nop
 80060ca:	e7fd      	b.n	80060c8 <BusFault_Handler+0x4>

080060cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80060cc:	b480      	push	{r7}
 80060ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80060d0:	bf00      	nop
 80060d2:	e7fd      	b.n	80060d0 <UsageFault_Handler+0x4>

080060d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80060d4:	b480      	push	{r7}
 80060d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80060d8:	bf00      	nop
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr

080060e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80060e2:	b480      	push	{r7}
 80060e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80060e6:	bf00      	nop
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80060f0:	b480      	push	{r7}
 80060f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80060f4:	bf00      	nop
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006102:	f000 f95d 	bl	80063c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006106:	bf00      	nop
 8006108:	bd80      	pop	{r7, pc}

0800610a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Physical_Pin);
 800610e:	2001      	movs	r0, #1
 8006110:	f000 fce3 	bl	8006ada <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8006114:	bf00      	nop
 8006116:	bd80      	pop	{r7, pc}

08006118 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Remote_Pin);
 800611c:	2002      	movs	r0, #2
 800611e:	f000 fcdc 	bl	8006ada <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8006122:	bf00      	nop
 8006124:	bd80      	pop	{r7, pc}

08006126 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8006126:	b480      	push	{r7}
 8006128:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_IRQn 0 */
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800612a:	bf00      	nop
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006134:	b480      	push	{r7}
 8006136:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006138:	4b3e      	ldr	r3, [pc, #248]	@ (8006234 <SystemInit+0x100>)
 800613a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800613e:	4a3d      	ldr	r2, [pc, #244]	@ (8006234 <SystemInit+0x100>)
 8006140:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006144:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006148:	4b3b      	ldr	r3, [pc, #236]	@ (8006238 <SystemInit+0x104>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 030f 	and.w	r3, r3, #15
 8006150:	2b06      	cmp	r3, #6
 8006152:	d807      	bhi.n	8006164 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006154:	4b38      	ldr	r3, [pc, #224]	@ (8006238 <SystemInit+0x104>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f023 030f 	bic.w	r3, r3, #15
 800615c:	4a36      	ldr	r2, [pc, #216]	@ (8006238 <SystemInit+0x104>)
 800615e:	f043 0307 	orr.w	r3, r3, #7
 8006162:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006164:	4b35      	ldr	r3, [pc, #212]	@ (800623c <SystemInit+0x108>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a34      	ldr	r2, [pc, #208]	@ (800623c <SystemInit+0x108>)
 800616a:	f043 0301 	orr.w	r3, r3, #1
 800616e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006170:	4b32      	ldr	r3, [pc, #200]	@ (800623c <SystemInit+0x108>)
 8006172:	2200      	movs	r2, #0
 8006174:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006176:	4b31      	ldr	r3, [pc, #196]	@ (800623c <SystemInit+0x108>)
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	4930      	ldr	r1, [pc, #192]	@ (800623c <SystemInit+0x108>)
 800617c:	4b30      	ldr	r3, [pc, #192]	@ (8006240 <SystemInit+0x10c>)
 800617e:	4013      	ands	r3, r2
 8006180:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006182:	4b2d      	ldr	r3, [pc, #180]	@ (8006238 <SystemInit+0x104>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0308 	and.w	r3, r3, #8
 800618a:	2b00      	cmp	r3, #0
 800618c:	d007      	beq.n	800619e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800618e:	4b2a      	ldr	r3, [pc, #168]	@ (8006238 <SystemInit+0x104>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f023 030f 	bic.w	r3, r3, #15
 8006196:	4a28      	ldr	r2, [pc, #160]	@ (8006238 <SystemInit+0x104>)
 8006198:	f043 0307 	orr.w	r3, r3, #7
 800619c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800619e:	4b27      	ldr	r3, [pc, #156]	@ (800623c <SystemInit+0x108>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80061a4:	4b25      	ldr	r3, [pc, #148]	@ (800623c <SystemInit+0x108>)
 80061a6:	2200      	movs	r2, #0
 80061a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80061aa:	4b24      	ldr	r3, [pc, #144]	@ (800623c <SystemInit+0x108>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80061b0:	4b22      	ldr	r3, [pc, #136]	@ (800623c <SystemInit+0x108>)
 80061b2:	4a24      	ldr	r2, [pc, #144]	@ (8006244 <SystemInit+0x110>)
 80061b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80061b6:	4b21      	ldr	r3, [pc, #132]	@ (800623c <SystemInit+0x108>)
 80061b8:	4a23      	ldr	r2, [pc, #140]	@ (8006248 <SystemInit+0x114>)
 80061ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80061bc:	4b1f      	ldr	r3, [pc, #124]	@ (800623c <SystemInit+0x108>)
 80061be:	4a23      	ldr	r2, [pc, #140]	@ (800624c <SystemInit+0x118>)
 80061c0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80061c2:	4b1e      	ldr	r3, [pc, #120]	@ (800623c <SystemInit+0x108>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80061c8:	4b1c      	ldr	r3, [pc, #112]	@ (800623c <SystemInit+0x108>)
 80061ca:	4a20      	ldr	r2, [pc, #128]	@ (800624c <SystemInit+0x118>)
 80061cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80061ce:	4b1b      	ldr	r3, [pc, #108]	@ (800623c <SystemInit+0x108>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80061d4:	4b19      	ldr	r3, [pc, #100]	@ (800623c <SystemInit+0x108>)
 80061d6:	4a1d      	ldr	r2, [pc, #116]	@ (800624c <SystemInit+0x118>)
 80061d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80061da:	4b18      	ldr	r3, [pc, #96]	@ (800623c <SystemInit+0x108>)
 80061dc:	2200      	movs	r2, #0
 80061de:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80061e0:	4b16      	ldr	r3, [pc, #88]	@ (800623c <SystemInit+0x108>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a15      	ldr	r2, [pc, #84]	@ (800623c <SystemInit+0x108>)
 80061e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80061ec:	4b13      	ldr	r3, [pc, #76]	@ (800623c <SystemInit+0x108>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80061f2:	4b12      	ldr	r3, [pc, #72]	@ (800623c <SystemInit+0x108>)
 80061f4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80061f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d113      	bne.n	8006228 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8006200:	4b0e      	ldr	r3, [pc, #56]	@ (800623c <SystemInit+0x108>)
 8006202:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8006206:	4a0d      	ldr	r2, [pc, #52]	@ (800623c <SystemInit+0x108>)
 8006208:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800620c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006210:	4b0f      	ldr	r3, [pc, #60]	@ (8006250 <SystemInit+0x11c>)
 8006212:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8006216:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8006218:	4b08      	ldr	r3, [pc, #32]	@ (800623c <SystemInit+0x108>)
 800621a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800621e:	4a07      	ldr	r2, [pc, #28]	@ (800623c <SystemInit+0x108>)
 8006220:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006224:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8006228:	bf00      	nop
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	e000ed00 	.word	0xe000ed00
 8006238:	52002000 	.word	0x52002000
 800623c:	58024400 	.word	0x58024400
 8006240:	eaf6ed7f 	.word	0xeaf6ed7f
 8006244:	02020200 	.word	0x02020200
 8006248:	01ff0000 	.word	0x01ff0000
 800624c:	01010280 	.word	0x01010280
 8006250:	52004000 	.word	0x52004000

08006254 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8006254:	b480      	push	{r7}
 8006256:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8006258:	4b09      	ldr	r3, [pc, #36]	@ (8006280 <ExitRun0Mode+0x2c>)
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	4a08      	ldr	r2, [pc, #32]	@ (8006280 <ExitRun0Mode+0x2c>)
 800625e:	f043 0302 	orr.w	r3, r3, #2
 8006262:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8006264:	bf00      	nop
 8006266:	4b06      	ldr	r3, [pc, #24]	@ (8006280 <ExitRun0Mode+0x2c>)
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d0f9      	beq.n	8006266 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8006272:	bf00      	nop
 8006274:	bf00      	nop
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	58024800 	.word	0x58024800

08006284 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006284:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80062c0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8006288:	f7ff ffe4 	bl	8006254 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800628c:	f7ff ff52 	bl	8006134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006290:	480c      	ldr	r0, [pc, #48]	@ (80062c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006292:	490d      	ldr	r1, [pc, #52]	@ (80062c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006294:	4a0d      	ldr	r2, [pc, #52]	@ (80062cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006298:	e002      	b.n	80062a0 <LoopCopyDataInit>

0800629a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800629a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800629c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800629e:	3304      	adds	r3, #4

080062a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80062a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80062a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80062a4:	d3f9      	bcc.n	800629a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80062a6:	4a0a      	ldr	r2, [pc, #40]	@ (80062d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80062a8:	4c0a      	ldr	r4, [pc, #40]	@ (80062d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80062aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80062ac:	e001      	b.n	80062b2 <LoopFillZerobss>

080062ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80062ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80062b0:	3204      	adds	r2, #4

080062b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80062b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80062b4:	d3fb      	bcc.n	80062ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80062b6:	f004 ff4f 	bl	800b158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80062ba:	f7fe fee1 	bl	8005080 <main>
  bx  lr
 80062be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80062c0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80062c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80062c8:	24000018 	.word	0x24000018
  ldr r2, =_sidata
 80062cc:	0800d918 	.word	0x0800d918
  ldr r2, =_sbss
 80062d0:	24000018 	.word	0x24000018
  ldr r4, =_ebss
 80062d4:	2400026c 	.word	0x2400026c

080062d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80062d8:	e7fe      	b.n	80062d8 <ADC3_IRQHandler>
	...

080062dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062e2:	2003      	movs	r0, #3
 80062e4:	f000 f980 	bl	80065e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80062e8:	f002 f800 	bl	80082ec <HAL_RCC_GetSysClockFreq>
 80062ec:	4602      	mov	r2, r0
 80062ee:	4b15      	ldr	r3, [pc, #84]	@ (8006344 <HAL_Init+0x68>)
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	0a1b      	lsrs	r3, r3, #8
 80062f4:	f003 030f 	and.w	r3, r3, #15
 80062f8:	4913      	ldr	r1, [pc, #76]	@ (8006348 <HAL_Init+0x6c>)
 80062fa:	5ccb      	ldrb	r3, [r1, r3]
 80062fc:	f003 031f 	and.w	r3, r3, #31
 8006300:	fa22 f303 	lsr.w	r3, r2, r3
 8006304:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006306:	4b0f      	ldr	r3, [pc, #60]	@ (8006344 <HAL_Init+0x68>)
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	f003 030f 	and.w	r3, r3, #15
 800630e:	4a0e      	ldr	r2, [pc, #56]	@ (8006348 <HAL_Init+0x6c>)
 8006310:	5cd3      	ldrb	r3, [r2, r3]
 8006312:	f003 031f 	and.w	r3, r3, #31
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	fa22 f303 	lsr.w	r3, r2, r3
 800631c:	4a0b      	ldr	r2, [pc, #44]	@ (800634c <HAL_Init+0x70>)
 800631e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006320:	4a0b      	ldr	r2, [pc, #44]	@ (8006350 <HAL_Init+0x74>)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006326:	2000      	movs	r0, #0
 8006328:	f000 f814 	bl	8006354 <HAL_InitTick>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d001      	beq.n	8006336 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e002      	b.n	800633c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006336:	f7ff fc23 	bl	8005b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3708      	adds	r7, #8
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	58024400 	.word	0x58024400
 8006348:	0800d900 	.word	0x0800d900
 800634c:	2400000c 	.word	0x2400000c
 8006350:	24000008 	.word	0x24000008

08006354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800635c:	4b15      	ldr	r3, [pc, #84]	@ (80063b4 <HAL_InitTick+0x60>)
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e021      	b.n	80063ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006368:	4b13      	ldr	r3, [pc, #76]	@ (80063b8 <HAL_InitTick+0x64>)
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	4b11      	ldr	r3, [pc, #68]	@ (80063b4 <HAL_InitTick+0x60>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	4619      	mov	r1, r3
 8006372:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8006376:	fbb3 f3f1 	udiv	r3, r3, r1
 800637a:	fbb2 f3f3 	udiv	r3, r2, r3
 800637e:	4618      	mov	r0, r3
 8006380:	f000 f965 	bl	800664e <HAL_SYSTICK_Config>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e00e      	b.n	80063ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b0f      	cmp	r3, #15
 8006392:	d80a      	bhi.n	80063aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006394:	2200      	movs	r2, #0
 8006396:	6879      	ldr	r1, [r7, #4]
 8006398:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800639c:	f000 f92f 	bl	80065fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80063a0:	4a06      	ldr	r2, [pc, #24]	@ (80063bc <HAL_InitTick+0x68>)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80063a6:	2300      	movs	r3, #0
 80063a8:	e000      	b.n	80063ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3708      	adds	r7, #8
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}
 80063b4:	24000014 	.word	0x24000014
 80063b8:	24000008 	.word	0x24000008
 80063bc:	24000010 	.word	0x24000010

080063c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80063c0:	b480      	push	{r7}
 80063c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80063c4:	4b06      	ldr	r3, [pc, #24]	@ (80063e0 <HAL_IncTick+0x20>)
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	461a      	mov	r2, r3
 80063ca:	4b06      	ldr	r3, [pc, #24]	@ (80063e4 <HAL_IncTick+0x24>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4413      	add	r3, r2
 80063d0:	4a04      	ldr	r2, [pc, #16]	@ (80063e4 <HAL_IncTick+0x24>)
 80063d2:	6013      	str	r3, [r2, #0]
}
 80063d4:	bf00      	nop
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	24000014 	.word	0x24000014
 80063e4:	24000268 	.word	0x24000268

080063e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80063e8:	b480      	push	{r7}
 80063ea:	af00      	add	r7, sp, #0
  return uwTick;
 80063ec:	4b03      	ldr	r3, [pc, #12]	@ (80063fc <HAL_GetTick+0x14>)
 80063ee:	681b      	ldr	r3, [r3, #0]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	24000268 	.word	0x24000268

08006400 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006408:	f7ff ffee 	bl	80063e8 <HAL_GetTick>
 800640c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006418:	d005      	beq.n	8006426 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800641a:	4b0a      	ldr	r3, [pc, #40]	@ (8006444 <HAL_Delay+0x44>)
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	461a      	mov	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4413      	add	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006426:	bf00      	nop
 8006428:	f7ff ffde 	bl	80063e8 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	429a      	cmp	r2, r3
 8006436:	d8f7      	bhi.n	8006428 <HAL_Delay+0x28>
  {
  }
}
 8006438:	bf00      	nop
 800643a:	bf00      	nop
 800643c:	3710      	adds	r7, #16
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
 8006442:	bf00      	nop
 8006444:	24000014 	.word	0x24000014

08006448 <__NVIC_SetPriorityGrouping>:
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f003 0307 	and.w	r3, r3, #7
 8006456:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006458:	4b0b      	ldr	r3, [pc, #44]	@ (8006488 <__NVIC_SetPriorityGrouping+0x40>)
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006464:	4013      	ands	r3, r2
 8006466:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006470:	4b06      	ldr	r3, [pc, #24]	@ (800648c <__NVIC_SetPriorityGrouping+0x44>)
 8006472:	4313      	orrs	r3, r2
 8006474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006476:	4a04      	ldr	r2, [pc, #16]	@ (8006488 <__NVIC_SetPriorityGrouping+0x40>)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	60d3      	str	r3, [r2, #12]
}
 800647c:	bf00      	nop
 800647e:	3714      	adds	r7, #20
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	e000ed00 	.word	0xe000ed00
 800648c:	05fa0000 	.word	0x05fa0000

08006490 <__NVIC_GetPriorityGrouping>:
{
 8006490:	b480      	push	{r7}
 8006492:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006494:	4b04      	ldr	r3, [pc, #16]	@ (80064a8 <__NVIC_GetPriorityGrouping+0x18>)
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	0a1b      	lsrs	r3, r3, #8
 800649a:	f003 0307 	and.w	r3, r3, #7
}
 800649e:	4618      	mov	r0, r3
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr
 80064a8:	e000ed00 	.word	0xe000ed00

080064ac <__NVIC_EnableIRQ>:
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	4603      	mov	r3, r0
 80064b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80064b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	db0b      	blt.n	80064d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064be:	88fb      	ldrh	r3, [r7, #6]
 80064c0:	f003 021f 	and.w	r2, r3, #31
 80064c4:	4907      	ldr	r1, [pc, #28]	@ (80064e4 <__NVIC_EnableIRQ+0x38>)
 80064c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064ca:	095b      	lsrs	r3, r3, #5
 80064cc:	2001      	movs	r0, #1
 80064ce:	fa00 f202 	lsl.w	r2, r0, r2
 80064d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80064d6:	bf00      	nop
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	e000e100 	.word	0xe000e100

080064e8 <__NVIC_SetPriority>:
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	4603      	mov	r3, r0
 80064f0:	6039      	str	r1, [r7, #0]
 80064f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80064f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	db0a      	blt.n	8006512 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	b2da      	uxtb	r2, r3
 8006500:	490c      	ldr	r1, [pc, #48]	@ (8006534 <__NVIC_SetPriority+0x4c>)
 8006502:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006506:	0112      	lsls	r2, r2, #4
 8006508:	b2d2      	uxtb	r2, r2
 800650a:	440b      	add	r3, r1
 800650c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006510:	e00a      	b.n	8006528 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	b2da      	uxtb	r2, r3
 8006516:	4908      	ldr	r1, [pc, #32]	@ (8006538 <__NVIC_SetPriority+0x50>)
 8006518:	88fb      	ldrh	r3, [r7, #6]
 800651a:	f003 030f 	and.w	r3, r3, #15
 800651e:	3b04      	subs	r3, #4
 8006520:	0112      	lsls	r2, r2, #4
 8006522:	b2d2      	uxtb	r2, r2
 8006524:	440b      	add	r3, r1
 8006526:	761a      	strb	r2, [r3, #24]
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr
 8006534:	e000e100 	.word	0xe000e100
 8006538:	e000ed00 	.word	0xe000ed00

0800653c <NVIC_EncodePriority>:
{
 800653c:	b480      	push	{r7}
 800653e:	b089      	sub	sp, #36	@ 0x24
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f003 0307 	and.w	r3, r3, #7
 800654e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	f1c3 0307 	rsb	r3, r3, #7
 8006556:	2b04      	cmp	r3, #4
 8006558:	bf28      	it	cs
 800655a:	2304      	movcs	r3, #4
 800655c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	3304      	adds	r3, #4
 8006562:	2b06      	cmp	r3, #6
 8006564:	d902      	bls.n	800656c <NVIC_EncodePriority+0x30>
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	3b03      	subs	r3, #3
 800656a:	e000      	b.n	800656e <NVIC_EncodePriority+0x32>
 800656c:	2300      	movs	r3, #0
 800656e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006570:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	fa02 f303 	lsl.w	r3, r2, r3
 800657a:	43da      	mvns	r2, r3
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	401a      	ands	r2, r3
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006584:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	fa01 f303 	lsl.w	r3, r1, r3
 800658e:	43d9      	mvns	r1, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006594:	4313      	orrs	r3, r2
}
 8006596:	4618      	mov	r0, r3
 8006598:	3724      	adds	r7, #36	@ 0x24
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
	...

080065a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	3b01      	subs	r3, #1
 80065b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065b4:	d301      	bcc.n	80065ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80065b6:	2301      	movs	r3, #1
 80065b8:	e00f      	b.n	80065da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065ba:	4a0a      	ldr	r2, [pc, #40]	@ (80065e4 <SysTick_Config+0x40>)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3b01      	subs	r3, #1
 80065c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065c2:	210f      	movs	r1, #15
 80065c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065c8:	f7ff ff8e 	bl	80064e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065cc:	4b05      	ldr	r3, [pc, #20]	@ (80065e4 <SysTick_Config+0x40>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065d2:	4b04      	ldr	r3, [pc, #16]	@ (80065e4 <SysTick_Config+0x40>)
 80065d4:	2207      	movs	r2, #7
 80065d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	e000e010 	.word	0xe000e010

080065e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff ff29 	bl	8006448 <__NVIC_SetPriorityGrouping>
}
 80065f6:	bf00      	nop
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b086      	sub	sp, #24
 8006602:	af00      	add	r7, sp, #0
 8006604:	4603      	mov	r3, r0
 8006606:	60b9      	str	r1, [r7, #8]
 8006608:	607a      	str	r2, [r7, #4]
 800660a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800660c:	f7ff ff40 	bl	8006490 <__NVIC_GetPriorityGrouping>
 8006610:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	68b9      	ldr	r1, [r7, #8]
 8006616:	6978      	ldr	r0, [r7, #20]
 8006618:	f7ff ff90 	bl	800653c <NVIC_EncodePriority>
 800661c:	4602      	mov	r2, r0
 800661e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006622:	4611      	mov	r1, r2
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff ff5f 	bl	80064e8 <__NVIC_SetPriority>
}
 800662a:	bf00      	nop
 800662c:	3718      	adds	r7, #24
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b082      	sub	sp, #8
 8006636:	af00      	add	r7, sp, #0
 8006638:	4603      	mov	r3, r0
 800663a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800663c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff ff33 	bl	80064ac <__NVIC_EnableIRQ>
}
 8006646:	bf00      	nop
 8006648:	3708      	adds	r7, #8
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800664e:	b580      	push	{r7, lr}
 8006650:	b082      	sub	sp, #8
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7ff ffa4 	bl	80065a4 <SysTick_Config>
 800665c:	4603      	mov	r3, r0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3708      	adds	r7, #8
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
	...

08006668 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800666c:	f3bf 8f5f 	dmb	sy
}
 8006670:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006672:	4b07      	ldr	r3, [pc, #28]	@ (8006690 <HAL_MPU_Disable+0x28>)
 8006674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006676:	4a06      	ldr	r2, [pc, #24]	@ (8006690 <HAL_MPU_Disable+0x28>)
 8006678:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800667c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800667e:	4b05      	ldr	r3, [pc, #20]	@ (8006694 <HAL_MPU_Disable+0x2c>)
 8006680:	2200      	movs	r2, #0
 8006682:	605a      	str	r2, [r3, #4]
}
 8006684:	bf00      	nop
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	e000ed00 	.word	0xe000ed00
 8006694:	e000ed90 	.word	0xe000ed90

08006698 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80066a0:	4a0b      	ldr	r2, [pc, #44]	@ (80066d0 <HAL_MPU_Enable+0x38>)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f043 0301 	orr.w	r3, r3, #1
 80066a8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80066aa:	4b0a      	ldr	r3, [pc, #40]	@ (80066d4 <HAL_MPU_Enable+0x3c>)
 80066ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ae:	4a09      	ldr	r2, [pc, #36]	@ (80066d4 <HAL_MPU_Enable+0x3c>)
 80066b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066b4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80066b6:	f3bf 8f4f 	dsb	sy
}
 80066ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80066bc:	f3bf 8f6f 	isb	sy
}
 80066c0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	e000ed90 	.word	0xe000ed90
 80066d4:	e000ed00 	.word	0xe000ed00

080066d8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	785a      	ldrb	r2, [r3, #1]
 80066e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006754 <HAL_MPU_ConfigRegion+0x7c>)
 80066e6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80066e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006754 <HAL_MPU_ConfigRegion+0x7c>)
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	4a19      	ldr	r2, [pc, #100]	@ (8006754 <HAL_MPU_ConfigRegion+0x7c>)
 80066ee:	f023 0301 	bic.w	r3, r3, #1
 80066f2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80066f4:	4a17      	ldr	r2, [pc, #92]	@ (8006754 <HAL_MPU_ConfigRegion+0x7c>)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	7b1b      	ldrb	r3, [r3, #12]
 8006700:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	7adb      	ldrb	r3, [r3, #11]
 8006706:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006708:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	7a9b      	ldrb	r3, [r3, #10]
 800670e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006710:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	7b5b      	ldrb	r3, [r3, #13]
 8006716:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006718:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	7b9b      	ldrb	r3, [r3, #14]
 800671e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006720:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	7bdb      	ldrb	r3, [r3, #15]
 8006726:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006728:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	7a5b      	ldrb	r3, [r3, #9]
 800672e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006730:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	7a1b      	ldrb	r3, [r3, #8]
 8006736:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006738:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	7812      	ldrb	r2, [r2, #0]
 800673e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006740:	4a04      	ldr	r2, [pc, #16]	@ (8006754 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006742:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006744:	6113      	str	r3, [r2, #16]
}
 8006746:	bf00      	nop
 8006748:	370c      	adds	r7, #12
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	e000ed90 	.word	0xe000ed90

08006758 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006758:	b480      	push	{r7}
 800675a:	b089      	sub	sp, #36	@ 0x24
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006762:	2300      	movs	r3, #0
 8006764:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006766:	4b86      	ldr	r3, [pc, #536]	@ (8006980 <HAL_GPIO_Init+0x228>)
 8006768:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800676a:	e18c      	b.n	8006a86 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	2101      	movs	r1, #1
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	fa01 f303 	lsl.w	r3, r1, r3
 8006778:	4013      	ands	r3, r2
 800677a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	2b00      	cmp	r3, #0
 8006780:	f000 817e 	beq.w	8006a80 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f003 0303 	and.w	r3, r3, #3
 800678c:	2b01      	cmp	r3, #1
 800678e:	d005      	beq.n	800679c <HAL_GPIO_Init+0x44>
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f003 0303 	and.w	r3, r3, #3
 8006798:	2b02      	cmp	r3, #2
 800679a:	d130      	bne.n	80067fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	005b      	lsls	r3, r3, #1
 80067a6:	2203      	movs	r2, #3
 80067a8:	fa02 f303 	lsl.w	r3, r2, r3
 80067ac:	43db      	mvns	r3, r3
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	4013      	ands	r3, r2
 80067b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	68da      	ldr	r2, [r3, #12]
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	fa02 f303 	lsl.w	r3, r2, r3
 80067c0:	69ba      	ldr	r2, [r7, #24]
 80067c2:	4313      	orrs	r3, r2
 80067c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80067d2:	2201      	movs	r2, #1
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	fa02 f303 	lsl.w	r3, r2, r3
 80067da:	43db      	mvns	r3, r3
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	4013      	ands	r3, r2
 80067e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	091b      	lsrs	r3, r3, #4
 80067e8:	f003 0201 	and.w	r2, r3, #1
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	fa02 f303 	lsl.w	r3, r2, r3
 80067f2:	69ba      	ldr	r2, [r7, #24]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	69ba      	ldr	r2, [r7, #24]
 80067fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f003 0303 	and.w	r3, r3, #3
 8006806:	2b03      	cmp	r3, #3
 8006808:	d017      	beq.n	800683a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68db      	ldr	r3, [r3, #12]
 800680e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	005b      	lsls	r3, r3, #1
 8006814:	2203      	movs	r2, #3
 8006816:	fa02 f303 	lsl.w	r3, r2, r3
 800681a:	43db      	mvns	r3, r3
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	4013      	ands	r3, r2
 8006820:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	689a      	ldr	r2, [r3, #8]
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	005b      	lsls	r3, r3, #1
 800682a:	fa02 f303 	lsl.w	r3, r2, r3
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	4313      	orrs	r3, r2
 8006832:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	69ba      	ldr	r2, [r7, #24]
 8006838:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f003 0303 	and.w	r3, r3, #3
 8006842:	2b02      	cmp	r3, #2
 8006844:	d123      	bne.n	800688e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	08da      	lsrs	r2, r3, #3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	3208      	adds	r2, #8
 800684e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006852:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006854:	69fb      	ldr	r3, [r7, #28]
 8006856:	f003 0307 	and.w	r3, r3, #7
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	220f      	movs	r2, #15
 800685e:	fa02 f303 	lsl.w	r3, r2, r3
 8006862:	43db      	mvns	r3, r3
 8006864:	69ba      	ldr	r2, [r7, #24]
 8006866:	4013      	ands	r3, r2
 8006868:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	691a      	ldr	r2, [r3, #16]
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	f003 0307 	and.w	r3, r3, #7
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	fa02 f303 	lsl.w	r3, r2, r3
 800687a:	69ba      	ldr	r2, [r7, #24]
 800687c:	4313      	orrs	r3, r2
 800687e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006880:	69fb      	ldr	r3, [r7, #28]
 8006882:	08da      	lsrs	r2, r3, #3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	3208      	adds	r2, #8
 8006888:	69b9      	ldr	r1, [r7, #24]
 800688a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	2203      	movs	r2, #3
 800689a:	fa02 f303 	lsl.w	r3, r2, r3
 800689e:	43db      	mvns	r3, r3
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	4013      	ands	r3, r2
 80068a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f003 0203 	and.w	r2, r3, #3
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	005b      	lsls	r3, r3, #1
 80068b2:	fa02 f303 	lsl.w	r3, r2, r3
 80068b6:	69ba      	ldr	r2, [r7, #24]
 80068b8:	4313      	orrs	r3, r2
 80068ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 80d8 	beq.w	8006a80 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80068d0:	4b2c      	ldr	r3, [pc, #176]	@ (8006984 <HAL_GPIO_Init+0x22c>)
 80068d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068d6:	4a2b      	ldr	r2, [pc, #172]	@ (8006984 <HAL_GPIO_Init+0x22c>)
 80068d8:	f043 0302 	orr.w	r3, r3, #2
 80068dc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80068e0:	4b28      	ldr	r3, [pc, #160]	@ (8006984 <HAL_GPIO_Init+0x22c>)
 80068e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80068ee:	4a26      	ldr	r2, [pc, #152]	@ (8006988 <HAL_GPIO_Init+0x230>)
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	089b      	lsrs	r3, r3, #2
 80068f4:	3302      	adds	r3, #2
 80068f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	f003 0303 	and.w	r3, r3, #3
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	220f      	movs	r2, #15
 8006906:	fa02 f303 	lsl.w	r3, r2, r3
 800690a:	43db      	mvns	r3, r3
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	4013      	ands	r3, r2
 8006910:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a1d      	ldr	r2, [pc, #116]	@ (800698c <HAL_GPIO_Init+0x234>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d04a      	beq.n	80069b0 <HAL_GPIO_Init+0x258>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a1c      	ldr	r2, [pc, #112]	@ (8006990 <HAL_GPIO_Init+0x238>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d02b      	beq.n	800697a <HAL_GPIO_Init+0x222>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a1b      	ldr	r2, [pc, #108]	@ (8006994 <HAL_GPIO_Init+0x23c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d025      	beq.n	8006976 <HAL_GPIO_Init+0x21e>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a1a      	ldr	r2, [pc, #104]	@ (8006998 <HAL_GPIO_Init+0x240>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d01f      	beq.n	8006972 <HAL_GPIO_Init+0x21a>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a19      	ldr	r2, [pc, #100]	@ (800699c <HAL_GPIO_Init+0x244>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d019      	beq.n	800696e <HAL_GPIO_Init+0x216>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a18      	ldr	r2, [pc, #96]	@ (80069a0 <HAL_GPIO_Init+0x248>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d013      	beq.n	800696a <HAL_GPIO_Init+0x212>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a17      	ldr	r2, [pc, #92]	@ (80069a4 <HAL_GPIO_Init+0x24c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d00d      	beq.n	8006966 <HAL_GPIO_Init+0x20e>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a16      	ldr	r2, [pc, #88]	@ (80069a8 <HAL_GPIO_Init+0x250>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d007      	beq.n	8006962 <HAL_GPIO_Init+0x20a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a15      	ldr	r2, [pc, #84]	@ (80069ac <HAL_GPIO_Init+0x254>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d101      	bne.n	800695e <HAL_GPIO_Init+0x206>
 800695a:	2309      	movs	r3, #9
 800695c:	e029      	b.n	80069b2 <HAL_GPIO_Init+0x25a>
 800695e:	230a      	movs	r3, #10
 8006960:	e027      	b.n	80069b2 <HAL_GPIO_Init+0x25a>
 8006962:	2307      	movs	r3, #7
 8006964:	e025      	b.n	80069b2 <HAL_GPIO_Init+0x25a>
 8006966:	2306      	movs	r3, #6
 8006968:	e023      	b.n	80069b2 <HAL_GPIO_Init+0x25a>
 800696a:	2305      	movs	r3, #5
 800696c:	e021      	b.n	80069b2 <HAL_GPIO_Init+0x25a>
 800696e:	2304      	movs	r3, #4
 8006970:	e01f      	b.n	80069b2 <HAL_GPIO_Init+0x25a>
 8006972:	2303      	movs	r3, #3
 8006974:	e01d      	b.n	80069b2 <HAL_GPIO_Init+0x25a>
 8006976:	2302      	movs	r3, #2
 8006978:	e01b      	b.n	80069b2 <HAL_GPIO_Init+0x25a>
 800697a:	2301      	movs	r3, #1
 800697c:	e019      	b.n	80069b2 <HAL_GPIO_Init+0x25a>
 800697e:	bf00      	nop
 8006980:	58000080 	.word	0x58000080
 8006984:	58024400 	.word	0x58024400
 8006988:	58000400 	.word	0x58000400
 800698c:	58020000 	.word	0x58020000
 8006990:	58020400 	.word	0x58020400
 8006994:	58020800 	.word	0x58020800
 8006998:	58020c00 	.word	0x58020c00
 800699c:	58021000 	.word	0x58021000
 80069a0:	58021400 	.word	0x58021400
 80069a4:	58021800 	.word	0x58021800
 80069a8:	58021c00 	.word	0x58021c00
 80069ac:	58022400 	.word	0x58022400
 80069b0:	2300      	movs	r3, #0
 80069b2:	69fa      	ldr	r2, [r7, #28]
 80069b4:	f002 0203 	and.w	r2, r2, #3
 80069b8:	0092      	lsls	r2, r2, #2
 80069ba:	4093      	lsls	r3, r2
 80069bc:	69ba      	ldr	r2, [r7, #24]
 80069be:	4313      	orrs	r3, r2
 80069c0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80069c2:	4938      	ldr	r1, [pc, #224]	@ (8006aa4 <HAL_GPIO_Init+0x34c>)
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	089b      	lsrs	r3, r3, #2
 80069c8:	3302      	adds	r3, #2
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80069d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	43db      	mvns	r3, r3
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	4013      	ands	r3, r2
 80069e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d003      	beq.n	80069f6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80069f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80069fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	43db      	mvns	r3, r3
 8006a0a:	69ba      	ldr	r2, [r7, #24]
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006a1c:	69ba      	ldr	r2, [r7, #24]
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	4313      	orrs	r3, r2
 8006a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006a24:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	43db      	mvns	r3, r3
 8006a36:	69ba      	ldr	r2, [r7, #24]
 8006a38:	4013      	ands	r3, r2
 8006a3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006a48:	69ba      	ldr	r2, [r7, #24]
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	43db      	mvns	r3, r3
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	4013      	ands	r3, r2
 8006a64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	69ba      	ldr	r2, [r7, #24]
 8006a7e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	3301      	adds	r3, #1
 8006a84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f47f ae6b 	bne.w	800676c <HAL_GPIO_Init+0x14>
  }
}
 8006a96:	bf00      	nop
 8006a98:	bf00      	nop
 8006a9a:	3724      	adds	r7, #36	@ 0x24
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr
 8006aa4:	58000400 	.word	0x58000400

08006aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	460b      	mov	r3, r1
 8006ab2:	807b      	strh	r3, [r7, #2]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006ab8:	787b      	ldrb	r3, [r7, #1]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006abe:	887a      	ldrh	r2, [r7, #2]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006ac4:	e003      	b.n	8006ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006ac6:	887b      	ldrh	r3, [r7, #2]
 8006ac8:	041a      	lsls	r2, r3, #16
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	619a      	str	r2, [r3, #24]
}
 8006ace:	bf00      	nop
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b082      	sub	sp, #8
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006ae4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ae8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006aec:	88fb      	ldrh	r3, [r7, #6]
 8006aee:	4013      	ands	r3, r2
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d008      	beq.n	8006b06 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006af4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006af8:	88fb      	ldrh	r3, [r7, #6]
 8006afa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006afe:	88fb      	ldrh	r3, [r7, #6]
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fd ff43 	bl	800498c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006b06:	bf00      	nop
 8006b08:	3708      	adds	r7, #8
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bd80      	pop	{r7, pc}
	...

08006b10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b082      	sub	sp, #8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d101      	bne.n	8006b22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e08b      	b.n	8006c3a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d106      	bne.n	8006b3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7ff f83c 	bl	8005bb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2224      	movs	r2, #36	@ 0x24
 8006b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f022 0201 	bic.w	r2, r2, #1
 8006b52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685a      	ldr	r2, [r3, #4]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006b60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	68db      	ldr	r3, [r3, #12]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d107      	bne.n	8006b8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	689a      	ldr	r2, [r3, #8]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b86:	609a      	str	r2, [r3, #8]
 8006b88:	e006      	b.n	8006b98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	689a      	ldr	r2, [r3, #8]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006b96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d108      	bne.n	8006bb2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	685a      	ldr	r2, [r3, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bae:	605a      	str	r2, [r3, #4]
 8006bb0:	e007      	b.n	8006bc2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006bc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6859      	ldr	r1, [r3, #4]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8006c44 <HAL_I2C_Init+0x134>)
 8006bce:	430b      	orrs	r3, r1
 8006bd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68da      	ldr	r2, [r3, #12]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006be0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	691a      	ldr	r2, [r3, #16]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	69d9      	ldr	r1, [r3, #28]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a1a      	ldr	r2, [r3, #32]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	430a      	orrs	r2, r1
 8006c0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 0201 	orr.w	r2, r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2220      	movs	r2, #32
 8006c26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	02008000 	.word	0x02008000

08006c48 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b088      	sub	sp, #32
 8006c4c:	af02      	add	r7, sp, #8
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	4608      	mov	r0, r1
 8006c52:	4611      	mov	r1, r2
 8006c54:	461a      	mov	r2, r3
 8006c56:	4603      	mov	r3, r0
 8006c58:	817b      	strh	r3, [r7, #10]
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	813b      	strh	r3, [r7, #8]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b20      	cmp	r3, #32
 8006c6c:	f040 80f9 	bne.w	8006e62 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c70:	6a3b      	ldr	r3, [r7, #32]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d002      	beq.n	8006c7c <HAL_I2C_Mem_Write+0x34>
 8006c76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d105      	bne.n	8006c88 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c82:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006c84:	2301      	movs	r3, #1
 8006c86:	e0ed      	b.n	8006e64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d101      	bne.n	8006c96 <HAL_I2C_Mem_Write+0x4e>
 8006c92:	2302      	movs	r3, #2
 8006c94:	e0e6      	b.n	8006e64 <HAL_I2C_Mem_Write+0x21c>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006c9e:	f7ff fba3 	bl	80063e8 <HAL_GetTick>
 8006ca2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	9300      	str	r3, [sp, #0]
 8006ca8:	2319      	movs	r3, #25
 8006caa:	2201      	movs	r2, #1
 8006cac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006cb0:	68f8      	ldr	r0, [r7, #12]
 8006cb2:	f000 fac3 	bl	800723c <I2C_WaitOnFlagUntilTimeout>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d001      	beq.n	8006cc0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e0d1      	b.n	8006e64 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	2221      	movs	r2, #33	@ 0x21
 8006cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2240      	movs	r2, #64	@ 0x40
 8006ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6a3a      	ldr	r2, [r7, #32]
 8006cda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006ce0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ce8:	88f8      	ldrh	r0, [r7, #6]
 8006cea:	893a      	ldrh	r2, [r7, #8]
 8006cec:	8979      	ldrh	r1, [r7, #10]
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	9301      	str	r3, [sp, #4]
 8006cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 f9d3 	bl	80070a4 <I2C_RequestMemoryWrite>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d005      	beq.n	8006d10 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e0a9      	b.n	8006e64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	2bff      	cmp	r3, #255	@ 0xff
 8006d18:	d90e      	bls.n	8006d38 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	22ff      	movs	r2, #255	@ 0xff
 8006d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d24:	b2da      	uxtb	r2, r3
 8006d26:	8979      	ldrh	r1, [r7, #10]
 8006d28:	2300      	movs	r3, #0
 8006d2a:	9300      	str	r3, [sp, #0]
 8006d2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006d30:	68f8      	ldr	r0, [r7, #12]
 8006d32:	f000 fc47 	bl	80075c4 <I2C_TransferConfig>
 8006d36:	e00f      	b.n	8006d58 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	8979      	ldrh	r1, [r7, #10]
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006d52:	68f8      	ldr	r0, [r7, #12]
 8006d54:	f000 fc36 	bl	80075c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f000 fac6 	bl	80072ee <I2C_WaitOnTXISFlagUntilTimeout>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d001      	beq.n	8006d6c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e07b      	b.n	8006e64 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d70:	781a      	ldrb	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7c:	1c5a      	adds	r2, r3, #1
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d86:	b29b      	uxth	r3, r3
 8006d88:	3b01      	subs	r3, #1
 8006d8a:	b29a      	uxth	r2, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d94:	3b01      	subs	r3, #1
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d034      	beq.n	8006e10 <HAL_I2C_Mem_Write+0x1c8>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d130      	bne.n	8006e10 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db4:	2200      	movs	r2, #0
 8006db6:	2180      	movs	r1, #128	@ 0x80
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f000 fa3f 	bl	800723c <I2C_WaitOnFlagUntilTimeout>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d001      	beq.n	8006dc8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e04d      	b.n	8006e64 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	2bff      	cmp	r3, #255	@ 0xff
 8006dd0:	d90e      	bls.n	8006df0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	22ff      	movs	r2, #255	@ 0xff
 8006dd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	8979      	ldrh	r1, [r7, #10]
 8006de0:	2300      	movs	r3, #0
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 fbeb 	bl	80075c4 <I2C_TransferConfig>
 8006dee:	e00f      	b.n	8006e10 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006dfe:	b2da      	uxtb	r2, r3
 8006e00:	8979      	ldrh	r1, [r7, #10]
 8006e02:	2300      	movs	r3, #0
 8006e04:	9300      	str	r3, [sp, #0]
 8006e06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f000 fbda 	bl	80075c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d19e      	bne.n	8006d58 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f000 faac 	bl	800737c <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d001      	beq.n	8006e2e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e01a      	b.n	8006e64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	2220      	movs	r2, #32
 8006e34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6859      	ldr	r1, [r3, #4]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	4b0a      	ldr	r3, [pc, #40]	@ (8006e6c <HAL_I2C_Mem_Write+0x224>)
 8006e42:	400b      	ands	r3, r1
 8006e44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2220      	movs	r2, #32
 8006e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	e000      	b.n	8006e64 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006e62:	2302      	movs	r3, #2
  }
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3718      	adds	r7, #24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	fe00e800 	.word	0xfe00e800

08006e70 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b088      	sub	sp, #32
 8006e74:	af02      	add	r7, sp, #8
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	4608      	mov	r0, r1
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	4603      	mov	r3, r0
 8006e80:	817b      	strh	r3, [r7, #10]
 8006e82:	460b      	mov	r3, r1
 8006e84:	813b      	strh	r3, [r7, #8]
 8006e86:	4613      	mov	r3, r2
 8006e88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	2b20      	cmp	r3, #32
 8006e94:	f040 80fd 	bne.w	8007092 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e98:	6a3b      	ldr	r3, [r7, #32]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d002      	beq.n	8006ea4 <HAL_I2C_Mem_Read+0x34>
 8006e9e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d105      	bne.n	8006eb0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006eaa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e0f1      	b.n	8007094 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d101      	bne.n	8006ebe <HAL_I2C_Mem_Read+0x4e>
 8006eba:	2302      	movs	r3, #2
 8006ebc:	e0ea      	b.n	8007094 <HAL_I2C_Mem_Read+0x224>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006ec6:	f7ff fa8f 	bl	80063e8 <HAL_GetTick>
 8006eca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	2319      	movs	r3, #25
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f000 f9af 	bl	800723c <I2C_WaitOnFlagUntilTimeout>
 8006ede:	4603      	mov	r3, r0
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d001      	beq.n	8006ee8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e0d5      	b.n	8007094 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2222      	movs	r2, #34	@ 0x22
 8006eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2240      	movs	r2, #64	@ 0x40
 8006ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6a3a      	ldr	r2, [r7, #32]
 8006f02:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006f08:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f10:	88f8      	ldrh	r0, [r7, #6]
 8006f12:	893a      	ldrh	r2, [r7, #8]
 8006f14:	8979      	ldrh	r1, [r7, #10]
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	9301      	str	r3, [sp, #4]
 8006f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1c:	9300      	str	r3, [sp, #0]
 8006f1e:	4603      	mov	r3, r0
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 f913 	bl	800714c <I2C_RequestMemoryRead>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d005      	beq.n	8006f38 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e0ad      	b.n	8007094 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	2bff      	cmp	r3, #255	@ 0xff
 8006f40:	d90e      	bls.n	8006f60 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	22ff      	movs	r2, #255	@ 0xff
 8006f46:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f4c:	b2da      	uxtb	r2, r3
 8006f4e:	8979      	ldrh	r1, [r7, #10]
 8006f50:	4b52      	ldr	r3, [pc, #328]	@ (800709c <HAL_I2C_Mem_Read+0x22c>)
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 fb33 	bl	80075c4 <I2C_TransferConfig>
 8006f5e:	e00f      	b.n	8006f80 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	8979      	ldrh	r1, [r7, #10]
 8006f72:	4b4a      	ldr	r3, [pc, #296]	@ (800709c <HAL_I2C_Mem_Read+0x22c>)
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006f7a:	68f8      	ldr	r0, [r7, #12]
 8006f7c:	f000 fb22 	bl	80075c4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f86:	2200      	movs	r2, #0
 8006f88:	2104      	movs	r1, #4
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f000 f956 	bl	800723c <I2C_WaitOnFlagUntilTimeout>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d001      	beq.n	8006f9a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	e07c      	b.n	8007094 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa4:	b2d2      	uxtb	r2, r2
 8006fa6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fac:	1c5a      	adds	r2, r3, #1
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fb6:	3b01      	subs	r3, #1
 8006fb8:	b29a      	uxth	r2, r3
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d034      	beq.n	8007040 <HAL_I2C_Mem_Read+0x1d0>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d130      	bne.n	8007040 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	9300      	str	r3, [sp, #0]
 8006fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	2180      	movs	r1, #128	@ 0x80
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 f927 	bl	800723c <I2C_WaitOnFlagUntilTimeout>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e04d      	b.n	8007094 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	2bff      	cmp	r3, #255	@ 0xff
 8007000:	d90e      	bls.n	8007020 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	22ff      	movs	r2, #255	@ 0xff
 8007006:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800700c:	b2da      	uxtb	r2, r3
 800700e:	8979      	ldrh	r1, [r7, #10]
 8007010:	2300      	movs	r3, #0
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 fad3 	bl	80075c4 <I2C_TransferConfig>
 800701e:	e00f      	b.n	8007040 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007024:	b29a      	uxth	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800702e:	b2da      	uxtb	r2, r3
 8007030:	8979      	ldrh	r1, [r7, #10]
 8007032:	2300      	movs	r3, #0
 8007034:	9300      	str	r3, [sp, #0]
 8007036:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f000 fac2 	bl	80075c4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007044:	b29b      	uxth	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d19a      	bne.n	8006f80 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f000 f994 	bl	800737c <I2C_WaitOnSTOPFlagUntilTimeout>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e01a      	b.n	8007094 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2220      	movs	r2, #32
 8007064:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	6859      	ldr	r1, [r3, #4]
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	4b0b      	ldr	r3, [pc, #44]	@ (80070a0 <HAL_I2C_Mem_Read+0x230>)
 8007072:	400b      	ands	r3, r1
 8007074:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2220      	movs	r2, #32
 800707a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	e000      	b.n	8007094 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007092:	2302      	movs	r3, #2
  }
}
 8007094:	4618      	mov	r0, r3
 8007096:	3718      	adds	r7, #24
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}
 800709c:	80002400 	.word	0x80002400
 80070a0:	fe00e800 	.word	0xfe00e800

080070a4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b086      	sub	sp, #24
 80070a8:	af02      	add	r7, sp, #8
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	4608      	mov	r0, r1
 80070ae:	4611      	mov	r1, r2
 80070b0:	461a      	mov	r2, r3
 80070b2:	4603      	mov	r3, r0
 80070b4:	817b      	strh	r3, [r7, #10]
 80070b6:	460b      	mov	r3, r1
 80070b8:	813b      	strh	r3, [r7, #8]
 80070ba:	4613      	mov	r3, r2
 80070bc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80070be:	88fb      	ldrh	r3, [r7, #6]
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	8979      	ldrh	r1, [r7, #10]
 80070c4:	4b20      	ldr	r3, [pc, #128]	@ (8007148 <I2C_RequestMemoryWrite+0xa4>)
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80070cc:	68f8      	ldr	r0, [r7, #12]
 80070ce:	f000 fa79 	bl	80075c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070d2:	69fa      	ldr	r2, [r7, #28]
 80070d4:	69b9      	ldr	r1, [r7, #24]
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 f909 	bl	80072ee <I2C_WaitOnTXISFlagUntilTimeout>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e02c      	b.n	8007140 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80070e6:	88fb      	ldrh	r3, [r7, #6]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d105      	bne.n	80070f8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80070ec:	893b      	ldrh	r3, [r7, #8]
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	629a      	str	r2, [r3, #40]	@ 0x28
 80070f6:	e015      	b.n	8007124 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80070f8:	893b      	ldrh	r3, [r7, #8]
 80070fa:	0a1b      	lsrs	r3, r3, #8
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	b2da      	uxtb	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007106:	69fa      	ldr	r2, [r7, #28]
 8007108:	69b9      	ldr	r1, [r7, #24]
 800710a:	68f8      	ldr	r0, [r7, #12]
 800710c:	f000 f8ef 	bl	80072ee <I2C_WaitOnTXISFlagUntilTimeout>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d001      	beq.n	800711a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e012      	b.n	8007140 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800711a:	893b      	ldrh	r3, [r7, #8]
 800711c:	b2da      	uxtb	r2, r3
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	2200      	movs	r2, #0
 800712c:	2180      	movs	r1, #128	@ 0x80
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 f884 	bl	800723c <I2C_WaitOnFlagUntilTimeout>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e000      	b.n	8007140 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	80002000 	.word	0x80002000

0800714c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af02      	add	r7, sp, #8
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	4608      	mov	r0, r1
 8007156:	4611      	mov	r1, r2
 8007158:	461a      	mov	r2, r3
 800715a:	4603      	mov	r3, r0
 800715c:	817b      	strh	r3, [r7, #10]
 800715e:	460b      	mov	r3, r1
 8007160:	813b      	strh	r3, [r7, #8]
 8007162:	4613      	mov	r3, r2
 8007164:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007166:	88fb      	ldrh	r3, [r7, #6]
 8007168:	b2da      	uxtb	r2, r3
 800716a:	8979      	ldrh	r1, [r7, #10]
 800716c:	4b20      	ldr	r3, [pc, #128]	@ (80071f0 <I2C_RequestMemoryRead+0xa4>)
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	2300      	movs	r3, #0
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f000 fa26 	bl	80075c4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007178:	69fa      	ldr	r2, [r7, #28]
 800717a:	69b9      	ldr	r1, [r7, #24]
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f000 f8b6 	bl	80072ee <I2C_WaitOnTXISFlagUntilTimeout>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d001      	beq.n	800718c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e02c      	b.n	80071e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800718c:	88fb      	ldrh	r3, [r7, #6]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d105      	bne.n	800719e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007192:	893b      	ldrh	r3, [r7, #8]
 8007194:	b2da      	uxtb	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	629a      	str	r2, [r3, #40]	@ 0x28
 800719c:	e015      	b.n	80071ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800719e:	893b      	ldrh	r3, [r7, #8]
 80071a0:	0a1b      	lsrs	r3, r3, #8
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	b2da      	uxtb	r2, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071ac:	69fa      	ldr	r2, [r7, #28]
 80071ae:	69b9      	ldr	r1, [r7, #24]
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f000 f89c 	bl	80072ee <I2C_WaitOnTXISFlagUntilTimeout>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d001      	beq.n	80071c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	e012      	b.n	80071e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80071c0:	893b      	ldrh	r3, [r7, #8]
 80071c2:	b2da      	uxtb	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	2200      	movs	r2, #0
 80071d2:	2140      	movs	r1, #64	@ 0x40
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f000 f831 	bl	800723c <I2C_WaitOnFlagUntilTimeout>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d001      	beq.n	80071e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e000      	b.n	80071e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3710      	adds	r7, #16
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	80002000 	.word	0x80002000

080071f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	2b02      	cmp	r3, #2
 8007208:	d103      	bne.n	8007212 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2200      	movs	r2, #0
 8007210:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b01      	cmp	r3, #1
 800721e:	d007      	beq.n	8007230 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	699a      	ldr	r2, [r3, #24]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f042 0201 	orr.w	r2, r2, #1
 800722e:	619a      	str	r2, [r3, #24]
  }
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	603b      	str	r3, [r7, #0]
 8007248:	4613      	mov	r3, r2
 800724a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800724c:	e03b      	b.n	80072c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800724e:	69ba      	ldr	r2, [r7, #24]
 8007250:	6839      	ldr	r1, [r7, #0]
 8007252:	68f8      	ldr	r0, [r7, #12]
 8007254:	f000 f8d6 	bl	8007404 <I2C_IsErrorOccurred>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e041      	b.n	80072e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007268:	d02d      	beq.n	80072c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800726a:	f7ff f8bd 	bl	80063e8 <HAL_GetTick>
 800726e:	4602      	mov	r2, r0
 8007270:	69bb      	ldr	r3, [r7, #24]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	683a      	ldr	r2, [r7, #0]
 8007276:	429a      	cmp	r2, r3
 8007278:	d302      	bcc.n	8007280 <I2C_WaitOnFlagUntilTimeout+0x44>
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d122      	bne.n	80072c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	699a      	ldr	r2, [r3, #24]
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	4013      	ands	r3, r2
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	429a      	cmp	r2, r3
 800728e:	bf0c      	ite	eq
 8007290:	2301      	moveq	r3, #1
 8007292:	2300      	movne	r3, #0
 8007294:	b2db      	uxtb	r3, r3
 8007296:	461a      	mov	r2, r3
 8007298:	79fb      	ldrb	r3, [r7, #7]
 800729a:	429a      	cmp	r2, r3
 800729c:	d113      	bne.n	80072c6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072a2:	f043 0220 	orr.w	r2, r3, #32
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2220      	movs	r2, #32
 80072ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e00f      	b.n	80072e6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	699a      	ldr	r2, [r3, #24]
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	4013      	ands	r3, r2
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	bf0c      	ite	eq
 80072d6:	2301      	moveq	r3, #1
 80072d8:	2300      	movne	r3, #0
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	461a      	mov	r2, r3
 80072de:	79fb      	ldrb	r3, [r7, #7]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d0b4      	beq.n	800724e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b084      	sub	sp, #16
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	60f8      	str	r0, [r7, #12]
 80072f6:	60b9      	str	r1, [r7, #8]
 80072f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80072fa:	e033      	b.n	8007364 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	68b9      	ldr	r1, [r7, #8]
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 f87f 	bl	8007404 <I2C_IsErrorOccurred>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d001      	beq.n	8007310 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	e031      	b.n	8007374 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007316:	d025      	beq.n	8007364 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007318:	f7ff f866 	bl	80063e8 <HAL_GetTick>
 800731c:	4602      	mov	r2, r0
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	1ad3      	subs	r3, r2, r3
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	429a      	cmp	r2, r3
 8007326:	d302      	bcc.n	800732e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d11a      	bne.n	8007364 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b02      	cmp	r3, #2
 800733a:	d013      	beq.n	8007364 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007340:	f043 0220 	orr.w	r2, r3, #32
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2220      	movs	r2, #32
 800734c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e007      	b.n	8007374 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	f003 0302 	and.w	r3, r3, #2
 800736e:	2b02      	cmp	r3, #2
 8007370:	d1c4      	bne.n	80072fc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007372:	2300      	movs	r3, #0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007388:	e02f      	b.n	80073ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	68b9      	ldr	r1, [r7, #8]
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f000 f838 	bl	8007404 <I2C_IsErrorOccurred>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d001      	beq.n	800739e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800739a:	2301      	movs	r3, #1
 800739c:	e02d      	b.n	80073fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800739e:	f7ff f823 	bl	80063e8 <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d302      	bcc.n	80073b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d11a      	bne.n	80073ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	699b      	ldr	r3, [r3, #24]
 80073ba:	f003 0320 	and.w	r3, r3, #32
 80073be:	2b20      	cmp	r3, #32
 80073c0:	d013      	beq.n	80073ea <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073c6:	f043 0220 	orr.w	r2, r3, #32
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2220      	movs	r2, #32
 80073d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	2200      	movs	r2, #0
 80073da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e007      	b.n	80073fa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	699b      	ldr	r3, [r3, #24]
 80073f0:	f003 0320 	and.w	r3, r3, #32
 80073f4:	2b20      	cmp	r3, #32
 80073f6:	d1c8      	bne.n	800738a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80073f8:	2300      	movs	r3, #0
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}
	...

08007404 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b08a      	sub	sp, #40	@ 0x28
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	699b      	ldr	r3, [r3, #24]
 800741c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800741e:	2300      	movs	r3, #0
 8007420:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	f003 0310 	and.w	r3, r3, #16
 800742c:	2b00      	cmp	r3, #0
 800742e:	d068      	beq.n	8007502 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2210      	movs	r2, #16
 8007436:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007438:	e049      	b.n	80074ce <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007440:	d045      	beq.n	80074ce <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007442:	f7fe ffd1 	bl	80063e8 <HAL_GetTick>
 8007446:	4602      	mov	r2, r0
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	429a      	cmp	r2, r3
 8007450:	d302      	bcc.n	8007458 <I2C_IsErrorOccurred+0x54>
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d13a      	bne.n	80074ce <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007462:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800746a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007476:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800747a:	d121      	bne.n	80074c0 <I2C_IsErrorOccurred+0xbc>
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007482:	d01d      	beq.n	80074c0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007484:	7cfb      	ldrb	r3, [r7, #19]
 8007486:	2b20      	cmp	r3, #32
 8007488:	d01a      	beq.n	80074c0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	685a      	ldr	r2, [r3, #4]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007498:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800749a:	f7fe ffa5 	bl	80063e8 <HAL_GetTick>
 800749e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074a0:	e00e      	b.n	80074c0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80074a2:	f7fe ffa1 	bl	80063e8 <HAL_GetTick>
 80074a6:	4602      	mov	r2, r0
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	1ad3      	subs	r3, r2, r3
 80074ac:	2b19      	cmp	r3, #25
 80074ae:	d907      	bls.n	80074c0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80074b0:	6a3b      	ldr	r3, [r7, #32]
 80074b2:	f043 0320 	orr.w	r3, r3, #32
 80074b6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80074be:	e006      	b.n	80074ce <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	f003 0320 	and.w	r3, r3, #32
 80074ca:	2b20      	cmp	r3, #32
 80074cc:	d1e9      	bne.n	80074a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	699b      	ldr	r3, [r3, #24]
 80074d4:	f003 0320 	and.w	r3, r3, #32
 80074d8:	2b20      	cmp	r3, #32
 80074da:	d003      	beq.n	80074e4 <I2C_IsErrorOccurred+0xe0>
 80074dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d0aa      	beq.n	800743a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80074e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d103      	bne.n	80074f4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2220      	movs	r2, #32
 80074f2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80074f4:	6a3b      	ldr	r3, [r7, #32]
 80074f6:	f043 0304 	orr.w	r3, r3, #4
 80074fa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00b      	beq.n	800752c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007514:	6a3b      	ldr	r3, [r7, #32]
 8007516:	f043 0301 	orr.w	r3, r3, #1
 800751a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007524:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00b      	beq.n	800754e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	f043 0308 	orr.w	r3, r3, #8
 800753c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007546:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00b      	beq.n	8007570 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007558:	6a3b      	ldr	r3, [r7, #32]
 800755a:	f043 0302 	orr.w	r3, r3, #2
 800755e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007568:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007570:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007574:	2b00      	cmp	r3, #0
 8007576:	d01c      	beq.n	80075b2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007578:	68f8      	ldr	r0, [r7, #12]
 800757a:	f7ff fe3b 	bl	80071f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	6859      	ldr	r1, [r3, #4]
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	4b0d      	ldr	r3, [pc, #52]	@ (80075c0 <I2C_IsErrorOccurred+0x1bc>)
 800758a:	400b      	ands	r3, r1
 800758c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007592:	6a3b      	ldr	r3, [r7, #32]
 8007594:	431a      	orrs	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2220      	movs	r2, #32
 800759e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80075b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3728      	adds	r7, #40	@ 0x28
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
 80075be:	bf00      	nop
 80075c0:	fe00e800 	.word	0xfe00e800

080075c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b087      	sub	sp, #28
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	607b      	str	r3, [r7, #4]
 80075ce:	460b      	mov	r3, r1
 80075d0:	817b      	strh	r3, [r7, #10]
 80075d2:	4613      	mov	r3, r2
 80075d4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075d6:	897b      	ldrh	r3, [r7, #10]
 80075d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80075dc:	7a7b      	ldrb	r3, [r7, #9]
 80075de:	041b      	lsls	r3, r3, #16
 80075e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075e4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80075f2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685a      	ldr	r2, [r3, #4]
 80075fa:	6a3b      	ldr	r3, [r7, #32]
 80075fc:	0d5b      	lsrs	r3, r3, #21
 80075fe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007602:	4b08      	ldr	r3, [pc, #32]	@ (8007624 <I2C_TransferConfig+0x60>)
 8007604:	430b      	orrs	r3, r1
 8007606:	43db      	mvns	r3, r3
 8007608:	ea02 0103 	and.w	r1, r2, r3
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	430a      	orrs	r2, r1
 8007614:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007616:	bf00      	nop
 8007618:	371c      	adds	r7, #28
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	03ff63ff 	.word	0x03ff63ff

08007628 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007638:	b2db      	uxtb	r3, r3
 800763a:	2b20      	cmp	r3, #32
 800763c:	d138      	bne.n	80076b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007644:	2b01      	cmp	r3, #1
 8007646:	d101      	bne.n	800764c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007648:	2302      	movs	r3, #2
 800764a:	e032      	b.n	80076b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2224      	movs	r2, #36	@ 0x24
 8007658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f022 0201 	bic.w	r2, r2, #1
 800766a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800767a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6819      	ldr	r1, [r3, #0]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f042 0201 	orr.w	r2, r2, #1
 800769a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2220      	movs	r2, #32
 80076a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	e000      	b.n	80076b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80076b0:	2302      	movs	r3, #2
  }
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	370c      	adds	r7, #12
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr

080076be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80076be:	b480      	push	{r7}
 80076c0:	b085      	sub	sp, #20
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b20      	cmp	r3, #32
 80076d2:	d139      	bne.n	8007748 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d101      	bne.n	80076e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80076de:	2302      	movs	r3, #2
 80076e0:	e033      	b.n	800774a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2224      	movs	r2, #36	@ 0x24
 80076ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f022 0201 	bic.w	r2, r2, #1
 8007700:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007710:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	021b      	lsls	r3, r3, #8
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	4313      	orrs	r3, r2
 800771a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f042 0201 	orr.w	r2, r2, #1
 8007732:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2220      	movs	r2, #32
 8007738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007744:	2300      	movs	r3, #0
 8007746:	e000      	b.n	800774a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007748:	2302      	movs	r3, #2
  }
}
 800774a:	4618      	mov	r0, r3
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
	...

08007758 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007760:	4b19      	ldr	r3, [pc, #100]	@ (80077c8 <HAL_PWREx_ConfigSupply+0x70>)
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	f003 0304 	and.w	r3, r3, #4
 8007768:	2b04      	cmp	r3, #4
 800776a:	d00a      	beq.n	8007782 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800776c:	4b16      	ldr	r3, [pc, #88]	@ (80077c8 <HAL_PWREx_ConfigSupply+0x70>)
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f003 0307 	and.w	r3, r3, #7
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	429a      	cmp	r2, r3
 8007778:	d001      	beq.n	800777e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800777a:	2301      	movs	r3, #1
 800777c:	e01f      	b.n	80077be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800777e:	2300      	movs	r3, #0
 8007780:	e01d      	b.n	80077be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007782:	4b11      	ldr	r3, [pc, #68]	@ (80077c8 <HAL_PWREx_ConfigSupply+0x70>)
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	f023 0207 	bic.w	r2, r3, #7
 800778a:	490f      	ldr	r1, [pc, #60]	@ (80077c8 <HAL_PWREx_ConfigSupply+0x70>)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	4313      	orrs	r3, r2
 8007790:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007792:	f7fe fe29 	bl	80063e8 <HAL_GetTick>
 8007796:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007798:	e009      	b.n	80077ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800779a:	f7fe fe25 	bl	80063e8 <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80077a8:	d901      	bls.n	80077ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e007      	b.n	80077be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80077ae:	4b06      	ldr	r3, [pc, #24]	@ (80077c8 <HAL_PWREx_ConfigSupply+0x70>)
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077ba:	d1ee      	bne.n	800779a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80077bc:	2300      	movs	r3, #0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3710      	adds	r7, #16
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	58024800 	.word	0x58024800

080077cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b08c      	sub	sp, #48	@ 0x30
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e3c8      	b.n	8007f70 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f003 0301 	and.w	r3, r3, #1
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	f000 8087 	beq.w	80078fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077ec:	4b88      	ldr	r3, [pc, #544]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80077f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80077f6:	4b86      	ldr	r3, [pc, #536]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 80077f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80077fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077fe:	2b10      	cmp	r3, #16
 8007800:	d007      	beq.n	8007812 <HAL_RCC_OscConfig+0x46>
 8007802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007804:	2b18      	cmp	r3, #24
 8007806:	d110      	bne.n	800782a <HAL_RCC_OscConfig+0x5e>
 8007808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800780a:	f003 0303 	and.w	r3, r3, #3
 800780e:	2b02      	cmp	r3, #2
 8007810:	d10b      	bne.n	800782a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007812:	4b7f      	ldr	r3, [pc, #508]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800781a:	2b00      	cmp	r3, #0
 800781c:	d06c      	beq.n	80078f8 <HAL_RCC_OscConfig+0x12c>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d168      	bne.n	80078f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e3a2      	b.n	8007f70 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007832:	d106      	bne.n	8007842 <HAL_RCC_OscConfig+0x76>
 8007834:	4b76      	ldr	r3, [pc, #472]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a75      	ldr	r2, [pc, #468]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 800783a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	e02e      	b.n	80078a0 <HAL_RCC_OscConfig+0xd4>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10c      	bne.n	8007864 <HAL_RCC_OscConfig+0x98>
 800784a:	4b71      	ldr	r3, [pc, #452]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a70      	ldr	r2, [pc, #448]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 8007850:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007854:	6013      	str	r3, [r2, #0]
 8007856:	4b6e      	ldr	r3, [pc, #440]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a6d      	ldr	r2, [pc, #436]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 800785c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007860:	6013      	str	r3, [r2, #0]
 8007862:	e01d      	b.n	80078a0 <HAL_RCC_OscConfig+0xd4>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800786c:	d10c      	bne.n	8007888 <HAL_RCC_OscConfig+0xbc>
 800786e:	4b68      	ldr	r3, [pc, #416]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a67      	ldr	r2, [pc, #412]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 8007874:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007878:	6013      	str	r3, [r2, #0]
 800787a:	4b65      	ldr	r3, [pc, #404]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a64      	ldr	r2, [pc, #400]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 8007880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007884:	6013      	str	r3, [r2, #0]
 8007886:	e00b      	b.n	80078a0 <HAL_RCC_OscConfig+0xd4>
 8007888:	4b61      	ldr	r3, [pc, #388]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a60      	ldr	r2, [pc, #384]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 800788e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007892:	6013      	str	r3, [r2, #0]
 8007894:	4b5e      	ldr	r3, [pc, #376]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a5d      	ldr	r2, [pc, #372]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 800789a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800789e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d013      	beq.n	80078d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078a8:	f7fe fd9e 	bl	80063e8 <HAL_GetTick>
 80078ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078ae:	e008      	b.n	80078c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078b0:	f7fe fd9a 	bl	80063e8 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	2b64      	cmp	r3, #100	@ 0x64
 80078bc:	d901      	bls.n	80078c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80078be:	2303      	movs	r3, #3
 80078c0:	e356      	b.n	8007f70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078c2:	4b53      	ldr	r3, [pc, #332]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d0f0      	beq.n	80078b0 <HAL_RCC_OscConfig+0xe4>
 80078ce:	e014      	b.n	80078fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078d0:	f7fe fd8a 	bl	80063e8 <HAL_GetTick>
 80078d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80078d6:	e008      	b.n	80078ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078d8:	f7fe fd86 	bl	80063e8 <HAL_GetTick>
 80078dc:	4602      	mov	r2, r0
 80078de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	2b64      	cmp	r3, #100	@ 0x64
 80078e4:	d901      	bls.n	80078ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80078e6:	2303      	movs	r3, #3
 80078e8:	e342      	b.n	8007f70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80078ea:	4b49      	ldr	r3, [pc, #292]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1f0      	bne.n	80078d8 <HAL_RCC_OscConfig+0x10c>
 80078f6:	e000      	b.n	80078fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 0302 	and.w	r3, r3, #2
 8007902:	2b00      	cmp	r3, #0
 8007904:	f000 808c 	beq.w	8007a20 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007908:	4b41      	ldr	r3, [pc, #260]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007910:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007912:	4b3f      	ldr	r3, [pc, #252]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 8007914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007916:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007918:	6a3b      	ldr	r3, [r7, #32]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d007      	beq.n	800792e <HAL_RCC_OscConfig+0x162>
 800791e:	6a3b      	ldr	r3, [r7, #32]
 8007920:	2b18      	cmp	r3, #24
 8007922:	d137      	bne.n	8007994 <HAL_RCC_OscConfig+0x1c8>
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	f003 0303 	and.w	r3, r3, #3
 800792a:	2b00      	cmp	r3, #0
 800792c:	d132      	bne.n	8007994 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800792e:	4b38      	ldr	r3, [pc, #224]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 0304 	and.w	r3, r3, #4
 8007936:	2b00      	cmp	r3, #0
 8007938:	d005      	beq.n	8007946 <HAL_RCC_OscConfig+0x17a>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d101      	bne.n	8007946 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e314      	b.n	8007f70 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007946:	4b32      	ldr	r3, [pc, #200]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f023 0219 	bic.w	r2, r3, #25
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	492f      	ldr	r1, [pc, #188]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 8007954:	4313      	orrs	r3, r2
 8007956:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007958:	f7fe fd46 	bl	80063e8 <HAL_GetTick>
 800795c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800795e:	e008      	b.n	8007972 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007960:	f7fe fd42 	bl	80063e8 <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	2b02      	cmp	r3, #2
 800796c:	d901      	bls.n	8007972 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	e2fe      	b.n	8007f70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007972:	4b27      	ldr	r3, [pc, #156]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f003 0304 	and.w	r3, r3, #4
 800797a:	2b00      	cmp	r3, #0
 800797c:	d0f0      	beq.n	8007960 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800797e:	4b24      	ldr	r3, [pc, #144]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	061b      	lsls	r3, r3, #24
 800798c:	4920      	ldr	r1, [pc, #128]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 800798e:	4313      	orrs	r3, r2
 8007990:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007992:	e045      	b.n	8007a20 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d026      	beq.n	80079ea <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800799c:	4b1c      	ldr	r3, [pc, #112]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f023 0219 	bic.w	r2, r3, #25
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	4919      	ldr	r1, [pc, #100]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ae:	f7fe fd1b 	bl	80063e8 <HAL_GetTick>
 80079b2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079b4:	e008      	b.n	80079c8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079b6:	f7fe fd17 	bl	80063e8 <HAL_GetTick>
 80079ba:	4602      	mov	r2, r0
 80079bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079be:	1ad3      	subs	r3, r2, r3
 80079c0:	2b02      	cmp	r3, #2
 80079c2:	d901      	bls.n	80079c8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80079c4:	2303      	movs	r3, #3
 80079c6:	e2d3      	b.n	8007f70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079c8:	4b11      	ldr	r3, [pc, #68]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0304 	and.w	r3, r3, #4
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d0f0      	beq.n	80079b6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079d4:	4b0e      	ldr	r3, [pc, #56]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	061b      	lsls	r3, r3, #24
 80079e2:	490b      	ldr	r1, [pc, #44]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 80079e4:	4313      	orrs	r3, r2
 80079e6:	604b      	str	r3, [r1, #4]
 80079e8:	e01a      	b.n	8007a20 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079ea:	4b09      	ldr	r3, [pc, #36]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a08      	ldr	r2, [pc, #32]	@ (8007a10 <HAL_RCC_OscConfig+0x244>)
 80079f0:	f023 0301 	bic.w	r3, r3, #1
 80079f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f6:	f7fe fcf7 	bl	80063e8 <HAL_GetTick>
 80079fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80079fc:	e00a      	b.n	8007a14 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079fe:	f7fe fcf3 	bl	80063e8 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d903      	bls.n	8007a14 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e2af      	b.n	8007f70 <HAL_RCC_OscConfig+0x7a4>
 8007a10:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a14:	4b96      	ldr	r3, [pc, #600]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f003 0304 	and.w	r3, r3, #4
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1ee      	bne.n	80079fe <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0310 	and.w	r3, r3, #16
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d06a      	beq.n	8007b02 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a2c:	4b90      	ldr	r3, [pc, #576]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a34:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a36:	4b8e      	ldr	r3, [pc, #568]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a3a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	2b08      	cmp	r3, #8
 8007a40:	d007      	beq.n	8007a52 <HAL_RCC_OscConfig+0x286>
 8007a42:	69bb      	ldr	r3, [r7, #24]
 8007a44:	2b18      	cmp	r3, #24
 8007a46:	d11b      	bne.n	8007a80 <HAL_RCC_OscConfig+0x2b4>
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	f003 0303 	and.w	r3, r3, #3
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d116      	bne.n	8007a80 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a52:	4b87      	ldr	r3, [pc, #540]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d005      	beq.n	8007a6a <HAL_RCC_OscConfig+0x29e>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	69db      	ldr	r3, [r3, #28]
 8007a62:	2b80      	cmp	r3, #128	@ 0x80
 8007a64:	d001      	beq.n	8007a6a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e282      	b.n	8007f70 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a6a:	4b81      	ldr	r3, [pc, #516]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6a1b      	ldr	r3, [r3, #32]
 8007a76:	061b      	lsls	r3, r3, #24
 8007a78:	497d      	ldr	r1, [pc, #500]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007a7e:	e040      	b.n	8007b02 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	69db      	ldr	r3, [r3, #28]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d023      	beq.n	8007ad0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007a88:	4b79      	ldr	r3, [pc, #484]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a78      	ldr	r2, [pc, #480]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007a8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a94:	f7fe fca8 	bl	80063e8 <HAL_GetTick>
 8007a98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a9a:	e008      	b.n	8007aae <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007a9c:	f7fe fca4 	bl	80063e8 <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d901      	bls.n	8007aae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e260      	b.n	8007f70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007aae:	4b70      	ldr	r3, [pc, #448]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0f0      	beq.n	8007a9c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007aba:	4b6d      	ldr	r3, [pc, #436]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007abc:	68db      	ldr	r3, [r3, #12]
 8007abe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6a1b      	ldr	r3, [r3, #32]
 8007ac6:	061b      	lsls	r3, r3, #24
 8007ac8:	4969      	ldr	r1, [pc, #420]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007aca:	4313      	orrs	r3, r2
 8007acc:	60cb      	str	r3, [r1, #12]
 8007ace:	e018      	b.n	8007b02 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007ad0:	4b67      	ldr	r3, [pc, #412]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a66      	ldr	r2, [pc, #408]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007ad6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007adc:	f7fe fc84 	bl	80063e8 <HAL_GetTick>
 8007ae0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007ae2:	e008      	b.n	8007af6 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007ae4:	f7fe fc80 	bl	80063e8 <HAL_GetTick>
 8007ae8:	4602      	mov	r2, r0
 8007aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aec:	1ad3      	subs	r3, r2, r3
 8007aee:	2b02      	cmp	r3, #2
 8007af0:	d901      	bls.n	8007af6 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e23c      	b.n	8007f70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007af6:	4b5e      	ldr	r3, [pc, #376]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1f0      	bne.n	8007ae4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 0308 	and.w	r3, r3, #8
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d036      	beq.n	8007b7c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d019      	beq.n	8007b4a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b16:	4b56      	ldr	r3, [pc, #344]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007b18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b1a:	4a55      	ldr	r2, [pc, #340]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007b1c:	f043 0301 	orr.w	r3, r3, #1
 8007b20:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b22:	f7fe fc61 	bl	80063e8 <HAL_GetTick>
 8007b26:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b28:	e008      	b.n	8007b3c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b2a:	f7fe fc5d 	bl	80063e8 <HAL_GetTick>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d901      	bls.n	8007b3c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e219      	b.n	8007f70 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007b3c:	4b4c      	ldr	r3, [pc, #304]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007b3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b40:	f003 0302 	and.w	r3, r3, #2
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d0f0      	beq.n	8007b2a <HAL_RCC_OscConfig+0x35e>
 8007b48:	e018      	b.n	8007b7c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b4a:	4b49      	ldr	r3, [pc, #292]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007b4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b4e:	4a48      	ldr	r2, [pc, #288]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007b50:	f023 0301 	bic.w	r3, r3, #1
 8007b54:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b56:	f7fe fc47 	bl	80063e8 <HAL_GetTick>
 8007b5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007b5c:	e008      	b.n	8007b70 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b5e:	f7fe fc43 	bl	80063e8 <HAL_GetTick>
 8007b62:	4602      	mov	r2, r0
 8007b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d901      	bls.n	8007b70 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e1ff      	b.n	8007f70 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007b70:	4b3f      	ldr	r3, [pc, #252]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007b72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b74:	f003 0302 	and.w	r3, r3, #2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1f0      	bne.n	8007b5e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0320 	and.w	r3, r3, #32
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d036      	beq.n	8007bf6 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	699b      	ldr	r3, [r3, #24]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d019      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007b90:	4b37      	ldr	r3, [pc, #220]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a36      	ldr	r2, [pc, #216]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007b96:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007b9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007b9c:	f7fe fc24 	bl	80063e8 <HAL_GetTick>
 8007ba0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007ba2:	e008      	b.n	8007bb6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ba4:	f7fe fc20 	bl	80063e8 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d901      	bls.n	8007bb6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e1dc      	b.n	8007f70 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007bb6:	4b2e      	ldr	r3, [pc, #184]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d0f0      	beq.n	8007ba4 <HAL_RCC_OscConfig+0x3d8>
 8007bc2:	e018      	b.n	8007bf6 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a29      	ldr	r2, [pc, #164]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007bca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007bce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007bd0:	f7fe fc0a 	bl	80063e8 <HAL_GetTick>
 8007bd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007bd6:	e008      	b.n	8007bea <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007bd8:	f7fe fc06 	bl	80063e8 <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d901      	bls.n	8007bea <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e1c2      	b.n	8007f70 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007bea:	4b21      	ldr	r3, [pc, #132]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1f0      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0304 	and.w	r3, r3, #4
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	f000 8086 	beq.w	8007d10 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007c04:	4b1b      	ldr	r3, [pc, #108]	@ (8007c74 <HAL_RCC_OscConfig+0x4a8>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a1a      	ldr	r2, [pc, #104]	@ (8007c74 <HAL_RCC_OscConfig+0x4a8>)
 8007c0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c10:	f7fe fbea 	bl	80063e8 <HAL_GetTick>
 8007c14:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c16:	e008      	b.n	8007c2a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c18:	f7fe fbe6 	bl	80063e8 <HAL_GetTick>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	2b64      	cmp	r3, #100	@ 0x64
 8007c24:	d901      	bls.n	8007c2a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e1a2      	b.n	8007f70 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c2a:	4b12      	ldr	r3, [pc, #72]	@ (8007c74 <HAL_RCC_OscConfig+0x4a8>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d0f0      	beq.n	8007c18 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d106      	bne.n	8007c4c <HAL_RCC_OscConfig+0x480>
 8007c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c42:	4a0b      	ldr	r2, [pc, #44]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007c44:	f043 0301 	orr.w	r3, r3, #1
 8007c48:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c4a:	e032      	b.n	8007cb2 <HAL_RCC_OscConfig+0x4e6>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d111      	bne.n	8007c78 <HAL_RCC_OscConfig+0x4ac>
 8007c54:	4b06      	ldr	r3, [pc, #24]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c58:	4a05      	ldr	r2, [pc, #20]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007c5a:	f023 0301 	bic.w	r3, r3, #1
 8007c5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c60:	4b03      	ldr	r3, [pc, #12]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007c62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c64:	4a02      	ldr	r2, [pc, #8]	@ (8007c70 <HAL_RCC_OscConfig+0x4a4>)
 8007c66:	f023 0304 	bic.w	r3, r3, #4
 8007c6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c6c:	e021      	b.n	8007cb2 <HAL_RCC_OscConfig+0x4e6>
 8007c6e:	bf00      	nop
 8007c70:	58024400 	.word	0x58024400
 8007c74:	58024800 	.word	0x58024800
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	2b05      	cmp	r3, #5
 8007c7e:	d10c      	bne.n	8007c9a <HAL_RCC_OscConfig+0x4ce>
 8007c80:	4b83      	ldr	r3, [pc, #524]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c84:	4a82      	ldr	r2, [pc, #520]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007c86:	f043 0304 	orr.w	r3, r3, #4
 8007c8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c8c:	4b80      	ldr	r3, [pc, #512]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c90:	4a7f      	ldr	r2, [pc, #508]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007c92:	f043 0301 	orr.w	r3, r3, #1
 8007c96:	6713      	str	r3, [r2, #112]	@ 0x70
 8007c98:	e00b      	b.n	8007cb2 <HAL_RCC_OscConfig+0x4e6>
 8007c9a:	4b7d      	ldr	r3, [pc, #500]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c9e:	4a7c      	ldr	r2, [pc, #496]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007ca0:	f023 0301 	bic.w	r3, r3, #1
 8007ca4:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ca6:	4b7a      	ldr	r3, [pc, #488]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007caa:	4a79      	ldr	r2, [pc, #484]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007cac:	f023 0304 	bic.w	r3, r3, #4
 8007cb0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d015      	beq.n	8007ce6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cba:	f7fe fb95 	bl	80063e8 <HAL_GetTick>
 8007cbe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cc0:	e00a      	b.n	8007cd8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cc2:	f7fe fb91 	bl	80063e8 <HAL_GetTick>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cca:	1ad3      	subs	r3, r2, r3
 8007ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d901      	bls.n	8007cd8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8007cd4:	2303      	movs	r3, #3
 8007cd6:	e14b      	b.n	8007f70 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cd8:	4b6d      	ldr	r3, [pc, #436]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cdc:	f003 0302 	and.w	r3, r3, #2
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d0ee      	beq.n	8007cc2 <HAL_RCC_OscConfig+0x4f6>
 8007ce4:	e014      	b.n	8007d10 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ce6:	f7fe fb7f 	bl	80063e8 <HAL_GetTick>
 8007cea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007cec:	e00a      	b.n	8007d04 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cee:	f7fe fb7b 	bl	80063e8 <HAL_GetTick>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf6:	1ad3      	subs	r3, r2, r3
 8007cf8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d901      	bls.n	8007d04 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007d00:	2303      	movs	r3, #3
 8007d02:	e135      	b.n	8007f70 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007d04:	4b62      	ldr	r3, [pc, #392]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007d06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d08:	f003 0302 	and.w	r3, r3, #2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d1ee      	bne.n	8007cee <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	f000 812a 	beq.w	8007f6e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007d1a:	4b5d      	ldr	r3, [pc, #372]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d22:	2b18      	cmp	r3, #24
 8007d24:	f000 80ba 	beq.w	8007e9c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	f040 8095 	bne.w	8007e5c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d32:	4b57      	ldr	r3, [pc, #348]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a56      	ldr	r2, [pc, #344]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007d38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d3e:	f7fe fb53 	bl	80063e8 <HAL_GetTick>
 8007d42:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d44:	e008      	b.n	8007d58 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d46:	f7fe fb4f 	bl	80063e8 <HAL_GetTick>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d901      	bls.n	8007d58 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e10b      	b.n	8007f70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007d58:	4b4d      	ldr	r3, [pc, #308]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1f0      	bne.n	8007d46 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d64:	4b4a      	ldr	r3, [pc, #296]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007d66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007d68:	4b4a      	ldr	r3, [pc, #296]	@ (8007e94 <HAL_RCC_OscConfig+0x6c8>)
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007d74:	0112      	lsls	r2, r2, #4
 8007d76:	430a      	orrs	r2, r1
 8007d78:	4945      	ldr	r1, [pc, #276]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	628b      	str	r3, [r1, #40]	@ 0x28
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d82:	3b01      	subs	r3, #1
 8007d84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d8c:	3b01      	subs	r3, #1
 8007d8e:	025b      	lsls	r3, r3, #9
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	431a      	orrs	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	041b      	lsls	r3, r3, #16
 8007d9c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007da0:	431a      	orrs	r2, r3
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007da6:	3b01      	subs	r3, #1
 8007da8:	061b      	lsls	r3, r3, #24
 8007daa:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007dae:	4938      	ldr	r1, [pc, #224]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007db0:	4313      	orrs	r3, r2
 8007db2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007db4:	4b36      	ldr	r3, [pc, #216]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007db8:	4a35      	ldr	r2, [pc, #212]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007dba:	f023 0301 	bic.w	r3, r3, #1
 8007dbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007dc0:	4b33      	ldr	r3, [pc, #204]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007dc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007dc4:	4b34      	ldr	r3, [pc, #208]	@ (8007e98 <HAL_RCC_OscConfig+0x6cc>)
 8007dc6:	4013      	ands	r3, r2
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007dcc:	00d2      	lsls	r2, r2, #3
 8007dce:	4930      	ldr	r1, [pc, #192]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007dd4:	4b2e      	ldr	r3, [pc, #184]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd8:	f023 020c 	bic.w	r2, r3, #12
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007de0:	492b      	ldr	r1, [pc, #172]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007de6:	4b2a      	ldr	r3, [pc, #168]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dea:	f023 0202 	bic.w	r2, r3, #2
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007df2:	4927      	ldr	r1, [pc, #156]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007df4:	4313      	orrs	r3, r2
 8007df6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007df8:	4b25      	ldr	r3, [pc, #148]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dfc:	4a24      	ldr	r2, [pc, #144]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007dfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e02:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e04:	4b22      	ldr	r3, [pc, #136]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e08:	4a21      	ldr	r2, [pc, #132]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007e0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007e10:	4b1f      	ldr	r3, [pc, #124]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e14:	4a1e      	ldr	r2, [pc, #120]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007e16:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007e1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e20:	4a1b      	ldr	r2, [pc, #108]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007e22:	f043 0301 	orr.w	r3, r3, #1
 8007e26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e28:	4b19      	ldr	r3, [pc, #100]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a18      	ldr	r2, [pc, #96]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007e2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e34:	f7fe fad8 	bl	80063e8 <HAL_GetTick>
 8007e38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e3a:	e008      	b.n	8007e4e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e3c:	f7fe fad4 	bl	80063e8 <HAL_GetTick>
 8007e40:	4602      	mov	r2, r0
 8007e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d901      	bls.n	8007e4e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e090      	b.n	8007f70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e4e:	4b10      	ldr	r3, [pc, #64]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d0f0      	beq.n	8007e3c <HAL_RCC_OscConfig+0x670>
 8007e5a:	e088      	b.n	8007f6e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a0b      	ldr	r2, [pc, #44]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007e62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e68:	f7fe fabe 	bl	80063e8 <HAL_GetTick>
 8007e6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e6e:	e008      	b.n	8007e82 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e70:	f7fe faba 	bl	80063e8 <HAL_GetTick>
 8007e74:	4602      	mov	r2, r0
 8007e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	d901      	bls.n	8007e82 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8007e7e:	2303      	movs	r3, #3
 8007e80:	e076      	b.n	8007f70 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e82:	4b03      	ldr	r3, [pc, #12]	@ (8007e90 <HAL_RCC_OscConfig+0x6c4>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1f0      	bne.n	8007e70 <HAL_RCC_OscConfig+0x6a4>
 8007e8e:	e06e      	b.n	8007f6e <HAL_RCC_OscConfig+0x7a2>
 8007e90:	58024400 	.word	0x58024400
 8007e94:	fffffc0c 	.word	0xfffffc0c
 8007e98:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007e9c:	4b36      	ldr	r3, [pc, #216]	@ (8007f78 <HAL_RCC_OscConfig+0x7ac>)
 8007e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007ea2:	4b35      	ldr	r3, [pc, #212]	@ (8007f78 <HAL_RCC_OscConfig+0x7ac>)
 8007ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ea6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d031      	beq.n	8007f14 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	f003 0203 	and.w	r2, r3, #3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d12a      	bne.n	8007f14 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ebe:	693b      	ldr	r3, [r7, #16]
 8007ec0:	091b      	lsrs	r3, r3, #4
 8007ec2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d122      	bne.n	8007f14 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ed8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007eda:	429a      	cmp	r2, r3
 8007edc:	d11a      	bne.n	8007f14 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	0a5b      	lsrs	r3, r3, #9
 8007ee2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eea:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007eec:	429a      	cmp	r2, r3
 8007eee:	d111      	bne.n	8007f14 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	0c1b      	lsrs	r3, r3, #16
 8007ef4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007efc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d108      	bne.n	8007f14 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	0e1b      	lsrs	r3, r3, #24
 8007f06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f0e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d001      	beq.n	8007f18 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
 8007f16:	e02b      	b.n	8007f70 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8007f18:	4b17      	ldr	r3, [pc, #92]	@ (8007f78 <HAL_RCC_OscConfig+0x7ac>)
 8007f1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007f1c:	08db      	lsrs	r3, r3, #3
 8007f1e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007f22:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007f28:	693a      	ldr	r2, [r7, #16]
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d01f      	beq.n	8007f6e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8007f2e:	4b12      	ldr	r3, [pc, #72]	@ (8007f78 <HAL_RCC_OscConfig+0x7ac>)
 8007f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f32:	4a11      	ldr	r2, [pc, #68]	@ (8007f78 <HAL_RCC_OscConfig+0x7ac>)
 8007f34:	f023 0301 	bic.w	r3, r3, #1
 8007f38:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007f3a:	f7fe fa55 	bl	80063e8 <HAL_GetTick>
 8007f3e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8007f40:	bf00      	nop
 8007f42:	f7fe fa51 	bl	80063e8 <HAL_GetTick>
 8007f46:	4602      	mov	r2, r0
 8007f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d0f9      	beq.n	8007f42 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8007f78 <HAL_RCC_OscConfig+0x7ac>)
 8007f50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f52:	4b0a      	ldr	r3, [pc, #40]	@ (8007f7c <HAL_RCC_OscConfig+0x7b0>)
 8007f54:	4013      	ands	r3, r2
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007f5a:	00d2      	lsls	r2, r2, #3
 8007f5c:	4906      	ldr	r1, [pc, #24]	@ (8007f78 <HAL_RCC_OscConfig+0x7ac>)
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007f62:	4b05      	ldr	r3, [pc, #20]	@ (8007f78 <HAL_RCC_OscConfig+0x7ac>)
 8007f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f66:	4a04      	ldr	r2, [pc, #16]	@ (8007f78 <HAL_RCC_OscConfig+0x7ac>)
 8007f68:	f043 0301 	orr.w	r3, r3, #1
 8007f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007f6e:	2300      	movs	r3, #0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3730      	adds	r7, #48	@ 0x30
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	58024400 	.word	0x58024400
 8007f7c:	ffff0007 	.word	0xffff0007

08007f80 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b086      	sub	sp, #24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e19c      	b.n	80082ce <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f94:	4b8a      	ldr	r3, [pc, #552]	@ (80081c0 <HAL_RCC_ClockConfig+0x240>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 030f 	and.w	r3, r3, #15
 8007f9c:	683a      	ldr	r2, [r7, #0]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d910      	bls.n	8007fc4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fa2:	4b87      	ldr	r3, [pc, #540]	@ (80081c0 <HAL_RCC_ClockConfig+0x240>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f023 020f 	bic.w	r2, r3, #15
 8007faa:	4985      	ldr	r1, [pc, #532]	@ (80081c0 <HAL_RCC_ClockConfig+0x240>)
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fb2:	4b83      	ldr	r3, [pc, #524]	@ (80081c0 <HAL_RCC_ClockConfig+0x240>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 030f 	and.w	r3, r3, #15
 8007fba:	683a      	ldr	r2, [r7, #0]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d001      	beq.n	8007fc4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e184      	b.n	80082ce <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0304 	and.w	r3, r3, #4
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d010      	beq.n	8007ff2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	691a      	ldr	r2, [r3, #16]
 8007fd4:	4b7b      	ldr	r3, [pc, #492]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d908      	bls.n	8007ff2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007fe0:	4b78      	ldr	r3, [pc, #480]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	4975      	ldr	r1, [pc, #468]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 0308 	and.w	r3, r3, #8
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d010      	beq.n	8008020 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	695a      	ldr	r2, [r3, #20]
 8008002:	4b70      	ldr	r3, [pc, #448]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 8008004:	69db      	ldr	r3, [r3, #28]
 8008006:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800800a:	429a      	cmp	r2, r3
 800800c:	d908      	bls.n	8008020 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800800e:	4b6d      	ldr	r3, [pc, #436]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 8008010:	69db      	ldr	r3, [r3, #28]
 8008012:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	695b      	ldr	r3, [r3, #20]
 800801a:	496a      	ldr	r1, [pc, #424]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 800801c:	4313      	orrs	r3, r2
 800801e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0310 	and.w	r3, r3, #16
 8008028:	2b00      	cmp	r3, #0
 800802a:	d010      	beq.n	800804e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	699a      	ldr	r2, [r3, #24]
 8008030:	4b64      	ldr	r3, [pc, #400]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 8008032:	69db      	ldr	r3, [r3, #28]
 8008034:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008038:	429a      	cmp	r2, r3
 800803a:	d908      	bls.n	800804e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800803c:	4b61      	ldr	r3, [pc, #388]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 800803e:	69db      	ldr	r3, [r3, #28]
 8008040:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	699b      	ldr	r3, [r3, #24]
 8008048:	495e      	ldr	r1, [pc, #376]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 800804a:	4313      	orrs	r3, r2
 800804c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 0320 	and.w	r3, r3, #32
 8008056:	2b00      	cmp	r3, #0
 8008058:	d010      	beq.n	800807c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	69da      	ldr	r2, [r3, #28]
 800805e:	4b59      	ldr	r3, [pc, #356]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008066:	429a      	cmp	r2, r3
 8008068:	d908      	bls.n	800807c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800806a:	4b56      	ldr	r3, [pc, #344]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	69db      	ldr	r3, [r3, #28]
 8008076:	4953      	ldr	r1, [pc, #332]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 8008078:	4313      	orrs	r3, r2
 800807a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 0302 	and.w	r3, r3, #2
 8008084:	2b00      	cmp	r3, #0
 8008086:	d010      	beq.n	80080aa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	68da      	ldr	r2, [r3, #12]
 800808c:	4b4d      	ldr	r3, [pc, #308]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	f003 030f 	and.w	r3, r3, #15
 8008094:	429a      	cmp	r2, r3
 8008096:	d908      	bls.n	80080aa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008098:	4b4a      	ldr	r3, [pc, #296]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 800809a:	699b      	ldr	r3, [r3, #24]
 800809c:	f023 020f 	bic.w	r2, r3, #15
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	4947      	ldr	r1, [pc, #284]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 80080a6:	4313      	orrs	r3, r2
 80080a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0301 	and.w	r3, r3, #1
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d055      	beq.n	8008162 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80080b6:	4b43      	ldr	r3, [pc, #268]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 80080b8:	699b      	ldr	r3, [r3, #24]
 80080ba:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	4940      	ldr	r1, [pc, #256]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 80080c4:	4313      	orrs	r3, r2
 80080c6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	2b02      	cmp	r3, #2
 80080ce:	d107      	bne.n	80080e0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80080d0:	4b3c      	ldr	r3, [pc, #240]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d121      	bne.n	8008120 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e0f6      	b.n	80082ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	2b03      	cmp	r3, #3
 80080e6:	d107      	bne.n	80080f8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080e8:	4b36      	ldr	r3, [pc, #216]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d115      	bne.n	8008120 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80080f4:	2301      	movs	r3, #1
 80080f6:	e0ea      	b.n	80082ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d107      	bne.n	8008110 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008100:	4b30      	ldr	r3, [pc, #192]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008108:	2b00      	cmp	r3, #0
 800810a:	d109      	bne.n	8008120 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e0de      	b.n	80082ce <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008110:	4b2c      	ldr	r3, [pc, #176]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0304 	and.w	r3, r3, #4
 8008118:	2b00      	cmp	r3, #0
 800811a:	d101      	bne.n	8008120 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e0d6      	b.n	80082ce <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008120:	4b28      	ldr	r3, [pc, #160]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	f023 0207 	bic.w	r2, r3, #7
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	4925      	ldr	r1, [pc, #148]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 800812e:	4313      	orrs	r3, r2
 8008130:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008132:	f7fe f959 	bl	80063e8 <HAL_GetTick>
 8008136:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008138:	e00a      	b.n	8008150 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800813a:	f7fe f955 	bl	80063e8 <HAL_GetTick>
 800813e:	4602      	mov	r2, r0
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	1ad3      	subs	r3, r2, r3
 8008144:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008148:	4293      	cmp	r3, r2
 800814a:	d901      	bls.n	8008150 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800814c:	2303      	movs	r3, #3
 800814e:	e0be      	b.n	80082ce <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008150:	4b1c      	ldr	r3, [pc, #112]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 8008152:	691b      	ldr	r3, [r3, #16]
 8008154:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	00db      	lsls	r3, r3, #3
 800815e:	429a      	cmp	r2, r3
 8008160:	d1eb      	bne.n	800813a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 0302 	and.w	r3, r3, #2
 800816a:	2b00      	cmp	r3, #0
 800816c:	d010      	beq.n	8008190 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	4b14      	ldr	r3, [pc, #80]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 8008174:	699b      	ldr	r3, [r3, #24]
 8008176:	f003 030f 	and.w	r3, r3, #15
 800817a:	429a      	cmp	r2, r3
 800817c:	d208      	bcs.n	8008190 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800817e:	4b11      	ldr	r3, [pc, #68]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	f023 020f 	bic.w	r2, r3, #15
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	490e      	ldr	r1, [pc, #56]	@ (80081c4 <HAL_RCC_ClockConfig+0x244>)
 800818c:	4313      	orrs	r3, r2
 800818e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008190:	4b0b      	ldr	r3, [pc, #44]	@ (80081c0 <HAL_RCC_ClockConfig+0x240>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 030f 	and.w	r3, r3, #15
 8008198:	683a      	ldr	r2, [r7, #0]
 800819a:	429a      	cmp	r2, r3
 800819c:	d214      	bcs.n	80081c8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800819e:	4b08      	ldr	r3, [pc, #32]	@ (80081c0 <HAL_RCC_ClockConfig+0x240>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f023 020f 	bic.w	r2, r3, #15
 80081a6:	4906      	ldr	r1, [pc, #24]	@ (80081c0 <HAL_RCC_ClockConfig+0x240>)
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081ae:	4b04      	ldr	r3, [pc, #16]	@ (80081c0 <HAL_RCC_ClockConfig+0x240>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 030f 	and.w	r3, r3, #15
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d005      	beq.n	80081c8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e086      	b.n	80082ce <HAL_RCC_ClockConfig+0x34e>
 80081c0:	52002000 	.word	0x52002000
 80081c4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 0304 	and.w	r3, r3, #4
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d010      	beq.n	80081f6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	691a      	ldr	r2, [r3, #16]
 80081d8:	4b3f      	ldr	r3, [pc, #252]	@ (80082d8 <HAL_RCC_ClockConfig+0x358>)
 80081da:	699b      	ldr	r3, [r3, #24]
 80081dc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d208      	bcs.n	80081f6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80081e4:	4b3c      	ldr	r3, [pc, #240]	@ (80082d8 <HAL_RCC_ClockConfig+0x358>)
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	4939      	ldr	r1, [pc, #228]	@ (80082d8 <HAL_RCC_ClockConfig+0x358>)
 80081f2:	4313      	orrs	r3, r2
 80081f4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0308 	and.w	r3, r3, #8
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d010      	beq.n	8008224 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	695a      	ldr	r2, [r3, #20]
 8008206:	4b34      	ldr	r3, [pc, #208]	@ (80082d8 <HAL_RCC_ClockConfig+0x358>)
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800820e:	429a      	cmp	r2, r3
 8008210:	d208      	bcs.n	8008224 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008212:	4b31      	ldr	r3, [pc, #196]	@ (80082d8 <HAL_RCC_ClockConfig+0x358>)
 8008214:	69db      	ldr	r3, [r3, #28]
 8008216:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	492e      	ldr	r1, [pc, #184]	@ (80082d8 <HAL_RCC_ClockConfig+0x358>)
 8008220:	4313      	orrs	r3, r2
 8008222:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f003 0310 	and.w	r3, r3, #16
 800822c:	2b00      	cmp	r3, #0
 800822e:	d010      	beq.n	8008252 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	699a      	ldr	r2, [r3, #24]
 8008234:	4b28      	ldr	r3, [pc, #160]	@ (80082d8 <HAL_RCC_ClockConfig+0x358>)
 8008236:	69db      	ldr	r3, [r3, #28]
 8008238:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800823c:	429a      	cmp	r2, r3
 800823e:	d208      	bcs.n	8008252 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008240:	4b25      	ldr	r3, [pc, #148]	@ (80082d8 <HAL_RCC_ClockConfig+0x358>)
 8008242:	69db      	ldr	r3, [r3, #28]
 8008244:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	4922      	ldr	r1, [pc, #136]	@ (80082d8 <HAL_RCC_ClockConfig+0x358>)
 800824e:	4313      	orrs	r3, r2
 8008250:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 0320 	and.w	r3, r3, #32
 800825a:	2b00      	cmp	r3, #0
 800825c:	d010      	beq.n	8008280 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	69da      	ldr	r2, [r3, #28]
 8008262:	4b1d      	ldr	r3, [pc, #116]	@ (80082d8 <HAL_RCC_ClockConfig+0x358>)
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800826a:	429a      	cmp	r2, r3
 800826c:	d208      	bcs.n	8008280 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800826e:	4b1a      	ldr	r3, [pc, #104]	@ (80082d8 <HAL_RCC_ClockConfig+0x358>)
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	69db      	ldr	r3, [r3, #28]
 800827a:	4917      	ldr	r1, [pc, #92]	@ (80082d8 <HAL_RCC_ClockConfig+0x358>)
 800827c:	4313      	orrs	r3, r2
 800827e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008280:	f000 f834 	bl	80082ec <HAL_RCC_GetSysClockFreq>
 8008284:	4602      	mov	r2, r0
 8008286:	4b14      	ldr	r3, [pc, #80]	@ (80082d8 <HAL_RCC_ClockConfig+0x358>)
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	0a1b      	lsrs	r3, r3, #8
 800828c:	f003 030f 	and.w	r3, r3, #15
 8008290:	4912      	ldr	r1, [pc, #72]	@ (80082dc <HAL_RCC_ClockConfig+0x35c>)
 8008292:	5ccb      	ldrb	r3, [r1, r3]
 8008294:	f003 031f 	and.w	r3, r3, #31
 8008298:	fa22 f303 	lsr.w	r3, r2, r3
 800829c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800829e:	4b0e      	ldr	r3, [pc, #56]	@ (80082d8 <HAL_RCC_ClockConfig+0x358>)
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	f003 030f 	and.w	r3, r3, #15
 80082a6:	4a0d      	ldr	r2, [pc, #52]	@ (80082dc <HAL_RCC_ClockConfig+0x35c>)
 80082a8:	5cd3      	ldrb	r3, [r2, r3]
 80082aa:	f003 031f 	and.w	r3, r3, #31
 80082ae:	693a      	ldr	r2, [r7, #16]
 80082b0:	fa22 f303 	lsr.w	r3, r2, r3
 80082b4:	4a0a      	ldr	r2, [pc, #40]	@ (80082e0 <HAL_RCC_ClockConfig+0x360>)
 80082b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80082b8:	4a0a      	ldr	r2, [pc, #40]	@ (80082e4 <HAL_RCC_ClockConfig+0x364>)
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80082be:	4b0a      	ldr	r3, [pc, #40]	@ (80082e8 <HAL_RCC_ClockConfig+0x368>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fe f846 	bl	8006354 <HAL_InitTick>
 80082c8:	4603      	mov	r3, r0
 80082ca:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3718      	adds	r7, #24
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	58024400 	.word	0x58024400
 80082dc:	0800d900 	.word	0x0800d900
 80082e0:	2400000c 	.word	0x2400000c
 80082e4:	24000008 	.word	0x24000008
 80082e8:	24000010 	.word	0x24000010

080082ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b089      	sub	sp, #36	@ 0x24
 80082f0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80082f2:	4bb3      	ldr	r3, [pc, #716]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082fa:	2b18      	cmp	r3, #24
 80082fc:	f200 8155 	bhi.w	80085aa <HAL_RCC_GetSysClockFreq+0x2be>
 8008300:	a201      	add	r2, pc, #4	@ (adr r2, 8008308 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008306:	bf00      	nop
 8008308:	0800836d 	.word	0x0800836d
 800830c:	080085ab 	.word	0x080085ab
 8008310:	080085ab 	.word	0x080085ab
 8008314:	080085ab 	.word	0x080085ab
 8008318:	080085ab 	.word	0x080085ab
 800831c:	080085ab 	.word	0x080085ab
 8008320:	080085ab 	.word	0x080085ab
 8008324:	080085ab 	.word	0x080085ab
 8008328:	08008393 	.word	0x08008393
 800832c:	080085ab 	.word	0x080085ab
 8008330:	080085ab 	.word	0x080085ab
 8008334:	080085ab 	.word	0x080085ab
 8008338:	080085ab 	.word	0x080085ab
 800833c:	080085ab 	.word	0x080085ab
 8008340:	080085ab 	.word	0x080085ab
 8008344:	080085ab 	.word	0x080085ab
 8008348:	08008399 	.word	0x08008399
 800834c:	080085ab 	.word	0x080085ab
 8008350:	080085ab 	.word	0x080085ab
 8008354:	080085ab 	.word	0x080085ab
 8008358:	080085ab 	.word	0x080085ab
 800835c:	080085ab 	.word	0x080085ab
 8008360:	080085ab 	.word	0x080085ab
 8008364:	080085ab 	.word	0x080085ab
 8008368:	0800839f 	.word	0x0800839f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800836c:	4b94      	ldr	r3, [pc, #592]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0320 	and.w	r3, r3, #32
 8008374:	2b00      	cmp	r3, #0
 8008376:	d009      	beq.n	800838c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008378:	4b91      	ldr	r3, [pc, #580]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	08db      	lsrs	r3, r3, #3
 800837e:	f003 0303 	and.w	r3, r3, #3
 8008382:	4a90      	ldr	r2, [pc, #576]	@ (80085c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008384:	fa22 f303 	lsr.w	r3, r2, r3
 8008388:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800838a:	e111      	b.n	80085b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800838c:	4b8d      	ldr	r3, [pc, #564]	@ (80085c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800838e:	61bb      	str	r3, [r7, #24]
      break;
 8008390:	e10e      	b.n	80085b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008392:	4b8d      	ldr	r3, [pc, #564]	@ (80085c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008394:	61bb      	str	r3, [r7, #24]
      break;
 8008396:	e10b      	b.n	80085b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008398:	4b8c      	ldr	r3, [pc, #560]	@ (80085cc <HAL_RCC_GetSysClockFreq+0x2e0>)
 800839a:	61bb      	str	r3, [r7, #24]
      break;
 800839c:	e108      	b.n	80085b0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800839e:	4b88      	ldr	r3, [pc, #544]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a2:	f003 0303 	and.w	r3, r3, #3
 80083a6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80083a8:	4b85      	ldr	r3, [pc, #532]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ac:	091b      	lsrs	r3, r3, #4
 80083ae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083b2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80083b4:	4b82      	ldr	r3, [pc, #520]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083b8:	f003 0301 	and.w	r3, r3, #1
 80083bc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80083be:	4b80      	ldr	r3, [pc, #512]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083c2:	08db      	lsrs	r3, r3, #3
 80083c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083c8:	68fa      	ldr	r2, [r7, #12]
 80083ca:	fb02 f303 	mul.w	r3, r2, r3
 80083ce:	ee07 3a90 	vmov	s15, r3
 80083d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083d6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 80e1 	beq.w	80085a4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	2b02      	cmp	r3, #2
 80083e6:	f000 8083 	beq.w	80084f0 <HAL_RCC_GetSysClockFreq+0x204>
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	f200 80a1 	bhi.w	8008534 <HAL_RCC_GetSysClockFreq+0x248>
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d003      	beq.n	8008400 <HAL_RCC_GetSysClockFreq+0x114>
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d056      	beq.n	80084ac <HAL_RCC_GetSysClockFreq+0x1c0>
 80083fe:	e099      	b.n	8008534 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008400:	4b6f      	ldr	r3, [pc, #444]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	f003 0320 	and.w	r3, r3, #32
 8008408:	2b00      	cmp	r3, #0
 800840a:	d02d      	beq.n	8008468 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800840c:	4b6c      	ldr	r3, [pc, #432]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	08db      	lsrs	r3, r3, #3
 8008412:	f003 0303 	and.w	r3, r3, #3
 8008416:	4a6b      	ldr	r2, [pc, #428]	@ (80085c4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008418:	fa22 f303 	lsr.w	r3, r2, r3
 800841c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	ee07 3a90 	vmov	s15, r3
 8008424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	ee07 3a90 	vmov	s15, r3
 800842e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008436:	4b62      	ldr	r3, [pc, #392]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800843a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800843e:	ee07 3a90 	vmov	s15, r3
 8008442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008446:	ed97 6a02 	vldr	s12, [r7, #8]
 800844a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80085d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800844e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800845a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800845e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008462:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008466:	e087      	b.n	8008578 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	ee07 3a90 	vmov	s15, r3
 800846e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008472:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80085d4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800847a:	4b51      	ldr	r3, [pc, #324]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800847c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800847e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008482:	ee07 3a90 	vmov	s15, r3
 8008486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800848a:	ed97 6a02 	vldr	s12, [r7, #8]
 800848e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80085d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800849a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800849e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80084aa:	e065      	b.n	8008578 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	ee07 3a90 	vmov	s15, r3
 80084b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80085d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80084ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084be:	4b40      	ldr	r3, [pc, #256]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c6:	ee07 3a90 	vmov	s15, r3
 80084ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80084d2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80085d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80084ee:	e043      	b.n	8008578 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	ee07 3a90 	vmov	s15, r3
 80084f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084fa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80085dc <HAL_RCC_GetSysClockFreq+0x2f0>
 80084fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008502:	4b2f      	ldr	r3, [pc, #188]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800850a:	ee07 3a90 	vmov	s15, r3
 800850e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008512:	ed97 6a02 	vldr	s12, [r7, #8]
 8008516:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80085d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800851a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800851e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800852a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800852e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008532:	e021      	b.n	8008578 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	ee07 3a90 	vmov	s15, r3
 800853a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800853e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80085d8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008546:	4b1e      	ldr	r3, [pc, #120]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800854a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800854e:	ee07 3a90 	vmov	s15, r3
 8008552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008556:	ed97 6a02 	vldr	s12, [r7, #8]
 800855a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80085d0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800855e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008566:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800856a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800856e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008572:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008576:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008578:	4b11      	ldr	r3, [pc, #68]	@ (80085c0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800857a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800857c:	0a5b      	lsrs	r3, r3, #9
 800857e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008582:	3301      	adds	r3, #1
 8008584:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	ee07 3a90 	vmov	s15, r3
 800858c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008590:	edd7 6a07 	vldr	s13, [r7, #28]
 8008594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800859c:	ee17 3a90 	vmov	r3, s15
 80085a0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80085a2:	e005      	b.n	80085b0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80085a4:	2300      	movs	r3, #0
 80085a6:	61bb      	str	r3, [r7, #24]
      break;
 80085a8:	e002      	b.n	80085b0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80085aa:	4b07      	ldr	r3, [pc, #28]	@ (80085c8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80085ac:	61bb      	str	r3, [r7, #24]
      break;
 80085ae:	bf00      	nop
  }

  return sysclockfreq;
 80085b0:	69bb      	ldr	r3, [r7, #24]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3724      	adds	r7, #36	@ 0x24
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop
 80085c0:	58024400 	.word	0x58024400
 80085c4:	03d09000 	.word	0x03d09000
 80085c8:	003d0900 	.word	0x003d0900
 80085cc:	007a1200 	.word	0x007a1200
 80085d0:	46000000 	.word	0x46000000
 80085d4:	4c742400 	.word	0x4c742400
 80085d8:	4a742400 	.word	0x4a742400
 80085dc:	4af42400 	.word	0x4af42400

080085e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085e4:	b0c6      	sub	sp, #280	@ 0x118
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80085ec:	2300      	movs	r3, #0
 80085ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80085f2:	2300      	movs	r3, #0
 80085f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80085f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008600:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008604:	2500      	movs	r5, #0
 8008606:	ea54 0305 	orrs.w	r3, r4, r5
 800860a:	d049      	beq.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800860c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008610:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008612:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008616:	d02f      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008618:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800861c:	d828      	bhi.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800861e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008622:	d01a      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008624:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008628:	d822      	bhi.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800862a:	2b00      	cmp	r3, #0
 800862c:	d003      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800862e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008632:	d007      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008634:	e01c      	b.n	8008670 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008636:	4bab      	ldr	r3, [pc, #684]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800863a:	4aaa      	ldr	r2, [pc, #680]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800863c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008640:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008642:	e01a      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008648:	3308      	adds	r3, #8
 800864a:	2102      	movs	r1, #2
 800864c:	4618      	mov	r0, r3
 800864e:	f001 f967 	bl	8009920 <RCCEx_PLL2_Config>
 8008652:	4603      	mov	r3, r0
 8008654:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008658:	e00f      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800865a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800865e:	3328      	adds	r3, #40	@ 0x28
 8008660:	2102      	movs	r1, #2
 8008662:	4618      	mov	r0, r3
 8008664:	f001 fa0e 	bl	8009a84 <RCCEx_PLL3_Config>
 8008668:	4603      	mov	r3, r0
 800866a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800866e:	e004      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008676:	e000      	b.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800867a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800867e:	2b00      	cmp	r3, #0
 8008680:	d10a      	bne.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008682:	4b98      	ldr	r3, [pc, #608]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008684:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008686:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800868a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800868e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008690:	4a94      	ldr	r2, [pc, #592]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008692:	430b      	orrs	r3, r1
 8008694:	6513      	str	r3, [r2, #80]	@ 0x50
 8008696:	e003      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008698:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800869c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80086a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80086ac:	f04f 0900 	mov.w	r9, #0
 80086b0:	ea58 0309 	orrs.w	r3, r8, r9
 80086b4:	d047      	beq.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80086b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086bc:	2b04      	cmp	r3, #4
 80086be:	d82a      	bhi.n	8008716 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80086c0:	a201      	add	r2, pc, #4	@ (adr r2, 80086c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80086c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086c6:	bf00      	nop
 80086c8:	080086dd 	.word	0x080086dd
 80086cc:	080086eb 	.word	0x080086eb
 80086d0:	08008701 	.word	0x08008701
 80086d4:	0800871f 	.word	0x0800871f
 80086d8:	0800871f 	.word	0x0800871f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086dc:	4b81      	ldr	r3, [pc, #516]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80086de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e0:	4a80      	ldr	r2, [pc, #512]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80086e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80086e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80086e8:	e01a      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80086ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80086ee:	3308      	adds	r3, #8
 80086f0:	2100      	movs	r1, #0
 80086f2:	4618      	mov	r0, r3
 80086f4:	f001 f914 	bl	8009920 <RCCEx_PLL2_Config>
 80086f8:	4603      	mov	r3, r0
 80086fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80086fe:	e00f      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008704:	3328      	adds	r3, #40	@ 0x28
 8008706:	2100      	movs	r1, #0
 8008708:	4618      	mov	r0, r3
 800870a:	f001 f9bb 	bl	8009a84 <RCCEx_PLL3_Config>
 800870e:	4603      	mov	r3, r0
 8008710:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008714:	e004      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008716:	2301      	movs	r3, #1
 8008718:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800871c:	e000      	b.n	8008720 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800871e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008720:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10a      	bne.n	800873e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008728:	4b6e      	ldr	r3, [pc, #440]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800872a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800872c:	f023 0107 	bic.w	r1, r3, #7
 8008730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008736:	4a6b      	ldr	r2, [pc, #428]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008738:	430b      	orrs	r3, r1
 800873a:	6513      	str	r3, [r2, #80]	@ 0x50
 800873c:	e003      	b.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800873e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008742:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008746:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800874a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800874e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8008752:	f04f 0b00 	mov.w	fp, #0
 8008756:	ea5a 030b 	orrs.w	r3, sl, fp
 800875a:	d05b      	beq.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800875c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008760:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008764:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8008768:	d03b      	beq.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800876a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800876e:	d834      	bhi.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008770:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008774:	d037      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008776:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800877a:	d82e      	bhi.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800877c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008780:	d033      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8008782:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008786:	d828      	bhi.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008788:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800878c:	d01a      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800878e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008792:	d822      	bhi.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8008794:	2b00      	cmp	r3, #0
 8008796:	d003      	beq.n	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8008798:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800879c:	d007      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800879e:	e01c      	b.n	80087da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087a0:	4b50      	ldr	r3, [pc, #320]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087a4:	4a4f      	ldr	r2, [pc, #316]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80087aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087ac:	e01e      	b.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80087ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087b2:	3308      	adds	r3, #8
 80087b4:	2100      	movs	r1, #0
 80087b6:	4618      	mov	r0, r3
 80087b8:	f001 f8b2 	bl	8009920 <RCCEx_PLL2_Config>
 80087bc:	4603      	mov	r3, r0
 80087be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80087c2:	e013      	b.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80087c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087c8:	3328      	adds	r3, #40	@ 0x28
 80087ca:	2100      	movs	r1, #0
 80087cc:	4618      	mov	r0, r3
 80087ce:	f001 f959 	bl	8009a84 <RCCEx_PLL3_Config>
 80087d2:	4603      	mov	r3, r0
 80087d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80087d8:	e008      	b.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80087e0:	e004      	b.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80087e2:	bf00      	nop
 80087e4:	e002      	b.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80087e6:	bf00      	nop
 80087e8:	e000      	b.n	80087ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80087ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80087ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d10b      	bne.n	800880c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80087f4:	4b3b      	ldr	r3, [pc, #236]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80087f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80087f8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80087fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008800:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008804:	4a37      	ldr	r2, [pc, #220]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8008806:	430b      	orrs	r3, r1
 8008808:	6593      	str	r3, [r2, #88]	@ 0x58
 800880a:	e003      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800880c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008810:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008814:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008820:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008824:	2300      	movs	r3, #0
 8008826:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800882a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800882e:	460b      	mov	r3, r1
 8008830:	4313      	orrs	r3, r2
 8008832:	d05d      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008838:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800883c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008840:	d03b      	beq.n	80088ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8008842:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8008846:	d834      	bhi.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008848:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800884c:	d037      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800884e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008852:	d82e      	bhi.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008854:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008858:	d033      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800885a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800885e:	d828      	bhi.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008860:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008864:	d01a      	beq.n	800889c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8008866:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800886a:	d822      	bhi.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800886c:	2b00      	cmp	r3, #0
 800886e:	d003      	beq.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008870:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008874:	d007      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008876:	e01c      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008878:	4b1a      	ldr	r3, [pc, #104]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800887a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800887c:	4a19      	ldr	r2, [pc, #100]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800887e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008882:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008884:	e01e      	b.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008886:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800888a:	3308      	adds	r3, #8
 800888c:	2100      	movs	r1, #0
 800888e:	4618      	mov	r0, r3
 8008890:	f001 f846 	bl	8009920 <RCCEx_PLL2_Config>
 8008894:	4603      	mov	r3, r0
 8008896:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800889a:	e013      	b.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800889c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088a0:	3328      	adds	r3, #40	@ 0x28
 80088a2:	2100      	movs	r1, #0
 80088a4:	4618      	mov	r0, r3
 80088a6:	f001 f8ed 	bl	8009a84 <RCCEx_PLL3_Config>
 80088aa:	4603      	mov	r3, r0
 80088ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80088b0:	e008      	b.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80088b8:	e004      	b.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80088ba:	bf00      	nop
 80088bc:	e002      	b.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80088be:	bf00      	nop
 80088c0:	e000      	b.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80088c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d10d      	bne.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80088cc:	4b05      	ldr	r3, [pc, #20]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088d0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80088d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80088dc:	4a01      	ldr	r2, [pc, #4]	@ (80088e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80088de:	430b      	orrs	r3, r1
 80088e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80088e2:	e005      	b.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80088e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80088ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80088f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80088f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80088fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008900:	2300      	movs	r3, #0
 8008902:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008906:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800890a:	460b      	mov	r3, r1
 800890c:	4313      	orrs	r3, r2
 800890e:	d03a      	beq.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8008910:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008916:	2b30      	cmp	r3, #48	@ 0x30
 8008918:	d01f      	beq.n	800895a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800891a:	2b30      	cmp	r3, #48	@ 0x30
 800891c:	d819      	bhi.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800891e:	2b20      	cmp	r3, #32
 8008920:	d00c      	beq.n	800893c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008922:	2b20      	cmp	r3, #32
 8008924:	d815      	bhi.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8008926:	2b00      	cmp	r3, #0
 8008928:	d019      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800892a:	2b10      	cmp	r3, #16
 800892c:	d111      	bne.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800892e:	4baa      	ldr	r3, [pc, #680]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008932:	4aa9      	ldr	r2, [pc, #676]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008934:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008938:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800893a:	e011      	b.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800893c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008940:	3308      	adds	r3, #8
 8008942:	2102      	movs	r1, #2
 8008944:	4618      	mov	r0, r3
 8008946:	f000 ffeb 	bl	8009920 <RCCEx_PLL2_Config>
 800894a:	4603      	mov	r3, r0
 800894c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8008950:	e006      	b.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008958:	e002      	b.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800895a:	bf00      	nop
 800895c:	e000      	b.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800895e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008960:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008964:	2b00      	cmp	r3, #0
 8008966:	d10a      	bne.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8008968:	4b9b      	ldr	r3, [pc, #620]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800896a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800896c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008970:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008976:	4a98      	ldr	r2, [pc, #608]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008978:	430b      	orrs	r3, r1
 800897a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800897c:	e003      	b.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800897e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008982:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800898a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008992:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008996:	2300      	movs	r3, #0
 8008998:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800899c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80089a0:	460b      	mov	r3, r1
 80089a2:	4313      	orrs	r3, r2
 80089a4:	d051      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80089a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80089ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089b0:	d035      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80089b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80089b6:	d82e      	bhi.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80089b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80089bc:	d031      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80089be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80089c2:	d828      	bhi.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80089c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089c8:	d01a      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80089ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80089ce:	d822      	bhi.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d003      	beq.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80089d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089d8:	d007      	beq.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80089da:	e01c      	b.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089dc:	4b7e      	ldr	r3, [pc, #504]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80089de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089e0:	4a7d      	ldr	r2, [pc, #500]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80089e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80089e8:	e01c      	b.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80089ee:	3308      	adds	r3, #8
 80089f0:	2100      	movs	r1, #0
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 ff94 	bl	8009920 <RCCEx_PLL2_Config>
 80089f8:	4603      	mov	r3, r0
 80089fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80089fe:	e011      	b.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a04:	3328      	adds	r3, #40	@ 0x28
 8008a06:	2100      	movs	r1, #0
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f001 f83b 	bl	8009a84 <RCCEx_PLL3_Config>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008a14:	e006      	b.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008a1c:	e002      	b.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008a1e:	bf00      	nop
 8008a20:	e000      	b.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8008a22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a24:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d10a      	bne.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008a2c:	4b6a      	ldr	r3, [pc, #424]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008a2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a30:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a3a:	4a67      	ldr	r2, [pc, #412]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008a3c:	430b      	orrs	r3, r1
 8008a3e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008a40:	e003      	b.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008a46:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a52:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008a56:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008a60:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008a64:	460b      	mov	r3, r1
 8008a66:	4313      	orrs	r3, r2
 8008a68:	d053      	beq.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008a70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a74:	d033      	beq.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8008a76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008a7a:	d82c      	bhi.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008a7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a80:	d02f      	beq.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8008a82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008a86:	d826      	bhi.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008a88:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008a8c:	d02b      	beq.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008a8e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008a92:	d820      	bhi.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008a94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a98:	d012      	beq.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8008a9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008a9e:	d81a      	bhi.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d022      	beq.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8008aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008aa8:	d115      	bne.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008aae:	3308      	adds	r3, #8
 8008ab0:	2101      	movs	r1, #1
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f000 ff34 	bl	8009920 <RCCEx_PLL2_Config>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008abe:	e015      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ac4:	3328      	adds	r3, #40	@ 0x28
 8008ac6:	2101      	movs	r1, #1
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f000 ffdb 	bl	8009a84 <RCCEx_PLL3_Config>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008ad4:	e00a      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008adc:	e006      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008ade:	bf00      	nop
 8008ae0:	e004      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008ae2:	bf00      	nop
 8008ae4:	e002      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008ae6:	bf00      	nop
 8008ae8:	e000      	b.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8008aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008aec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d10a      	bne.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008af4:	4b38      	ldr	r3, [pc, #224]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008af8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008b02:	4a35      	ldr	r2, [pc, #212]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008b04:	430b      	orrs	r3, r1
 8008b06:	6513      	str	r3, [r2, #80]	@ 0x50
 8008b08:	e003      	b.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008b0e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008b1e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008b22:	2300      	movs	r3, #0
 8008b24:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008b28:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	d058      	beq.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b3e:	d033      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8008b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008b44:	d82c      	bhi.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008b46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b4a:	d02f      	beq.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8008b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b50:	d826      	bhi.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008b52:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b56:	d02b      	beq.n	8008bb0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8008b58:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008b5c:	d820      	bhi.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008b5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b62:	d012      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8008b64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b68:	d81a      	bhi.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d022      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008b6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b72:	d115      	bne.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008b74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b78:	3308      	adds	r3, #8
 8008b7a:	2101      	movs	r1, #1
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f000 fecf 	bl	8009920 <RCCEx_PLL2_Config>
 8008b82:	4603      	mov	r3, r0
 8008b84:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008b88:	e015      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008b8e:	3328      	adds	r3, #40	@ 0x28
 8008b90:	2101      	movs	r1, #1
 8008b92:	4618      	mov	r0, r3
 8008b94:	f000 ff76 	bl	8009a84 <RCCEx_PLL3_Config>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008b9e:	e00a      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008ba6:	e006      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008ba8:	bf00      	nop
 8008baa:	e004      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008bac:	bf00      	nop
 8008bae:	e002      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008bb0:	bf00      	nop
 8008bb2:	e000      	b.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8008bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008bb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10e      	bne.n	8008bdc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008bbe:	4b06      	ldr	r3, [pc, #24]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008bc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bc2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008bca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008bce:	4a02      	ldr	r2, [pc, #8]	@ (8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8008bd0:	430b      	orrs	r3, r1
 8008bd2:	6593      	str	r3, [r2, #88]	@ 0x58
 8008bd4:	e006      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8008bd6:	bf00      	nop
 8008bd8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bdc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008be0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008bfa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008bfe:	460b      	mov	r3, r1
 8008c00:	4313      	orrs	r3, r2
 8008c02:	d037      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008c04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c0e:	d00e      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8008c10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008c14:	d816      	bhi.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d018      	beq.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008c1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c1e:	d111      	bne.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c20:	4bc4      	ldr	r3, [pc, #784]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c24:	4ac3      	ldr	r2, [pc, #780]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008c2c:	e00f      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c32:	3308      	adds	r3, #8
 8008c34:	2101      	movs	r1, #1
 8008c36:	4618      	mov	r0, r3
 8008c38:	f000 fe72 	bl	8009920 <RCCEx_PLL2_Config>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008c42:	e004      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c44:	2301      	movs	r3, #1
 8008c46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008c4a:	e000      	b.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8008c4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d10a      	bne.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008c56:	4bb7      	ldr	r3, [pc, #732]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c5a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008c5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c64:	4ab3      	ldr	r2, [pc, #716]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008c66:	430b      	orrs	r3, r1
 8008c68:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c6a:	e003      	b.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008c70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008c74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008c80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008c84:	2300      	movs	r3, #0
 8008c86:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008c8a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008c8e:	460b      	mov	r3, r1
 8008c90:	4313      	orrs	r3, r2
 8008c92:	d039      	beq.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008c98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d81c      	bhi.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8008c9e:	a201      	add	r2, pc, #4	@ (adr r2, 8008ca4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8008ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ca4:	08008ce1 	.word	0x08008ce1
 8008ca8:	08008cb5 	.word	0x08008cb5
 8008cac:	08008cc3 	.word	0x08008cc3
 8008cb0:	08008ce1 	.word	0x08008ce1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cb4:	4b9f      	ldr	r3, [pc, #636]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cb8:	4a9e      	ldr	r2, [pc, #632]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008cba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008cbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008cc0:	e00f      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008cc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cc6:	3308      	adds	r3, #8
 8008cc8:	2102      	movs	r1, #2
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 fe28 	bl	8009920 <RCCEx_PLL2_Config>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008cd6:	e004      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008cde:	e000      	b.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8008ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ce2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10a      	bne.n	8008d00 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008cea:	4b92      	ldr	r3, [pc, #584]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cee:	f023 0103 	bic.w	r1, r3, #3
 8008cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cf8:	4a8e      	ldr	r2, [pc, #568]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008cfa:	430b      	orrs	r3, r1
 8008cfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008cfe:	e003      	b.n	8008d08 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d10:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008d14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008d18:	2300      	movs	r3, #0
 8008d1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008d1e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008d22:	460b      	mov	r3, r1
 8008d24:	4313      	orrs	r3, r2
 8008d26:	f000 8099 	beq.w	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d2a:	4b83      	ldr	r3, [pc, #524]	@ (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a82      	ldr	r2, [pc, #520]	@ (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d36:	f7fd fb57 	bl	80063e8 <HAL_GetTick>
 8008d3a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d3e:	e00b      	b.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d40:	f7fd fb52 	bl	80063e8 <HAL_GetTick>
 8008d44:	4602      	mov	r2, r0
 8008d46:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008d4a:	1ad3      	subs	r3, r2, r3
 8008d4c:	2b64      	cmp	r3, #100	@ 0x64
 8008d4e:	d903      	bls.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008d56:	e005      	b.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d58:	4b77      	ldr	r3, [pc, #476]	@ (8008f38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d0ed      	beq.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8008d64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d173      	bne.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008d6c:	4b71      	ldr	r3, [pc, #452]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008d6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008d78:	4053      	eors	r3, r2
 8008d7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d015      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d82:	4b6c      	ldr	r3, [pc, #432]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d8a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008d8e:	4b69      	ldr	r3, [pc, #420]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d92:	4a68      	ldr	r2, [pc, #416]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d98:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008d9a:	4b66      	ldr	r3, [pc, #408]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008d9e:	4a65      	ldr	r2, [pc, #404]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008da0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008da4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008da6:	4a63      	ldr	r2, [pc, #396]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008da8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8008dac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008db2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008db6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008dba:	d118      	bne.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dbc:	f7fd fb14 	bl	80063e8 <HAL_GetTick>
 8008dc0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008dc4:	e00d      	b.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008dc6:	f7fd fb0f 	bl	80063e8 <HAL_GetTick>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8008dd0:	1ad2      	subs	r2, r2, r3
 8008dd2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d903      	bls.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8008dda:	2303      	movs	r3, #3
 8008ddc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8008de0:	e005      	b.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008de2:	4b54      	ldr	r3, [pc, #336]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008de6:	f003 0302 	and.w	r3, r3, #2
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d0eb      	beq.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8008dee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d129      	bne.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008dfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e06:	d10e      	bne.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8008e08:	4b4a      	ldr	r3, [pc, #296]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008e18:	091a      	lsrs	r2, r3, #4
 8008e1a:	4b48      	ldr	r3, [pc, #288]	@ (8008f3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8008e1c:	4013      	ands	r3, r2
 8008e1e:	4a45      	ldr	r2, [pc, #276]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e20:	430b      	orrs	r3, r1
 8008e22:	6113      	str	r3, [r2, #16]
 8008e24:	e005      	b.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8008e26:	4b43      	ldr	r3, [pc, #268]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	4a42      	ldr	r2, [pc, #264]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008e30:	6113      	str	r3, [r2, #16]
 8008e32:	4b40      	ldr	r3, [pc, #256]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e34:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8008e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008e3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e42:	4a3c      	ldr	r2, [pc, #240]	@ (8008f34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8008e44:	430b      	orrs	r3, r1
 8008e46:	6713      	str	r3, [r2, #112]	@ 0x70
 8008e48:	e008      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008e4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8008e52:	e003      	b.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008e58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e64:	f002 0301 	and.w	r3, r2, #1
 8008e68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008e72:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8008e76:	460b      	mov	r3, r1
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	f000 808f 	beq.w	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008e84:	2b28      	cmp	r3, #40	@ 0x28
 8008e86:	d871      	bhi.n	8008f6c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8008e88:	a201      	add	r2, pc, #4	@ (adr r2, 8008e90 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8008e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e8e:	bf00      	nop
 8008e90:	08008f75 	.word	0x08008f75
 8008e94:	08008f6d 	.word	0x08008f6d
 8008e98:	08008f6d 	.word	0x08008f6d
 8008e9c:	08008f6d 	.word	0x08008f6d
 8008ea0:	08008f6d 	.word	0x08008f6d
 8008ea4:	08008f6d 	.word	0x08008f6d
 8008ea8:	08008f6d 	.word	0x08008f6d
 8008eac:	08008f6d 	.word	0x08008f6d
 8008eb0:	08008f41 	.word	0x08008f41
 8008eb4:	08008f6d 	.word	0x08008f6d
 8008eb8:	08008f6d 	.word	0x08008f6d
 8008ebc:	08008f6d 	.word	0x08008f6d
 8008ec0:	08008f6d 	.word	0x08008f6d
 8008ec4:	08008f6d 	.word	0x08008f6d
 8008ec8:	08008f6d 	.word	0x08008f6d
 8008ecc:	08008f6d 	.word	0x08008f6d
 8008ed0:	08008f57 	.word	0x08008f57
 8008ed4:	08008f6d 	.word	0x08008f6d
 8008ed8:	08008f6d 	.word	0x08008f6d
 8008edc:	08008f6d 	.word	0x08008f6d
 8008ee0:	08008f6d 	.word	0x08008f6d
 8008ee4:	08008f6d 	.word	0x08008f6d
 8008ee8:	08008f6d 	.word	0x08008f6d
 8008eec:	08008f6d 	.word	0x08008f6d
 8008ef0:	08008f75 	.word	0x08008f75
 8008ef4:	08008f6d 	.word	0x08008f6d
 8008ef8:	08008f6d 	.word	0x08008f6d
 8008efc:	08008f6d 	.word	0x08008f6d
 8008f00:	08008f6d 	.word	0x08008f6d
 8008f04:	08008f6d 	.word	0x08008f6d
 8008f08:	08008f6d 	.word	0x08008f6d
 8008f0c:	08008f6d 	.word	0x08008f6d
 8008f10:	08008f75 	.word	0x08008f75
 8008f14:	08008f6d 	.word	0x08008f6d
 8008f18:	08008f6d 	.word	0x08008f6d
 8008f1c:	08008f6d 	.word	0x08008f6d
 8008f20:	08008f6d 	.word	0x08008f6d
 8008f24:	08008f6d 	.word	0x08008f6d
 8008f28:	08008f6d 	.word	0x08008f6d
 8008f2c:	08008f6d 	.word	0x08008f6d
 8008f30:	08008f75 	.word	0x08008f75
 8008f34:	58024400 	.word	0x58024400
 8008f38:	58024800 	.word	0x58024800
 8008f3c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f44:	3308      	adds	r3, #8
 8008f46:	2101      	movs	r1, #1
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f000 fce9 	bl	8009920 <RCCEx_PLL2_Config>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008f54:	e00f      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f5a:	3328      	adds	r3, #40	@ 0x28
 8008f5c:	2101      	movs	r1, #1
 8008f5e:	4618      	mov	r0, r3
 8008f60:	f000 fd90 	bl	8009a84 <RCCEx_PLL3_Config>
 8008f64:	4603      	mov	r3, r0
 8008f66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008f6a:	e004      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8008f72:	e000      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8008f74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d10a      	bne.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008f7e:	4bbf      	ldr	r3, [pc, #764]	@ (800927c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f82:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8008f86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008f8c:	4abb      	ldr	r2, [pc, #748]	@ (800927c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8008f8e:	430b      	orrs	r3, r1
 8008f90:	6553      	str	r3, [r2, #84]	@ 0x54
 8008f92:	e003      	b.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8008f98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa4:	f002 0302 	and.w	r3, r2, #2
 8008fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008fac:	2300      	movs	r3, #0
 8008fae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008fb2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	d041      	beq.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008fc2:	2b05      	cmp	r3, #5
 8008fc4:	d824      	bhi.n	8009010 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8008fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8008fcc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8008fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fcc:	08009019 	.word	0x08009019
 8008fd0:	08008fe5 	.word	0x08008fe5
 8008fd4:	08008ffb 	.word	0x08008ffb
 8008fd8:	08009019 	.word	0x08009019
 8008fdc:	08009019 	.word	0x08009019
 8008fe0:	08009019 	.word	0x08009019
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008fe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008fe8:	3308      	adds	r3, #8
 8008fea:	2101      	movs	r1, #1
 8008fec:	4618      	mov	r0, r3
 8008fee:	f000 fc97 	bl	8009920 <RCCEx_PLL2_Config>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008ff8:	e00f      	b.n	800901a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008ffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008ffe:	3328      	adds	r3, #40	@ 0x28
 8009000:	2101      	movs	r1, #1
 8009002:	4618      	mov	r0, r3
 8009004:	f000 fd3e 	bl	8009a84 <RCCEx_PLL3_Config>
 8009008:	4603      	mov	r3, r0
 800900a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800900e:	e004      	b.n	800901a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009016:	e000      	b.n	800901a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8009018:	bf00      	nop
    }

    if (ret == HAL_OK)
 800901a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800901e:	2b00      	cmp	r3, #0
 8009020:	d10a      	bne.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009022:	4b96      	ldr	r3, [pc, #600]	@ (800927c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009026:	f023 0107 	bic.w	r1, r3, #7
 800902a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800902e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009030:	4a92      	ldr	r2, [pc, #584]	@ (800927c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009032:	430b      	orrs	r3, r1
 8009034:	6553      	str	r3, [r2, #84]	@ 0x54
 8009036:	e003      	b.n	8009040 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009038:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800903c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009040:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009048:	f002 0304 	and.w	r3, r2, #4
 800904c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009050:	2300      	movs	r3, #0
 8009052:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009056:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800905a:	460b      	mov	r3, r1
 800905c:	4313      	orrs	r3, r2
 800905e:	d044      	beq.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009064:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009068:	2b05      	cmp	r3, #5
 800906a:	d825      	bhi.n	80090b8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800906c:	a201      	add	r2, pc, #4	@ (adr r2, 8009074 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800906e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009072:	bf00      	nop
 8009074:	080090c1 	.word	0x080090c1
 8009078:	0800908d 	.word	0x0800908d
 800907c:	080090a3 	.word	0x080090a3
 8009080:	080090c1 	.word	0x080090c1
 8009084:	080090c1 	.word	0x080090c1
 8009088:	080090c1 	.word	0x080090c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800908c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009090:	3308      	adds	r3, #8
 8009092:	2101      	movs	r1, #1
 8009094:	4618      	mov	r0, r3
 8009096:	f000 fc43 	bl	8009920 <RCCEx_PLL2_Config>
 800909a:	4603      	mov	r3, r0
 800909c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80090a0:	e00f      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090a6:	3328      	adds	r3, #40	@ 0x28
 80090a8:	2101      	movs	r1, #1
 80090aa:	4618      	mov	r0, r3
 80090ac:	f000 fcea 	bl	8009a84 <RCCEx_PLL3_Config>
 80090b0:	4603      	mov	r3, r0
 80090b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80090b6:	e004      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80090be:	e000      	b.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80090c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090c2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d10b      	bne.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80090ca:	4b6c      	ldr	r3, [pc, #432]	@ (800927c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80090cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090ce:	f023 0107 	bic.w	r1, r3, #7
 80090d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090da:	4a68      	ldr	r2, [pc, #416]	@ (800927c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80090dc:	430b      	orrs	r3, r1
 80090de:	6593      	str	r3, [r2, #88]	@ 0x58
 80090e0:	e003      	b.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090e2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80090e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80090ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80090ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f2:	f002 0320 	and.w	r3, r2, #32
 80090f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80090fa:	2300      	movs	r3, #0
 80090fc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009100:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009104:	460b      	mov	r3, r1
 8009106:	4313      	orrs	r3, r2
 8009108:	d055      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800910a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800910e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009112:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009116:	d033      	beq.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8009118:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800911c:	d82c      	bhi.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800911e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009122:	d02f      	beq.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8009124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009128:	d826      	bhi.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800912a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800912e:	d02b      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8009130:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009134:	d820      	bhi.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009136:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800913a:	d012      	beq.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800913c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009140:	d81a      	bhi.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8009142:	2b00      	cmp	r3, #0
 8009144:	d022      	beq.n	800918c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8009146:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800914a:	d115      	bne.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800914c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009150:	3308      	adds	r3, #8
 8009152:	2100      	movs	r1, #0
 8009154:	4618      	mov	r0, r3
 8009156:	f000 fbe3 	bl	8009920 <RCCEx_PLL2_Config>
 800915a:	4603      	mov	r3, r0
 800915c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009160:	e015      	b.n	800918e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009162:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009166:	3328      	adds	r3, #40	@ 0x28
 8009168:	2102      	movs	r1, #2
 800916a:	4618      	mov	r0, r3
 800916c:	f000 fc8a 	bl	8009a84 <RCCEx_PLL3_Config>
 8009170:	4603      	mov	r3, r0
 8009172:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009176:	e00a      	b.n	800918e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800917e:	e006      	b.n	800918e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009180:	bf00      	nop
 8009182:	e004      	b.n	800918e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009184:	bf00      	nop
 8009186:	e002      	b.n	800918e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8009188:	bf00      	nop
 800918a:	e000      	b.n	800918e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800918c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800918e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10b      	bne.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009196:	4b39      	ldr	r3, [pc, #228]	@ (800927c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009198:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800919a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800919e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80091a6:	4a35      	ldr	r2, [pc, #212]	@ (800927c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80091a8:	430b      	orrs	r3, r1
 80091aa:	6553      	str	r3, [r2, #84]	@ 0x54
 80091ac:	e003      	b.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80091b2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80091b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091be:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80091c2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80091c6:	2300      	movs	r3, #0
 80091c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80091cc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80091d0:	460b      	mov	r3, r1
 80091d2:	4313      	orrs	r3, r2
 80091d4:	d058      	beq.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80091d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80091da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80091de:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80091e2:	d033      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80091e4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80091e8:	d82c      	bhi.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80091ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091ee:	d02f      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80091f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80091f4:	d826      	bhi.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80091f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80091fa:	d02b      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80091fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009200:	d820      	bhi.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8009202:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009206:	d012      	beq.n	800922e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8009208:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800920c:	d81a      	bhi.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800920e:	2b00      	cmp	r3, #0
 8009210:	d022      	beq.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8009212:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009216:	d115      	bne.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800921c:	3308      	adds	r3, #8
 800921e:	2100      	movs	r1, #0
 8009220:	4618      	mov	r0, r3
 8009222:	f000 fb7d 	bl	8009920 <RCCEx_PLL2_Config>
 8009226:	4603      	mov	r3, r0
 8009228:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800922c:	e015      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800922e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009232:	3328      	adds	r3, #40	@ 0x28
 8009234:	2102      	movs	r1, #2
 8009236:	4618      	mov	r0, r3
 8009238:	f000 fc24 	bl	8009a84 <RCCEx_PLL3_Config>
 800923c:	4603      	mov	r3, r0
 800923e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009242:	e00a      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800924a:	e006      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800924c:	bf00      	nop
 800924e:	e004      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009250:	bf00      	nop
 8009252:	e002      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009254:	bf00      	nop
 8009256:	e000      	b.n	800925a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8009258:	bf00      	nop
    }

    if (ret == HAL_OK)
 800925a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800925e:	2b00      	cmp	r3, #0
 8009260:	d10e      	bne.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009262:	4b06      	ldr	r3, [pc, #24]	@ (800927c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009266:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800926a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800926e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009272:	4a02      	ldr	r2, [pc, #8]	@ (800927c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8009274:	430b      	orrs	r3, r1
 8009276:	6593      	str	r3, [r2, #88]	@ 0x58
 8009278:	e006      	b.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800927a:	bf00      	nop
 800927c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009280:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009284:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009288:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800928c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009290:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009294:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009298:	2300      	movs	r3, #0
 800929a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800929e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80092a2:	460b      	mov	r3, r1
 80092a4:	4313      	orrs	r3, r2
 80092a6:	d055      	beq.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80092a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80092b0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80092b4:	d033      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80092b6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80092ba:	d82c      	bhi.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80092bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092c0:	d02f      	beq.n	8009322 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80092c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80092c6:	d826      	bhi.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80092c8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80092cc:	d02b      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80092ce:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80092d2:	d820      	bhi.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80092d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092d8:	d012      	beq.n	8009300 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80092da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80092de:	d81a      	bhi.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d022      	beq.n	800932a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80092e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80092e8:	d115      	bne.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80092ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80092ee:	3308      	adds	r3, #8
 80092f0:	2100      	movs	r1, #0
 80092f2:	4618      	mov	r0, r3
 80092f4:	f000 fb14 	bl	8009920 <RCCEx_PLL2_Config>
 80092f8:	4603      	mov	r3, r0
 80092fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80092fe:	e015      	b.n	800932c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009304:	3328      	adds	r3, #40	@ 0x28
 8009306:	2102      	movs	r1, #2
 8009308:	4618      	mov	r0, r3
 800930a:	f000 fbbb 	bl	8009a84 <RCCEx_PLL3_Config>
 800930e:	4603      	mov	r3, r0
 8009310:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009314:	e00a      	b.n	800932c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800931c:	e006      	b.n	800932c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800931e:	bf00      	nop
 8009320:	e004      	b.n	800932c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009322:	bf00      	nop
 8009324:	e002      	b.n	800932c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8009326:	bf00      	nop
 8009328:	e000      	b.n	800932c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800932a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800932c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009330:	2b00      	cmp	r3, #0
 8009332:	d10b      	bne.n	800934c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009334:	4ba0      	ldr	r3, [pc, #640]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009338:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800933c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009340:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009344:	4a9c      	ldr	r2, [pc, #624]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009346:	430b      	orrs	r3, r1
 8009348:	6593      	str	r3, [r2, #88]	@ 0x58
 800934a:	e003      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800934c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009350:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8009354:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935c:	f002 0308 	and.w	r3, r2, #8
 8009360:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009364:	2300      	movs	r3, #0
 8009366:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800936a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800936e:	460b      	mov	r3, r1
 8009370:	4313      	orrs	r3, r2
 8009372:	d01e      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8009374:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800937c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009380:	d10c      	bne.n	800939c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009382:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009386:	3328      	adds	r3, #40	@ 0x28
 8009388:	2102      	movs	r1, #2
 800938a:	4618      	mov	r0, r3
 800938c:	f000 fb7a 	bl	8009a84 <RCCEx_PLL3_Config>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d002      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800939c:	4b86      	ldr	r3, [pc, #536]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800939e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093a0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80093a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093ac:	4a82      	ldr	r2, [pc, #520]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80093ae:	430b      	orrs	r3, r1
 80093b0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80093b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ba:	f002 0310 	and.w	r3, r2, #16
 80093be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80093c2:	2300      	movs	r3, #0
 80093c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80093c8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80093cc:	460b      	mov	r3, r1
 80093ce:	4313      	orrs	r3, r2
 80093d0:	d01e      	beq.n	8009410 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80093d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80093da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80093de:	d10c      	bne.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80093e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80093e4:	3328      	adds	r3, #40	@ 0x28
 80093e6:	2102      	movs	r1, #2
 80093e8:	4618      	mov	r0, r3
 80093ea:	f000 fb4b 	bl	8009a84 <RCCEx_PLL3_Config>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d002      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80093f4:	2301      	movs	r3, #1
 80093f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80093fa:	4b6f      	ldr	r3, [pc, #444]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80093fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009402:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009406:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800940a:	4a6b      	ldr	r2, [pc, #428]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800940c:	430b      	orrs	r3, r1
 800940e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009410:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009418:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800941c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800941e:	2300      	movs	r3, #0
 8009420:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009422:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009426:	460b      	mov	r3, r1
 8009428:	4313      	orrs	r3, r2
 800942a:	d03e      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800942c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009430:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009434:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009438:	d022      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800943a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800943e:	d81b      	bhi.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8009440:	2b00      	cmp	r3, #0
 8009442:	d003      	beq.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8009444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009448:	d00b      	beq.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800944a:	e015      	b.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800944c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009450:	3308      	adds	r3, #8
 8009452:	2100      	movs	r1, #0
 8009454:	4618      	mov	r0, r3
 8009456:	f000 fa63 	bl	8009920 <RCCEx_PLL2_Config>
 800945a:	4603      	mov	r3, r0
 800945c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009460:	e00f      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009462:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009466:	3328      	adds	r3, #40	@ 0x28
 8009468:	2102      	movs	r1, #2
 800946a:	4618      	mov	r0, r3
 800946c:	f000 fb0a 	bl	8009a84 <RCCEx_PLL3_Config>
 8009470:	4603      	mov	r3, r0
 8009472:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009476:	e004      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800947e:	e000      	b.n	8009482 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8009480:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009482:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009486:	2b00      	cmp	r3, #0
 8009488:	d10b      	bne.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800948a:	4b4b      	ldr	r3, [pc, #300]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800948c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800948e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009496:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800949a:	4a47      	ldr	r2, [pc, #284]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800949c:	430b      	orrs	r3, r1
 800949e:	6593      	str	r3, [r2, #88]	@ 0x58
 80094a0:	e003      	b.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80094a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80094aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80094b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80094b8:	2300      	movs	r3, #0
 80094ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80094bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80094c0:	460b      	mov	r3, r1
 80094c2:	4313      	orrs	r3, r2
 80094c4:	d03b      	beq.n	800953e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80094c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80094ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80094d2:	d01f      	beq.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80094d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80094d8:	d818      	bhi.n	800950c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80094da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80094de:	d003      	beq.n	80094e8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80094e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80094e4:	d007      	beq.n	80094f6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80094e6:	e011      	b.n	800950c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80094e8:	4b33      	ldr	r3, [pc, #204]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80094ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ec:	4a32      	ldr	r2, [pc, #200]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80094ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80094f4:	e00f      	b.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80094fa:	3328      	adds	r3, #40	@ 0x28
 80094fc:	2101      	movs	r1, #1
 80094fe:	4618      	mov	r0, r3
 8009500:	f000 fac0 	bl	8009a84 <RCCEx_PLL3_Config>
 8009504:	4603      	mov	r3, r0
 8009506:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800950a:	e004      	b.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009512:	e000      	b.n	8009516 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8009514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009516:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10b      	bne.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800951e:	4b26      	ldr	r3, [pc, #152]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009522:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800952a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800952e:	4a22      	ldr	r2, [pc, #136]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009530:	430b      	orrs	r3, r1
 8009532:	6553      	str	r3, [r2, #84]	@ 0x54
 8009534:	e003      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009536:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800953a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800953e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009546:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800954a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800954c:	2300      	movs	r3, #0
 800954e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009550:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009554:	460b      	mov	r3, r1
 8009556:	4313      	orrs	r3, r2
 8009558:	d034      	beq.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800955a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800955e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009560:	2b00      	cmp	r3, #0
 8009562:	d003      	beq.n	800956c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8009564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009568:	d007      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800956a:	e011      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800956c:	4b12      	ldr	r3, [pc, #72]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800956e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009570:	4a11      	ldr	r2, [pc, #68]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8009572:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009576:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009578:	e00e      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800957a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800957e:	3308      	adds	r3, #8
 8009580:	2102      	movs	r1, #2
 8009582:	4618      	mov	r0, r3
 8009584:	f000 f9cc 	bl	8009920 <RCCEx_PLL2_Config>
 8009588:	4603      	mov	r3, r0
 800958a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800958e:	e003      	b.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009596:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009598:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800959c:	2b00      	cmp	r3, #0
 800959e:	d10d      	bne.n	80095bc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80095a0:	4b05      	ldr	r3, [pc, #20]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80095a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80095a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095ae:	4a02      	ldr	r2, [pc, #8]	@ (80095b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80095b0:	430b      	orrs	r3, r1
 80095b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80095b4:	e006      	b.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80095b6:	bf00      	nop
 80095b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80095c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80095c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80095d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80095d2:	2300      	movs	r3, #0
 80095d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80095d6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80095da:	460b      	mov	r3, r1
 80095dc:	4313      	orrs	r3, r2
 80095de:	d00c      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80095e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095e4:	3328      	adds	r3, #40	@ 0x28
 80095e6:	2102      	movs	r1, #2
 80095e8:	4618      	mov	r0, r3
 80095ea:	f000 fa4b 	bl	8009a84 <RCCEx_PLL3_Config>
 80095ee:	4603      	mov	r3, r0
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d002      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80095fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80095fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009602:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009606:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009608:	2300      	movs	r3, #0
 800960a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800960c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009610:	460b      	mov	r3, r1
 8009612:	4313      	orrs	r3, r2
 8009614:	d036      	beq.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800961a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800961c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009620:	d018      	beq.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8009622:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009626:	d811      	bhi.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800962c:	d014      	beq.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800962e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009632:	d80b      	bhi.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8009634:	2b00      	cmp	r3, #0
 8009636:	d011      	beq.n	800965c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8009638:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800963c:	d106      	bne.n	800964c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800963e:	4bb7      	ldr	r3, [pc, #732]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009642:	4ab6      	ldr	r2, [pc, #728]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009644:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009648:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800964a:	e008      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800964c:	2301      	movs	r3, #1
 800964e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8009652:	e004      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009654:	bf00      	nop
 8009656:	e002      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8009658:	bf00      	nop
 800965a:	e000      	b.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800965c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800965e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009662:	2b00      	cmp	r3, #0
 8009664:	d10a      	bne.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009666:	4bad      	ldr	r3, [pc, #692]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009668:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800966a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800966e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009672:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009674:	4aa9      	ldr	r2, [pc, #676]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009676:	430b      	orrs	r3, r1
 8009678:	6553      	str	r3, [r2, #84]	@ 0x54
 800967a:	e003      	b.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800967c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009680:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009684:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009690:	653b      	str	r3, [r7, #80]	@ 0x50
 8009692:	2300      	movs	r3, #0
 8009694:	657b      	str	r3, [r7, #84]	@ 0x54
 8009696:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800969a:	460b      	mov	r3, r1
 800969c:	4313      	orrs	r3, r2
 800969e:	d009      	beq.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80096a0:	4b9e      	ldr	r3, [pc, #632]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80096a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096a4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80096a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80096ae:	4a9b      	ldr	r2, [pc, #620]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80096b0:	430b      	orrs	r3, r1
 80096b2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80096b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096bc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80096c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80096c2:	2300      	movs	r3, #0
 80096c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80096c6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80096ca:	460b      	mov	r3, r1
 80096cc:	4313      	orrs	r3, r2
 80096ce:	d009      	beq.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80096d0:	4b92      	ldr	r3, [pc, #584]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80096d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80096d4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80096d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80096de:	4a8f      	ldr	r2, [pc, #572]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80096e0:	430b      	orrs	r3, r1
 80096e2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80096e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80096e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ec:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80096f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80096f2:	2300      	movs	r3, #0
 80096f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80096f6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80096fa:	460b      	mov	r3, r1
 80096fc:	4313      	orrs	r3, r2
 80096fe:	d00e      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009700:	4b86      	ldr	r3, [pc, #536]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009702:	691b      	ldr	r3, [r3, #16]
 8009704:	4a85      	ldr	r2, [pc, #532]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8009706:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800970a:	6113      	str	r3, [r2, #16]
 800970c:	4b83      	ldr	r3, [pc, #524]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800970e:	6919      	ldr	r1, [r3, #16]
 8009710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009714:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009718:	4a80      	ldr	r2, [pc, #512]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800971a:	430b      	orrs	r3, r1
 800971c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800971e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009726:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800972a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800972c:	2300      	movs	r3, #0
 800972e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009730:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009734:	460b      	mov	r3, r1
 8009736:	4313      	orrs	r3, r2
 8009738:	d009      	beq.n	800974e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800973a:	4b78      	ldr	r3, [pc, #480]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800973c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800973e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009742:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009748:	4a74      	ldr	r2, [pc, #464]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800974a:	430b      	orrs	r3, r1
 800974c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800974e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009756:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800975a:	633b      	str	r3, [r7, #48]	@ 0x30
 800975c:	2300      	movs	r3, #0
 800975e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009760:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009764:	460b      	mov	r3, r1
 8009766:	4313      	orrs	r3, r2
 8009768:	d00a      	beq.n	8009780 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800976a:	4b6c      	ldr	r3, [pc, #432]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800976c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800976e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009772:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800977a:	4a68      	ldr	r2, [pc, #416]	@ (800991c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800977c:	430b      	orrs	r3, r1
 800977e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009788:	2100      	movs	r1, #0
 800978a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800978c:	f003 0301 	and.w	r3, r3, #1
 8009790:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009792:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009796:	460b      	mov	r3, r1
 8009798:	4313      	orrs	r3, r2
 800979a:	d011      	beq.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800979c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097a0:	3308      	adds	r3, #8
 80097a2:	2100      	movs	r1, #0
 80097a4:	4618      	mov	r0, r3
 80097a6:	f000 f8bb 	bl	8009920 <RCCEx_PLL2_Config>
 80097aa:	4603      	mov	r3, r0
 80097ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80097b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d003      	beq.n	80097c0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80097c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c8:	2100      	movs	r1, #0
 80097ca:	6239      	str	r1, [r7, #32]
 80097cc:	f003 0302 	and.w	r3, r3, #2
 80097d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80097d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80097d6:	460b      	mov	r3, r1
 80097d8:	4313      	orrs	r3, r2
 80097da:	d011      	beq.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80097dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80097e0:	3308      	adds	r3, #8
 80097e2:	2101      	movs	r1, #1
 80097e4:	4618      	mov	r0, r3
 80097e6:	f000 f89b 	bl	8009920 <RCCEx_PLL2_Config>
 80097ea:	4603      	mov	r3, r0
 80097ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80097f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d003      	beq.n	8009800 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80097fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009808:	2100      	movs	r1, #0
 800980a:	61b9      	str	r1, [r7, #24]
 800980c:	f003 0304 	and.w	r3, r3, #4
 8009810:	61fb      	str	r3, [r7, #28]
 8009812:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009816:	460b      	mov	r3, r1
 8009818:	4313      	orrs	r3, r2
 800981a:	d011      	beq.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800981c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009820:	3308      	adds	r3, #8
 8009822:	2102      	movs	r1, #2
 8009824:	4618      	mov	r0, r3
 8009826:	f000 f87b 	bl	8009920 <RCCEx_PLL2_Config>
 800982a:	4603      	mov	r3, r0
 800982c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8009830:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009834:	2b00      	cmp	r3, #0
 8009836:	d003      	beq.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009838:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800983c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	2100      	movs	r1, #0
 800984a:	6139      	str	r1, [r7, #16]
 800984c:	f003 0308 	and.w	r3, r3, #8
 8009850:	617b      	str	r3, [r7, #20]
 8009852:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009856:	460b      	mov	r3, r1
 8009858:	4313      	orrs	r3, r2
 800985a:	d011      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800985c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009860:	3328      	adds	r3, #40	@ 0x28
 8009862:	2100      	movs	r1, #0
 8009864:	4618      	mov	r0, r3
 8009866:	f000 f90d 	bl	8009a84 <RCCEx_PLL3_Config>
 800986a:	4603      	mov	r3, r0
 800986c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8009870:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8009874:	2b00      	cmp	r3, #0
 8009876:	d003      	beq.n	8009880 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009878:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800987c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009888:	2100      	movs	r1, #0
 800988a:	60b9      	str	r1, [r7, #8]
 800988c:	f003 0310 	and.w	r3, r3, #16
 8009890:	60fb      	str	r3, [r7, #12]
 8009892:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009896:	460b      	mov	r3, r1
 8009898:	4313      	orrs	r3, r2
 800989a:	d011      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800989c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098a0:	3328      	adds	r3, #40	@ 0x28
 80098a2:	2101      	movs	r1, #1
 80098a4:	4618      	mov	r0, r3
 80098a6:	f000 f8ed 	bl	8009a84 <RCCEx_PLL3_Config>
 80098aa:	4603      	mov	r3, r0
 80098ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80098b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d003      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80098c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c8:	2100      	movs	r1, #0
 80098ca:	6039      	str	r1, [r7, #0]
 80098cc:	f003 0320 	and.w	r3, r3, #32
 80098d0:	607b      	str	r3, [r7, #4]
 80098d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80098d6:	460b      	mov	r3, r1
 80098d8:	4313      	orrs	r3, r2
 80098da:	d011      	beq.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80098e0:	3328      	adds	r3, #40	@ 0x28
 80098e2:	2102      	movs	r1, #2
 80098e4:	4618      	mov	r0, r3
 80098e6:	f000 f8cd 	bl	8009a84 <RCCEx_PLL3_Config>
 80098ea:	4603      	mov	r3, r0
 80098ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80098f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d003      	beq.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80098fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8009900:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8009904:	2b00      	cmp	r3, #0
 8009906:	d101      	bne.n	800990c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8009908:	2300      	movs	r3, #0
 800990a:	e000      	b.n	800990e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800990c:	2301      	movs	r3, #1
}
 800990e:	4618      	mov	r0, r3
 8009910:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8009914:	46bd      	mov	sp, r7
 8009916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800991a:	bf00      	nop
 800991c:	58024400 	.word	0x58024400

08009920 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800992e:	4b53      	ldr	r3, [pc, #332]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 8009930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009932:	f003 0303 	and.w	r3, r3, #3
 8009936:	2b03      	cmp	r3, #3
 8009938:	d101      	bne.n	800993e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e099      	b.n	8009a72 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800993e:	4b4f      	ldr	r3, [pc, #316]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a4e      	ldr	r2, [pc, #312]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 8009944:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009948:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800994a:	f7fc fd4d 	bl	80063e8 <HAL_GetTick>
 800994e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009950:	e008      	b.n	8009964 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009952:	f7fc fd49 	bl	80063e8 <HAL_GetTick>
 8009956:	4602      	mov	r2, r0
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	1ad3      	subs	r3, r2, r3
 800995c:	2b02      	cmp	r3, #2
 800995e:	d901      	bls.n	8009964 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009960:	2303      	movs	r3, #3
 8009962:	e086      	b.n	8009a72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009964:	4b45      	ldr	r3, [pc, #276]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800996c:	2b00      	cmp	r3, #0
 800996e:	d1f0      	bne.n	8009952 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009970:	4b42      	ldr	r3, [pc, #264]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 8009972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009974:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	031b      	lsls	r3, r3, #12
 800997e:	493f      	ldr	r1, [pc, #252]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 8009980:	4313      	orrs	r3, r2
 8009982:	628b      	str	r3, [r1, #40]	@ 0x28
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	3b01      	subs	r3, #1
 800998a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	689b      	ldr	r3, [r3, #8]
 8009992:	3b01      	subs	r3, #1
 8009994:	025b      	lsls	r3, r3, #9
 8009996:	b29b      	uxth	r3, r3
 8009998:	431a      	orrs	r2, r3
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	68db      	ldr	r3, [r3, #12]
 800999e:	3b01      	subs	r3, #1
 80099a0:	041b      	lsls	r3, r3, #16
 80099a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80099a6:	431a      	orrs	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	691b      	ldr	r3, [r3, #16]
 80099ac:	3b01      	subs	r3, #1
 80099ae:	061b      	lsls	r3, r3, #24
 80099b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80099b4:	4931      	ldr	r1, [pc, #196]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 80099b6:	4313      	orrs	r3, r2
 80099b8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80099ba:	4b30      	ldr	r3, [pc, #192]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 80099bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	695b      	ldr	r3, [r3, #20]
 80099c6:	492d      	ldr	r1, [pc, #180]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 80099c8:	4313      	orrs	r3, r2
 80099ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80099cc:	4b2b      	ldr	r3, [pc, #172]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 80099ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099d0:	f023 0220 	bic.w	r2, r3, #32
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	699b      	ldr	r3, [r3, #24]
 80099d8:	4928      	ldr	r1, [pc, #160]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 80099da:	4313      	orrs	r3, r2
 80099dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80099de:	4b27      	ldr	r3, [pc, #156]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 80099e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099e2:	4a26      	ldr	r2, [pc, #152]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 80099e4:	f023 0310 	bic.w	r3, r3, #16
 80099e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80099ea:	4b24      	ldr	r3, [pc, #144]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 80099ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80099ee:	4b24      	ldr	r3, [pc, #144]	@ (8009a80 <RCCEx_PLL2_Config+0x160>)
 80099f0:	4013      	ands	r3, r2
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	69d2      	ldr	r2, [r2, #28]
 80099f6:	00d2      	lsls	r2, r2, #3
 80099f8:	4920      	ldr	r1, [pc, #128]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 80099fa:	4313      	orrs	r3, r2
 80099fc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80099fe:	4b1f      	ldr	r3, [pc, #124]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 8009a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a02:	4a1e      	ldr	r2, [pc, #120]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 8009a04:	f043 0310 	orr.w	r3, r3, #16
 8009a08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d106      	bne.n	8009a1e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009a10:	4b1a      	ldr	r3, [pc, #104]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 8009a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a14:	4a19      	ldr	r2, [pc, #100]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 8009a16:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009a1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a1c:	e00f      	b.n	8009a3e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d106      	bne.n	8009a32 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009a24:	4b15      	ldr	r3, [pc, #84]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 8009a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a28:	4a14      	ldr	r2, [pc, #80]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 8009a2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009a2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a30:	e005      	b.n	8009a3e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009a32:	4b12      	ldr	r3, [pc, #72]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 8009a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a36:	4a11      	ldr	r2, [pc, #68]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 8009a38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009a3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a0e      	ldr	r2, [pc, #56]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 8009a44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009a48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a4a:	f7fc fccd 	bl	80063e8 <HAL_GetTick>
 8009a4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a50:	e008      	b.n	8009a64 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009a52:	f7fc fcc9 	bl	80063e8 <HAL_GetTick>
 8009a56:	4602      	mov	r2, r0
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d901      	bls.n	8009a64 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a60:	2303      	movs	r3, #3
 8009a62:	e006      	b.n	8009a72 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009a64:	4b05      	ldr	r3, [pc, #20]	@ (8009a7c <RCCEx_PLL2_Config+0x15c>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d0f0      	beq.n	8009a52 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3710      	adds	r7, #16
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	58024400 	.word	0x58024400
 8009a80:	ffff0007 	.word	0xffff0007

08009a84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009a84:	b580      	push	{r7, lr}
 8009a86:	b084      	sub	sp, #16
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009a92:	4b53      	ldr	r3, [pc, #332]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a96:	f003 0303 	and.w	r3, r3, #3
 8009a9a:	2b03      	cmp	r3, #3
 8009a9c:	d101      	bne.n	8009aa2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e099      	b.n	8009bd6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009aa2:	4b4f      	ldr	r3, [pc, #316]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a4e      	ldr	r2, [pc, #312]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009aa8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009aae:	f7fc fc9b 	bl	80063e8 <HAL_GetTick>
 8009ab2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ab4:	e008      	b.n	8009ac8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009ab6:	f7fc fc97 	bl	80063e8 <HAL_GetTick>
 8009aba:	4602      	mov	r2, r0
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	1ad3      	subs	r3, r2, r3
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d901      	bls.n	8009ac8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ac4:	2303      	movs	r3, #3
 8009ac6:	e086      	b.n	8009bd6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ac8:	4b45      	ldr	r3, [pc, #276]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d1f0      	bne.n	8009ab6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009ad4:	4b42      	ldr	r3, [pc, #264]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	051b      	lsls	r3, r3, #20
 8009ae2:	493f      	ldr	r1, [pc, #252]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	628b      	str	r3, [r1, #40]	@ 0x28
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	3b01      	subs	r3, #1
 8009aee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	3b01      	subs	r3, #1
 8009af8:	025b      	lsls	r3, r3, #9
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	431a      	orrs	r2, r3
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	3b01      	subs	r3, #1
 8009b04:	041b      	lsls	r3, r3, #16
 8009b06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8009b0a:	431a      	orrs	r2, r3
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	691b      	ldr	r3, [r3, #16]
 8009b10:	3b01      	subs	r3, #1
 8009b12:	061b      	lsls	r3, r3, #24
 8009b14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8009b18:	4931      	ldr	r1, [pc, #196]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009b1e:	4b30      	ldr	r3, [pc, #192]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b22:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	695b      	ldr	r3, [r3, #20]
 8009b2a:	492d      	ldr	r1, [pc, #180]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009b30:	4b2b      	ldr	r3, [pc, #172]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b34:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	699b      	ldr	r3, [r3, #24]
 8009b3c:	4928      	ldr	r1, [pc, #160]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009b3e:	4313      	orrs	r3, r2
 8009b40:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009b42:	4b27      	ldr	r3, [pc, #156]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b46:	4a26      	ldr	r2, [pc, #152]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009b48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009b4e:	4b24      	ldr	r3, [pc, #144]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009b50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b52:	4b24      	ldr	r3, [pc, #144]	@ (8009be4 <RCCEx_PLL3_Config+0x160>)
 8009b54:	4013      	ands	r3, r2
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	69d2      	ldr	r2, [r2, #28]
 8009b5a:	00d2      	lsls	r2, r2, #3
 8009b5c:	4920      	ldr	r1, [pc, #128]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009b62:	4b1f      	ldr	r3, [pc, #124]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b66:	4a1e      	ldr	r2, [pc, #120]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d106      	bne.n	8009b82 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009b74:	4b1a      	ldr	r3, [pc, #104]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b78:	4a19      	ldr	r2, [pc, #100]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009b7a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009b7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b80:	e00f      	b.n	8009ba2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d106      	bne.n	8009b96 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009b88:	4b15      	ldr	r3, [pc, #84]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b8c:	4a14      	ldr	r2, [pc, #80]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009b8e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009b92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009b94:	e005      	b.n	8009ba2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009b96:	4b12      	ldr	r3, [pc, #72]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b9a:	4a11      	ldr	r2, [pc, #68]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009b9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009ba0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009ba2:	4b0f      	ldr	r3, [pc, #60]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a0e      	ldr	r2, [pc, #56]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009ba8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bae:	f7fc fc1b 	bl	80063e8 <HAL_GetTick>
 8009bb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bb4:	e008      	b.n	8009bc8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009bb6:	f7fc fc17 	bl	80063e8 <HAL_GetTick>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	2b02      	cmp	r3, #2
 8009bc2:	d901      	bls.n	8009bc8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	e006      	b.n	8009bd6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009bc8:	4b05      	ldr	r3, [pc, #20]	@ (8009be0 <RCCEx_PLL3_Config+0x15c>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d0f0      	beq.n	8009bb6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	58024400 	.word	0x58024400
 8009be4:	ffff0007 	.word	0xffff0007

08009be8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d101      	bne.n	8009bfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e10f      	b.n	8009e1a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a87      	ldr	r2, [pc, #540]	@ (8009e24 <HAL_SPI_Init+0x23c>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d00f      	beq.n	8009c2a <HAL_SPI_Init+0x42>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a86      	ldr	r2, [pc, #536]	@ (8009e28 <HAL_SPI_Init+0x240>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d00a      	beq.n	8009c2a <HAL_SPI_Init+0x42>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a84      	ldr	r2, [pc, #528]	@ (8009e2c <HAL_SPI_Init+0x244>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d005      	beq.n	8009c2a <HAL_SPI_Init+0x42>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	2b0f      	cmp	r3, #15
 8009c24:	d901      	bls.n	8009c2a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	e0f7      	b.n	8009e1a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fbbc 	bl	800a3a8 <SPI_GetPacketSize>
 8009c30:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a7b      	ldr	r2, [pc, #492]	@ (8009e24 <HAL_SPI_Init+0x23c>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	d00c      	beq.n	8009c56 <HAL_SPI_Init+0x6e>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a79      	ldr	r2, [pc, #484]	@ (8009e28 <HAL_SPI_Init+0x240>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d007      	beq.n	8009c56 <HAL_SPI_Init+0x6e>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a78      	ldr	r2, [pc, #480]	@ (8009e2c <HAL_SPI_Init+0x244>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d002      	beq.n	8009c56 <HAL_SPI_Init+0x6e>
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2b08      	cmp	r3, #8
 8009c54:	d811      	bhi.n	8009c7a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009c5a:	4a72      	ldr	r2, [pc, #456]	@ (8009e24 <HAL_SPI_Init+0x23c>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d009      	beq.n	8009c74 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4a70      	ldr	r2, [pc, #448]	@ (8009e28 <HAL_SPI_Init+0x240>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d004      	beq.n	8009c74 <HAL_SPI_Init+0x8c>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4a6f      	ldr	r2, [pc, #444]	@ (8009e2c <HAL_SPI_Init+0x244>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d104      	bne.n	8009c7e <HAL_SPI_Init+0x96>
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2b10      	cmp	r3, #16
 8009c78:	d901      	bls.n	8009c7e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e0cd      	b.n	8009e1a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d106      	bne.n	8009c98 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f7fc f97c 	bl	8005f90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2202      	movs	r2, #2
 8009c9c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f022 0201 	bic.w	r2, r2, #1
 8009cae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	689b      	ldr	r3, [r3, #8]
 8009cb6:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8009cba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	699b      	ldr	r3, [r3, #24]
 8009cc0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009cc4:	d119      	bne.n	8009cfa <HAL_SPI_Init+0x112>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009cce:	d103      	bne.n	8009cd8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d008      	beq.n	8009cea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d10c      	bne.n	8009cfa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009ce4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009ce8:	d107      	bne.n	8009cfa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681a      	ldr	r2, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009cf8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d00f      	beq.n	8009d26 <HAL_SPI_Init+0x13e>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	2b06      	cmp	r3, #6
 8009d0c:	d90b      	bls.n	8009d26 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	430a      	orrs	r2, r1
 8009d22:	601a      	str	r2, [r3, #0]
 8009d24:	e007      	b.n	8009d36 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	681a      	ldr	r2, [r3, #0]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009d34:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	69da      	ldr	r2, [r3, #28]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d3e:	431a      	orrs	r2, r3
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	431a      	orrs	r2, r3
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d48:	ea42 0103 	orr.w	r1, r2, r3
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	68da      	ldr	r2, [r3, #12]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	430a      	orrs	r2, r1
 8009d56:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d60:	431a      	orrs	r2, r3
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d66:	431a      	orrs	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	699b      	ldr	r3, [r3, #24]
 8009d6c:	431a      	orrs	r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	431a      	orrs	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	695b      	ldr	r3, [r3, #20]
 8009d78:	431a      	orrs	r2, r3
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a1b      	ldr	r3, [r3, #32]
 8009d7e:	431a      	orrs	r2, r3
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	431a      	orrs	r2, r3
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d8a:	431a      	orrs	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	431a      	orrs	r2, r3
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009d96:	ea42 0103 	orr.w	r1, r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	430a      	orrs	r2, r1
 8009da4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	685b      	ldr	r3, [r3, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d113      	bne.n	8009dd6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	689b      	ldr	r3, [r3, #8]
 8009db4:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009dc0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	689b      	ldr	r3, [r3, #8]
 8009dc8:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009dd4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f022 0201 	bic.w	r2, r2, #1
 8009de4:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00a      	beq.n	8009e08 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68db      	ldr	r3, [r3, #12]
 8009df8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	430a      	orrs	r2, r1
 8009e06:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2201      	movs	r2, #1
 8009e14:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	40013000 	.word	0x40013000
 8009e28:	40003800 	.word	0x40003800
 8009e2c:	40003c00 	.word	0x40003c00

08009e30 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b088      	sub	sp, #32
 8009e34:	af02      	add	r7, sp, #8
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	603b      	str	r3, [r7, #0]
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	3320      	adds	r3, #32
 8009e46:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009e48:	f7fc face 	bl	80063e8 <HAL_GetTick>
 8009e4c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d001      	beq.n	8009e5e <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 8009e5a:	2302      	movs	r3, #2
 8009e5c:	e1d1      	b.n	800a202 <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d002      	beq.n	8009e6a <HAL_SPI_Transmit+0x3a>
 8009e64:	88fb      	ldrh	r3, [r7, #6]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d101      	bne.n	8009e6e <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 8009e6a:	2301      	movs	r3, #1
 8009e6c:	e1c9      	b.n	800a202 <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d101      	bne.n	8009e7c <HAL_SPI_Transmit+0x4c>
 8009e78:	2302      	movs	r3, #2
 8009e7a:	e1c2      	b.n	800a202 <HAL_SPI_Transmit+0x3d2>
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	2203      	movs	r2, #3
 8009e88:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	68ba      	ldr	r2, [r7, #8]
 8009e98:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	88fa      	ldrh	r2, [r7, #6]
 8009e9e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	88fa      	ldrh	r2, [r7, #6]
 8009ea6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8009ed4:	d108      	bne.n	8009ee8 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ee4:	601a      	str	r2, [r3, #0]
 8009ee6:	e009      	b.n	8009efc <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68db      	ldr	r3, [r3, #12]
 8009eee:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8009efa:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	685a      	ldr	r2, [r3, #4]
 8009f02:	4b96      	ldr	r3, [pc, #600]	@ (800a15c <HAL_SPI_Transmit+0x32c>)
 8009f04:	4013      	ands	r3, r2
 8009f06:	88f9      	ldrh	r1, [r7, #6]
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	6812      	ldr	r2, [r2, #0]
 8009f0c:	430b      	orrs	r3, r1
 8009f0e:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f042 0201 	orr.w	r2, r2, #1
 8009f1e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f28:	d107      	bne.n	8009f3a <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009f38:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	2b0f      	cmp	r3, #15
 8009f40:	d947      	bls.n	8009fd2 <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009f42:	e03f      	b.n	8009fc4 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	695b      	ldr	r3, [r3, #20]
 8009f4a:	f003 0302 	and.w	r3, r3, #2
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	d114      	bne.n	8009f7c <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	6812      	ldr	r2, [r2, #0]
 8009f5c:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f62:	1d1a      	adds	r2, r3, #4
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	3b01      	subs	r3, #1
 8009f72:	b29a      	uxth	r2, r3
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8009f7a:	e023      	b.n	8009fc4 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009f7c:	f7fc fa34 	bl	80063e8 <HAL_GetTick>
 8009f80:	4602      	mov	r2, r0
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	1ad3      	subs	r3, r2, r3
 8009f86:	683a      	ldr	r2, [r7, #0]
 8009f88:	429a      	cmp	r2, r3
 8009f8a:	d803      	bhi.n	8009f94 <HAL_SPI_Transmit+0x164>
 8009f8c:	683b      	ldr	r3, [r7, #0]
 8009f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009f92:	d102      	bne.n	8009f9a <HAL_SPI_Transmit+0x16a>
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d114      	bne.n	8009fc4 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f000 f936 	bl	800a20c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009fa6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2201      	movs	r2, #1
 8009fb4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8009fc0:	2303      	movs	r3, #3
 8009fc2:	e11e      	b.n	800a202 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009fca:	b29b      	uxth	r3, r3
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d1b9      	bne.n	8009f44 <HAL_SPI_Transmit+0x114>
 8009fd0:	e0f1      	b.n	800a1b6 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	2b07      	cmp	r3, #7
 8009fd8:	f240 80e6 	bls.w	800a1a8 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009fdc:	e05d      	b.n	800a09a <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	695b      	ldr	r3, [r3, #20]
 8009fe4:	f003 0302 	and.w	r3, r3, #2
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	d132      	bne.n	800a052 <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d918      	bls.n	800a02a <HAL_SPI_Transmit+0x1fa>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d014      	beq.n	800a02a <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	6812      	ldr	r2, [r2, #0]
 800a00a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a010:	1d1a      	adds	r2, r3, #4
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	3b02      	subs	r3, #2
 800a020:	b29a      	uxth	r2, r3
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a028:	e037      	b.n	800a09a <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a02e:	881a      	ldrh	r2, [r3, #0]
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a038:	1c9a      	adds	r2, r3, #2
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a044:	b29b      	uxth	r3, r3
 800a046:	3b01      	subs	r3, #1
 800a048:	b29a      	uxth	r2, r3
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a050:	e023      	b.n	800a09a <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a052:	f7fc f9c9 	bl	80063e8 <HAL_GetTick>
 800a056:	4602      	mov	r2, r0
 800a058:	693b      	ldr	r3, [r7, #16]
 800a05a:	1ad3      	subs	r3, r2, r3
 800a05c:	683a      	ldr	r2, [r7, #0]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d803      	bhi.n	800a06a <HAL_SPI_Transmit+0x23a>
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a068:	d102      	bne.n	800a070 <HAL_SPI_Transmit+0x240>
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d114      	bne.n	800a09a <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f000 f8cb 	bl	800a20c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a07c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	2201      	movs	r2, #1
 800a08a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2200      	movs	r2, #0
 800a092:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	e0b3      	b.n	800a202 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d19b      	bne.n	8009fde <HAL_SPI_Transmit+0x1ae>
 800a0a6:	e086      	b.n	800a1b6 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	695b      	ldr	r3, [r3, #20]
 800a0ae:	f003 0302 	and.w	r3, r3, #2
 800a0b2:	2b02      	cmp	r3, #2
 800a0b4:	d154      	bne.n	800a160 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a0bc:	b29b      	uxth	r3, r3
 800a0be:	2b03      	cmp	r3, #3
 800a0c0:	d918      	bls.n	800a0f4 <HAL_SPI_Transmit+0x2c4>
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0c6:	2b40      	cmp	r3, #64	@ 0x40
 800a0c8:	d914      	bls.n	800a0f4 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	6812      	ldr	r2, [r2, #0]
 800a0d4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0da:	1d1a      	adds	r2, r3, #4
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	3b04      	subs	r3, #4
 800a0ea:	b29a      	uxth	r2, r3
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a0f2:	e059      	b.n	800a1a8 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d917      	bls.n	800a130 <HAL_SPI_Transmit+0x300>
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a104:	2b00      	cmp	r3, #0
 800a106:	d013      	beq.n	800a130 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a10c:	881a      	ldrh	r2, [r3, #0]
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a116:	1c9a      	adds	r2, r3, #2
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a122:	b29b      	uxth	r3, r3
 800a124:	3b02      	subs	r3, #2
 800a126:	b29a      	uxth	r2, r3
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a12e:	e03b      	b.n	800a1a8 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	3320      	adds	r3, #32
 800a13a:	7812      	ldrb	r2, [r2, #0]
 800a13c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a142:	1c5a      	adds	r2, r3, #1
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a14e:	b29b      	uxth	r3, r3
 800a150:	3b01      	subs	r3, #1
 800a152:	b29a      	uxth	r2, r3
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800a15a:	e025      	b.n	800a1a8 <HAL_SPI_Transmit+0x378>
 800a15c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a160:	f7fc f942 	bl	80063e8 <HAL_GetTick>
 800a164:	4602      	mov	r2, r0
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	683a      	ldr	r2, [r7, #0]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d803      	bhi.n	800a178 <HAL_SPI_Transmit+0x348>
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a176:	d102      	bne.n	800a17e <HAL_SPI_Transmit+0x34e>
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d114      	bne.n	800a1a8 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a17e:	68f8      	ldr	r0, [r7, #12]
 800a180:	f000 f844 	bl	800a20c <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a18a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2201      	movs	r2, #1
 800a198:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e02c      	b.n	800a202 <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f47f af79 	bne.w	800a0a8 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	9300      	str	r3, [sp, #0]
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	2108      	movs	r1, #8
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	f000 f8c3 	bl	800a34c <SPI_WaitOnFlagUntilTimeout>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d007      	beq.n	800a1dc <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1d2:	f043 0220 	orr.w	r2, r3, #32
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f000 f815 	bl	800a20c <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d001      	beq.n	800a200 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	e000      	b.n	800a202 <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800a200:	2300      	movs	r3, #0
  }
}
 800a202:	4618      	mov	r0, r3
 800a204:	3718      	adds	r7, #24
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop

0800a20c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b085      	sub	sp, #20
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	695b      	ldr	r3, [r3, #20]
 800a21a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	699a      	ldr	r2, [r3, #24]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f042 0208 	orr.w	r2, r2, #8
 800a22a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	699a      	ldr	r2, [r3, #24]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f042 0210 	orr.w	r2, r2, #16
 800a23a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f022 0201 	bic.w	r2, r2, #1
 800a24a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6919      	ldr	r1, [r3, #16]
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	4b3c      	ldr	r3, [pc, #240]	@ (800a348 <SPI_CloseTransfer+0x13c>)
 800a258:	400b      	ands	r3, r1
 800a25a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	689a      	ldr	r2, [r3, #8]
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800a26a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a272:	b2db      	uxtb	r3, r3
 800a274:	2b04      	cmp	r3, #4
 800a276:	d014      	beq.n	800a2a2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f003 0320 	and.w	r3, r3, #32
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00f      	beq.n	800a2a2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a288:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	699a      	ldr	r2, [r3, #24]
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f042 0220 	orr.w	r2, r2, #32
 800a2a0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800a2a8:	b2db      	uxtb	r3, r3
 800a2aa:	2b03      	cmp	r3, #3
 800a2ac:	d014      	beq.n	800a2d8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d00f      	beq.n	800a2d8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2be:	f043 0204 	orr.w	r2, r3, #4
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	699a      	ldr	r2, [r3, #24]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a2d6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d00f      	beq.n	800a302 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a2e8:	f043 0201 	orr.w	r2, r3, #1
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	699a      	ldr	r2, [r3, #24]
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a300:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d00f      	beq.n	800a32c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a312:	f043 0208 	orr.w	r2, r3, #8
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	699a      	ldr	r2, [r3, #24]
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a32a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2200      	movs	r2, #0
 800a330:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2200      	movs	r2, #0
 800a338:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800a33c:	bf00      	nop
 800a33e:	3714      	adds	r7, #20
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr
 800a348:	fffffc90 	.word	0xfffffc90

0800a34c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b084      	sub	sp, #16
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	603b      	str	r3, [r7, #0]
 800a358:	4613      	mov	r3, r2
 800a35a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a35c:	e010      	b.n	800a380 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a35e:	f7fc f843 	bl	80063e8 <HAL_GetTick>
 800a362:	4602      	mov	r2, r0
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	1ad3      	subs	r3, r2, r3
 800a368:	683a      	ldr	r2, [r7, #0]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d803      	bhi.n	800a376 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a374:	d102      	bne.n	800a37c <SPI_WaitOnFlagUntilTimeout+0x30>
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d101      	bne.n	800a380 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a37c:	2303      	movs	r3, #3
 800a37e:	e00f      	b.n	800a3a0 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	695a      	ldr	r2, [r3, #20]
 800a386:	68bb      	ldr	r3, [r7, #8]
 800a388:	4013      	ands	r3, r2
 800a38a:	68ba      	ldr	r2, [r7, #8]
 800a38c:	429a      	cmp	r2, r3
 800a38e:	bf0c      	ite	eq
 800a390:	2301      	moveq	r3, #1
 800a392:	2300      	movne	r3, #0
 800a394:	b2db      	uxtb	r3, r3
 800a396:	461a      	mov	r2, r3
 800a398:	79fb      	ldrb	r3, [r7, #7]
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d0df      	beq.n	800a35e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a39e:	2300      	movs	r3, #0
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3b4:	095b      	lsrs	r3, r3, #5
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	3307      	adds	r3, #7
 800a3c6:	08db      	lsrs	r3, r3, #3
 800a3c8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	68fa      	ldr	r2, [r7, #12]
 800a3ce:	fb02 f303 	mul.w	r3, r2, r3
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3714      	adds	r7, #20
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3dc:	4770      	bx	lr

0800a3de <LL_ADC_REG_SetSequencerLength>:
{
 800a3de:	b480      	push	{r7}
 800a3e0:	b083      	sub	sp, #12
 800a3e2:	af00      	add	r7, sp, #0
 800a3e4:	6078      	str	r0, [r7, #4]
 800a3e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ec:	f023 020f 	bic.w	r2, r3, #15
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	431a      	orrs	r2, r3
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a402:	4770      	bx	lr

0800a404 <LL_ADC_IsEnabled>:
{
 800a404:	b480      	push	{r7}
 800a406:	b083      	sub	sp, #12
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	f003 0301 	and.w	r3, r3, #1
 800a414:	2b01      	cmp	r3, #1
 800a416:	d101      	bne.n	800a41c <LL_ADC_IsEnabled+0x18>
 800a418:	2301      	movs	r3, #1
 800a41a:	e000      	b.n	800a41e <LL_ADC_IsEnabled+0x1a>
 800a41c:	2300      	movs	r3, #0
}
 800a41e:	4618      	mov	r0, r3
 800a420:	370c      	adds	r7, #12
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr
	...

0800a42c <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 800a42c:	b590      	push	{r4, r7, lr}
 800a42e:	b085      	sub	sp, #20
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800a436:	2300      	movs	r3, #0
 800a438:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4a22      	ldr	r2, [pc, #136]	@ (800a4c8 <LL_ADC_CommonInit+0x9c>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d10e      	bne.n	800a460 <LL_ADC_CommonInit+0x34>
 800a442:	4822      	ldr	r0, [pc, #136]	@ (800a4cc <LL_ADC_CommonInit+0xa0>)
 800a444:	f7ff ffde 	bl	800a404 <LL_ADC_IsEnabled>
 800a448:	4604      	mov	r4, r0
 800a44a:	4821      	ldr	r0, [pc, #132]	@ (800a4d0 <LL_ADC_CommonInit+0xa4>)
 800a44c:	f7ff ffda 	bl	800a404 <LL_ADC_IsEnabled>
 800a450:	4603      	mov	r3, r0
 800a452:	4323      	orrs	r3, r4
 800a454:	2b00      	cmp	r3, #0
 800a456:	bf0c      	ite	eq
 800a458:	2301      	moveq	r3, #1
 800a45a:	2300      	movne	r3, #0
 800a45c:	b2db      	uxtb	r3, r3
 800a45e:	e008      	b.n	800a472 <LL_ADC_CommonInit+0x46>
 800a460:	481c      	ldr	r0, [pc, #112]	@ (800a4d4 <LL_ADC_CommonInit+0xa8>)
 800a462:	f7ff ffcf 	bl	800a404 <LL_ADC_IsEnabled>
 800a466:	4603      	mov	r3, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	bf0c      	ite	eq
 800a46c:	2301      	moveq	r3, #1
 800a46e:	2300      	movne	r3, #0
 800a470:	b2db      	uxtb	r3, r3
 800a472:	2b00      	cmp	r3, #0
 800a474:	d020      	beq.n	800a4b8 <LL_ADC_CommonInit+0x8c>
    /*  - multimode (if several ADC instances available on the                */
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d012      	beq.n	800a4a4 <LL_ADC_CommonInit+0x78>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	689a      	ldr	r2, [r3, #8]
 800a482:	4b15      	ldr	r3, [pc, #84]	@ (800a4d8 <LL_ADC_CommonInit+0xac>)
 800a484:	4013      	ands	r3, r2
 800a486:	683a      	ldr	r2, [r7, #0]
 800a488:	6811      	ldr	r1, [r2, #0]
 800a48a:	683a      	ldr	r2, [r7, #0]
 800a48c:	6852      	ldr	r2, [r2, #4]
 800a48e:	4311      	orrs	r1, r2
 800a490:	683a      	ldr	r2, [r7, #0]
 800a492:	6892      	ldr	r2, [r2, #8]
 800a494:	4311      	orrs	r1, r2
 800a496:	683a      	ldr	r2, [r7, #0]
 800a498:	68d2      	ldr	r2, [r2, #12]
 800a49a:	430a      	orrs	r2, r1
 800a49c:	431a      	orrs	r2, r3
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	609a      	str	r2, [r3, #8]
 800a4a2:	e00b      	b.n	800a4bc <LL_ADC_CommonInit+0x90>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	689a      	ldr	r2, [r3, #8]
 800a4a8:	4b0b      	ldr	r3, [pc, #44]	@ (800a4d8 <LL_ADC_CommonInit+0xac>)
 800a4aa:	4013      	ands	r3, r2
 800a4ac:	683a      	ldr	r2, [r7, #0]
 800a4ae:	6812      	ldr	r2, [r2, #0]
 800a4b0:	431a      	orrs	r2, r3
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	609a      	str	r2, [r3, #8]
 800a4b6:	e001      	b.n	800a4bc <LL_ADC_CommonInit+0x90>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	3714      	adds	r7, #20
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd90      	pop	{r4, r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	40022300 	.word	0x40022300
 800a4cc:	40022000 	.word	0x40022000
 800a4d0:	40022100 	.word	0x40022100
 800a4d4:	58026000 	.word	0x58026000
 800a4d8:	ffc030e0 	.word	0xffc030e0

0800a4dc <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_LEFT_BIT_SHIFT(ADC_InitStruct->LeftBitShift));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f7ff ff8a 	bl	800a404 <LL_ADC_IsEnabled>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d13d      	bne.n	800a572 <LL_ADC_Init+0x96>
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
#if defined(ADC_VER_V5_V90)
    if(ADCx==ADC3)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	4a21      	ldr	r2, [pc, #132]	@ (800a580 <LL_ADC_Init+0xa4>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d123      	bne.n	800a546 <LL_ADC_Init+0x6a>
    {
      MODIFY_REG(ADCx->CFGR,
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	68da      	ldr	r2, [r3, #12]
 800a502:	4b20      	ldr	r3, [pc, #128]	@ (800a584 <LL_ADC_Init+0xa8>)
 800a504:	4013      	ands	r3, r2
 800a506:	683a      	ldr	r2, [r7, #0]
 800a508:	6812      	ldr	r2, [r2, #0]
 800a50a:	2a08      	cmp	r2, #8
 800a50c:	d013      	beq.n	800a536 <LL_ADC_Init+0x5a>
 800a50e:	683a      	ldr	r2, [r7, #0]
 800a510:	6812      	ldr	r2, [r2, #0]
 800a512:	2a0c      	cmp	r2, #12
 800a514:	d00d      	beq.n	800a532 <LL_ADC_Init+0x56>
 800a516:	683a      	ldr	r2, [r7, #0]
 800a518:	6812      	ldr	r2, [r2, #0]
 800a51a:	2a1c      	cmp	r2, #28
 800a51c:	d007      	beq.n	800a52e <LL_ADC_Init+0x52>
 800a51e:	683a      	ldr	r2, [r7, #0]
 800a520:	6812      	ldr	r2, [r2, #0]
 800a522:	2a18      	cmp	r2, #24
 800a524:	d101      	bne.n	800a52a <LL_ADC_Init+0x4e>
 800a526:	2218      	movs	r2, #24
 800a528:	e006      	b.n	800a538 <LL_ADC_Init+0x5c>
 800a52a:	2200      	movs	r2, #0
 800a52c:	e004      	b.n	800a538 <LL_ADC_Init+0x5c>
 800a52e:	2210      	movs	r2, #16
 800a530:	e002      	b.n	800a538 <LL_ADC_Init+0x5c>
 800a532:	2208      	movs	r2, #8
 800a534:	e000      	b.n	800a538 <LL_ADC_Init+0x5c>
 800a536:	2200      	movs	r2, #0
 800a538:	6839      	ldr	r1, [r7, #0]
 800a53a:	6889      	ldr	r1, [r1, #8]
 800a53c:	430a      	orrs	r2, r1
 800a53e:	431a      	orrs	r2, r3
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	60da      	str	r2, [r3, #12]
 800a544:	e00b      	b.n	800a55e <LL_ADC_Init+0x82>
                 | ADC_InitStruct->LowPowerMode
                );
    }
    else
    {
    MODIFY_REG(ADCx->CFGR,
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	68da      	ldr	r2, [r3, #12]
 800a54a:	4b0f      	ldr	r3, [pc, #60]	@ (800a588 <LL_ADC_Init+0xac>)
 800a54c:	4013      	ands	r3, r2
 800a54e:	683a      	ldr	r2, [r7, #0]
 800a550:	6811      	ldr	r1, [r2, #0]
 800a552:	683a      	ldr	r2, [r7, #0]
 800a554:	6892      	ldr	r2, [r2, #8]
 800a556:	430a      	orrs	r2, r1
 800a558:	431a      	orrs	r2, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	60da      	str	r2, [r3, #12]
               ADC_InitStruct->Resolution
               | ADC_InitStruct->LowPowerMode
              );
#endif

    MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LSHIFT, ADC_InitStruct->LeftBitShift);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	691b      	ldr	r3, [r3, #16]
 800a562:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	431a      	orrs	r2, r3
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	611a      	str	r2, [r3, #16]
 800a570:	e001      	b.n	800a576 <LL_ADC_Init+0x9a>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800a576:	7bfb      	ldrb	r3, [r7, #15]
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}
 800a580:	58026000 	.word	0x58026000
 800a584:	ffffbfe7 	.word	0xffffbfe7
 800a588:	ffffbfe3 	.word	0xffffbfe3

0800a58c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b084      	sub	sp, #16
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800a596:	2300      	movs	r3, #0
 800a598:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DATA_TRANSFER_MODE(ADC_REG_InitStruct->DataTransferMode));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f7ff ff32 	bl	800a404 <LL_ADC_IsEnabled>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d132      	bne.n	800a60c <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d015      	beq.n	800a5da <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	68da      	ldr	r2, [r3, #12]
 800a5b2:	4b1a      	ldr	r3, [pc, #104]	@ (800a61c <LL_ADC_REG_Init+0x90>)
 800a5b4:	4013      	ands	r3, r2
 800a5b6:	683a      	ldr	r2, [r7, #0]
 800a5b8:	6811      	ldr	r1, [r2, #0]
 800a5ba:	683a      	ldr	r2, [r7, #0]
 800a5bc:	6892      	ldr	r2, [r2, #8]
 800a5be:	4311      	orrs	r1, r2
 800a5c0:	683a      	ldr	r2, [r7, #0]
 800a5c2:	68d2      	ldr	r2, [r2, #12]
 800a5c4:	4311      	orrs	r1, r2
 800a5c6:	683a      	ldr	r2, [r7, #0]
 800a5c8:	6912      	ldr	r2, [r2, #16]
 800a5ca:	4311      	orrs	r1, r2
 800a5cc:	683a      	ldr	r2, [r7, #0]
 800a5ce:	6952      	ldr	r2, [r2, #20]
 800a5d0:	430a      	orrs	r2, r1
 800a5d2:	431a      	orrs	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	60da      	str	r2, [r3, #12]
 800a5d8:	e011      	b.n	800a5fe <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	68da      	ldr	r2, [r3, #12]
 800a5de:	4b0f      	ldr	r3, [pc, #60]	@ (800a61c <LL_ADC_REG_Init+0x90>)
 800a5e0:	4013      	ands	r3, r2
 800a5e2:	683a      	ldr	r2, [r7, #0]
 800a5e4:	6811      	ldr	r1, [r2, #0]
 800a5e6:	683a      	ldr	r2, [r7, #0]
 800a5e8:	68d2      	ldr	r2, [r2, #12]
 800a5ea:	4311      	orrs	r1, r2
 800a5ec:	683a      	ldr	r2, [r7, #0]
 800a5ee:	6912      	ldr	r2, [r2, #16]
 800a5f0:	4311      	orrs	r1, r2
 800a5f2:	683a      	ldr	r2, [r7, #0]
 800a5f4:	6952      	ldr	r2, [r2, #20]
 800a5f6:	430a      	orrs	r2, r1
 800a5f8:	431a      	orrs	r2, r3
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	685b      	ldr	r3, [r3, #4]
 800a602:	4619      	mov	r1, r3
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f7ff feea 	bl	800a3de <LL_ADC_REG_SetSequencerLength>
 800a60a:	e001      	b.n	800a610 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800a60c:	2301      	movs	r3, #1
 800a60e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800a610:	7bfb      	ldrb	r3, [r7, #15]
}
 800a612:	4618      	mov	r0, r3
 800a614:	3710      	adds	r7, #16
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}
 800a61a:	bf00      	nop
 800a61c:	fff0c01c 	.word	0xfff0c01c

0800a620 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800a620:	b480      	push	{r7}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	6819      	ldr	r1, [r3, #0]
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	fb03 f203 	mul.w	r2, r3, r3
 800a636:	4613      	mov	r3, r2
 800a638:	005b      	lsls	r3, r3, #1
 800a63a:	4413      	add	r3, r2
 800a63c:	43db      	mvns	r3, r3
 800a63e:	ea01 0203 	and.w	r2, r1, r3
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	fb03 f303 	mul.w	r3, r3, r3
 800a648:	6879      	ldr	r1, [r7, #4]
 800a64a:	fb01 f303 	mul.w	r3, r1, r3
 800a64e:	431a      	orrs	r2, r3
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	601a      	str	r2, [r3, #0]
}
 800a654:	bf00      	nop
 800a656:	3714      	adds	r7, #20
 800a658:	46bd      	mov	sp, r7
 800a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65e:	4770      	bx	lr

0800a660 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	60f8      	str	r0, [r7, #12]
 800a668:	60b9      	str	r1, [r7, #8]
 800a66a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	685a      	ldr	r2, [r3, #4]
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	43db      	mvns	r3, r3
 800a674:	401a      	ands	r2, r3
 800a676:	68bb      	ldr	r3, [r7, #8]
 800a678:	6879      	ldr	r1, [r7, #4]
 800a67a:	fb01 f303 	mul.w	r3, r1, r3
 800a67e:	431a      	orrs	r2, r3
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	605a      	str	r2, [r3, #4]
}
 800a684:	bf00      	nop
 800a686:	3714      	adds	r7, #20
 800a688:	46bd      	mov	sp, r7
 800a68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68e:	4770      	bx	lr

0800a690 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800a690:	b480      	push	{r7}
 800a692:	b085      	sub	sp, #20
 800a694:	af00      	add	r7, sp, #0
 800a696:	60f8      	str	r0, [r7, #12]
 800a698:	60b9      	str	r1, [r7, #8]
 800a69a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	6899      	ldr	r1, [r3, #8]
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	fb03 f203 	mul.w	r2, r3, r3
 800a6a6:	4613      	mov	r3, r2
 800a6a8:	005b      	lsls	r3, r3, #1
 800a6aa:	4413      	add	r3, r2
 800a6ac:	43db      	mvns	r3, r3
 800a6ae:	ea01 0203 	and.w	r2, r1, r3
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	fb03 f303 	mul.w	r3, r3, r3
 800a6b8:	6879      	ldr	r1, [r7, #4]
 800a6ba:	fb01 f303 	mul.w	r3, r1, r3
 800a6be:	431a      	orrs	r2, r3
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	609a      	str	r2, [r3, #8]
}
 800a6c4:	bf00      	nop
 800a6c6:	3714      	adds	r7, #20
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	60f8      	str	r0, [r7, #12]
 800a6d8:	60b9      	str	r1, [r7, #8]
 800a6da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	68d9      	ldr	r1, [r3, #12]
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	fb03 f203 	mul.w	r2, r3, r3
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	005b      	lsls	r3, r3, #1
 800a6ea:	4413      	add	r3, r2
 800a6ec:	43db      	mvns	r3, r3
 800a6ee:	ea01 0203 	and.w	r2, r1, r3
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	fb03 f303 	mul.w	r3, r3, r3
 800a6f8:	6879      	ldr	r1, [r7, #4]
 800a6fa:	fb01 f303 	mul.w	r3, r1, r3
 800a6fe:	431a      	orrs	r2, r3
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	60da      	str	r2, [r3, #12]
}
 800a704:	bf00      	nop
 800a706:	3714      	adds	r7, #20
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a710:	b480      	push	{r7}
 800a712:	b085      	sub	sp, #20
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	6a19      	ldr	r1, [r3, #32]
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	fb03 f303 	mul.w	r3, r3, r3
 800a726:	68ba      	ldr	r2, [r7, #8]
 800a728:	fb02 f303 	mul.w	r3, r2, r3
 800a72c:	68ba      	ldr	r2, [r7, #8]
 800a72e:	fb03 f202 	mul.w	r2, r3, r2
 800a732:	4613      	mov	r3, r2
 800a734:	011b      	lsls	r3, r3, #4
 800a736:	1a9b      	subs	r3, r3, r2
 800a738:	43db      	mvns	r3, r3
 800a73a:	ea01 0203 	and.w	r2, r1, r3
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	fb03 f303 	mul.w	r3, r3, r3
 800a744:	68b9      	ldr	r1, [r7, #8]
 800a746:	fb01 f303 	mul.w	r3, r1, r3
 800a74a:	68b9      	ldr	r1, [r7, #8]
 800a74c:	fb01 f303 	mul.w	r3, r1, r3
 800a750:	6879      	ldr	r1, [r7, #4]
 800a752:	fb01 f303 	mul.w	r3, r1, r3
 800a756:	431a      	orrs	r2, r3
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800a75c:	bf00      	nop
 800a75e:	3714      	adds	r7, #20
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr

0800a768 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	0a1b      	lsrs	r3, r3, #8
 800a77c:	68ba      	ldr	r2, [r7, #8]
 800a77e:	0a12      	lsrs	r2, r2, #8
 800a780:	fb02 f303 	mul.w	r3, r2, r3
 800a784:	68ba      	ldr	r2, [r7, #8]
 800a786:	0a12      	lsrs	r2, r2, #8
 800a788:	fb02 f303 	mul.w	r3, r2, r3
 800a78c:	68ba      	ldr	r2, [r7, #8]
 800a78e:	0a12      	lsrs	r2, r2, #8
 800a790:	fb03 f202 	mul.w	r2, r3, r2
 800a794:	4613      	mov	r3, r2
 800a796:	011b      	lsls	r3, r3, #4
 800a798:	1a9b      	subs	r3, r3, r2
 800a79a:	43db      	mvns	r3, r3
 800a79c:	ea01 0203 	and.w	r2, r1, r3
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	0a1b      	lsrs	r3, r3, #8
 800a7a4:	68b9      	ldr	r1, [r7, #8]
 800a7a6:	0a09      	lsrs	r1, r1, #8
 800a7a8:	fb01 f303 	mul.w	r3, r1, r3
 800a7ac:	68b9      	ldr	r1, [r7, #8]
 800a7ae:	0a09      	lsrs	r1, r1, #8
 800a7b0:	fb01 f303 	mul.w	r3, r1, r3
 800a7b4:	68b9      	ldr	r1, [r7, #8]
 800a7b6:	0a09      	lsrs	r1, r1, #8
 800a7b8:	fb01 f303 	mul.w	r3, r1, r3
 800a7bc:	6879      	ldr	r1, [r7, #4]
 800a7be:	fb01 f303 	mul.w	r3, r1, r3
 800a7c2:	431a      	orrs	r2, r3
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 800a7c8:	bf00      	nop
 800a7ca:	3714      	adds	r7, #20
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b088      	sub	sp, #32
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	fa93 f3a3 	rbit	r3, r3
 800a7ea:	60fb      	str	r3, [r7, #12]
  return result;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d101      	bne.n	800a7fa <LL_GPIO_Init+0x26>
    return 32U;
 800a7f6:	2320      	movs	r3, #32
 800a7f8:	e003      	b.n	800a802 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	fab3 f383 	clz	r3, r3
 800a800:	b2db      	uxtb	r3, r3
 800a802:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a804:	e048      	b.n	800a898 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	2101      	movs	r1, #1
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	fa01 f303 	lsl.w	r3, r1, r3
 800a812:	4013      	ands	r3, r2
 800a814:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d03a      	beq.n	800a892 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	685b      	ldr	r3, [r3, #4]
 800a820:	2b01      	cmp	r3, #1
 800a822:	d003      	beq.n	800a82c <LL_GPIO_Init+0x58>
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	2b02      	cmp	r3, #2
 800a82a:	d10e      	bne.n	800a84a <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a82c:	683b      	ldr	r3, [r7, #0]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	461a      	mov	r2, r3
 800a832:	69b9      	ldr	r1, [r7, #24]
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f7ff ff2b 	bl	800a690 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	6819      	ldr	r1, [r3, #0]
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	461a      	mov	r2, r3
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f7ff ff0b 	bl	800a660 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	461a      	mov	r2, r3
 800a850:	69b9      	ldr	r1, [r7, #24]
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f7ff ff3c 	bl	800a6d0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	2b02      	cmp	r3, #2
 800a85e:	d111      	bne.n	800a884 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800a860:	69bb      	ldr	r3, [r7, #24]
 800a862:	2bff      	cmp	r3, #255	@ 0xff
 800a864:	d807      	bhi.n	800a876 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	695b      	ldr	r3, [r3, #20]
 800a86a:	461a      	mov	r2, r3
 800a86c:	69b9      	ldr	r1, [r7, #24]
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f7ff ff4e 	bl	800a710 <LL_GPIO_SetAFPin_0_7>
 800a874:	e006      	b.n	800a884 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	695b      	ldr	r3, [r3, #20]
 800a87a:	461a      	mov	r2, r3
 800a87c:	69b9      	ldr	r1, [r7, #24]
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f7ff ff72 	bl	800a768 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	685b      	ldr	r3, [r3, #4]
 800a888:	461a      	mov	r2, r3
 800a88a:	69b9      	ldr	r1, [r7, #24]
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f7ff fec7 	bl	800a620 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a892:	69fb      	ldr	r3, [r7, #28]
 800a894:	3301      	adds	r3, #1
 800a896:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	fa22 f303 	lsr.w	r3, r2, r3
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d1af      	bne.n	800a806 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3720      	adds	r7, #32
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	bd80      	pop	{r7, pc}

0800a8b0 <LL_TIM_SetPrescaler>:
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	683a      	ldr	r2, [r7, #0]
 800a8be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a8c0:	bf00      	nop
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <LL_TIM_SetAutoReload>:
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	683a      	ldr	r2, [r7, #0]
 800a8da:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800a8dc:	bf00      	nop
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <LL_TIM_SetRepetitionCounter>:
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	683a      	ldr	r2, [r7, #0]
 800a8f6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a8f8:	bf00      	nop
 800a8fa:	370c      	adds	r7, #12
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <LL_TIM_OC_SetCompareCH1>:
{
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	683a      	ldr	r2, [r7, #0]
 800a912:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800a914:	bf00      	nop
 800a916:	370c      	adds	r7, #12
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <LL_TIM_OC_SetCompareCH2>:
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	683a      	ldr	r2, [r7, #0]
 800a92e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800a930:	bf00      	nop
 800a932:	370c      	adds	r7, #12
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr

0800a93c <LL_TIM_OC_SetCompareCH3>:
{
 800a93c:	b480      	push	{r7}
 800a93e:	b083      	sub	sp, #12
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	683a      	ldr	r2, [r7, #0]
 800a94a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800a94c:	bf00      	nop
 800a94e:	370c      	adds	r7, #12
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <LL_TIM_OC_SetCompareCH4>:
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	683a      	ldr	r2, [r7, #0]
 800a966:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800a968:	bf00      	nop
 800a96a:	370c      	adds	r7, #12
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <LL_TIM_OC_SetCompareCH5>:
{
 800a974:	b480      	push	{r7}
 800a976:	b083      	sub	sp, #12
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	683a      	ldr	r2, [r7, #0]
 800a986:	659a      	str	r2, [r3, #88]	@ 0x58
}
 800a988:	bf00      	nop
 800a98a:	370c      	adds	r7, #12
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <LL_TIM_OC_SetCompareCH6>:
{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	683a      	ldr	r2, [r7, #0]
 800a9a2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800a9a4:	bf00      	nop
 800a9a6:	370c      	adds	r7, #12
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b083      	sub	sp, #12
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	695b      	ldr	r3, [r3, #20]
 800a9bc:	f043 0201 	orr.w	r2, r3, #1
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	615a      	str	r2, [r3, #20]
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	4a41      	ldr	r2, [pc, #260]	@ (800aae8 <LL_TIM_Init+0x118>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d013      	beq.n	800aa10 <LL_TIM_Init+0x40>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9ee:	d00f      	beq.n	800aa10 <LL_TIM_Init+0x40>
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4a3e      	ldr	r2, [pc, #248]	@ (800aaec <LL_TIM_Init+0x11c>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d00b      	beq.n	800aa10 <LL_TIM_Init+0x40>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	4a3d      	ldr	r2, [pc, #244]	@ (800aaf0 <LL_TIM_Init+0x120>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d007      	beq.n	800aa10 <LL_TIM_Init+0x40>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4a3c      	ldr	r2, [pc, #240]	@ (800aaf4 <LL_TIM_Init+0x124>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d003      	beq.n	800aa10 <LL_TIM_Init+0x40>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	4a3b      	ldr	r2, [pc, #236]	@ (800aaf8 <LL_TIM_Init+0x128>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d106      	bne.n	800aa1e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4a31      	ldr	r2, [pc, #196]	@ (800aae8 <LL_TIM_Init+0x118>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d027      	beq.n	800aa76 <LL_TIM_Init+0xa6>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa2c:	d023      	beq.n	800aa76 <LL_TIM_Init+0xa6>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4a2e      	ldr	r2, [pc, #184]	@ (800aaec <LL_TIM_Init+0x11c>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d01f      	beq.n	800aa76 <LL_TIM_Init+0xa6>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a2d      	ldr	r2, [pc, #180]	@ (800aaf0 <LL_TIM_Init+0x120>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d01b      	beq.n	800aa76 <LL_TIM_Init+0xa6>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a2c      	ldr	r2, [pc, #176]	@ (800aaf4 <LL_TIM_Init+0x124>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d017      	beq.n	800aa76 <LL_TIM_Init+0xa6>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a2b      	ldr	r2, [pc, #172]	@ (800aaf8 <LL_TIM_Init+0x128>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d013      	beq.n	800aa76 <LL_TIM_Init+0xa6>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a2a      	ldr	r2, [pc, #168]	@ (800aafc <LL_TIM_Init+0x12c>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d00f      	beq.n	800aa76 <LL_TIM_Init+0xa6>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a29      	ldr	r2, [pc, #164]	@ (800ab00 <LL_TIM_Init+0x130>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d00b      	beq.n	800aa76 <LL_TIM_Init+0xa6>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a28      	ldr	r2, [pc, #160]	@ (800ab04 <LL_TIM_Init+0x134>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d007      	beq.n	800aa76 <LL_TIM_Init+0xa6>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	4a27      	ldr	r2, [pc, #156]	@ (800ab08 <LL_TIM_Init+0x138>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d003      	beq.n	800aa76 <LL_TIM_Init+0xa6>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	4a26      	ldr	r2, [pc, #152]	@ (800ab0c <LL_TIM_Init+0x13c>)
 800aa72:	4293      	cmp	r3, r2
 800aa74:	d106      	bne.n	800aa84 <LL_TIM_Init+0xb4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	68db      	ldr	r3, [r3, #12]
 800aa80:	4313      	orrs	r3, r2
 800aa82:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	68fa      	ldr	r2, [r7, #12]
 800aa88:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	4619      	mov	r1, r3
 800aa90:	6878      	ldr	r0, [r7, #4]
 800aa92:	f7ff ff1b 	bl	800a8cc <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800aa96:	683b      	ldr	r3, [r7, #0]
 800aa98:	881b      	ldrh	r3, [r3, #0]
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f7ff ff07 	bl	800a8b0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4a10      	ldr	r2, [pc, #64]	@ (800aae8 <LL_TIM_Init+0x118>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d00f      	beq.n	800aaca <LL_TIM_Init+0xfa>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4a12      	ldr	r2, [pc, #72]	@ (800aaf8 <LL_TIM_Init+0x128>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d00b      	beq.n	800aaca <LL_TIM_Init+0xfa>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	4a11      	ldr	r2, [pc, #68]	@ (800aafc <LL_TIM_Init+0x12c>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d007      	beq.n	800aaca <LL_TIM_Init+0xfa>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	4a10      	ldr	r2, [pc, #64]	@ (800ab00 <LL_TIM_Init+0x130>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d003      	beq.n	800aaca <LL_TIM_Init+0xfa>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	4a0f      	ldr	r2, [pc, #60]	@ (800ab04 <LL_TIM_Init+0x134>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d105      	bne.n	800aad6 <LL_TIM_Init+0x106>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800aaca:	683b      	ldr	r3, [r7, #0]
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	4619      	mov	r1, r3
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f7ff ff09 	bl	800a8e8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f7ff ff6a 	bl	800a9b0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3710      	adds	r7, #16
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bd80      	pop	{r7, pc}
 800aae6:	bf00      	nop
 800aae8:	40010000 	.word	0x40010000
 800aaec:	40000400 	.word	0x40000400
 800aaf0:	40000800 	.word	0x40000800
 800aaf4:	40000c00 	.word	0x40000c00
 800aaf8:	40010400 	.word	0x40010400
 800aafc:	40014000 	.word	0x40014000
 800ab00:	40014400 	.word	0x40014400
 800ab04:	40014800 	.word	0x40014800
 800ab08:	4000e000 	.word	0x4000e000
 800ab0c:	4000e400 	.word	0x4000e400

0800ab10 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b086      	sub	sp, #24
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	60b9      	str	r1, [r7, #8]
 800ab1a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab26:	d045      	beq.n	800abb4 <LL_TIM_OC_Init+0xa4>
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab2e:	d848      	bhi.n	800abc2 <LL_TIM_OC_Init+0xb2>
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab36:	d036      	beq.n	800aba6 <LL_TIM_OC_Init+0x96>
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab3e:	d840      	bhi.n	800abc2 <LL_TIM_OC_Init+0xb2>
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab46:	d027      	beq.n	800ab98 <LL_TIM_OC_Init+0x88>
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ab4e:	d838      	bhi.n	800abc2 <LL_TIM_OC_Init+0xb2>
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab56:	d018      	beq.n	800ab8a <LL_TIM_OC_Init+0x7a>
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab5e:	d830      	bhi.n	800abc2 <LL_TIM_OC_Init+0xb2>
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	2b01      	cmp	r3, #1
 800ab64:	d003      	beq.n	800ab6e <LL_TIM_OC_Init+0x5e>
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	2b10      	cmp	r3, #16
 800ab6a:	d007      	beq.n	800ab7c <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 800ab6c:	e029      	b.n	800abc2 <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800ab6e:	6879      	ldr	r1, [r7, #4]
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f000 f82d 	bl	800abd0 <OC1Config>
 800ab76:	4603      	mov	r3, r0
 800ab78:	75fb      	strb	r3, [r7, #23]
      break;
 800ab7a:	e023      	b.n	800abc4 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800ab7c:	6879      	ldr	r1, [r7, #4]
 800ab7e:	68f8      	ldr	r0, [r7, #12]
 800ab80:	f000 f8a6 	bl	800acd0 <OC2Config>
 800ab84:	4603      	mov	r3, r0
 800ab86:	75fb      	strb	r3, [r7, #23]
      break;
 800ab88:	e01c      	b.n	800abc4 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 800ab8a:	6879      	ldr	r1, [r7, #4]
 800ab8c:	68f8      	ldr	r0, [r7, #12]
 800ab8e:	f000 f923 	bl	800add8 <OC3Config>
 800ab92:	4603      	mov	r3, r0
 800ab94:	75fb      	strb	r3, [r7, #23]
      break;
 800ab96:	e015      	b.n	800abc4 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 800ab98:	6879      	ldr	r1, [r7, #4]
 800ab9a:	68f8      	ldr	r0, [r7, #12]
 800ab9c:	f000 f9a0 	bl	800aee0 <OC4Config>
 800aba0:	4603      	mov	r3, r0
 800aba2:	75fb      	strb	r3, [r7, #23]
      break;
 800aba4:	e00e      	b.n	800abc4 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800aba6:	6879      	ldr	r1, [r7, #4]
 800aba8:	68f8      	ldr	r0, [r7, #12]
 800abaa:	f000 fa05 	bl	800afb8 <OC5Config>
 800abae:	4603      	mov	r3, r0
 800abb0:	75fb      	strb	r3, [r7, #23]
      break;
 800abb2:	e007      	b.n	800abc4 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800abb4:	6879      	ldr	r1, [r7, #4]
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f000 fa62 	bl	800b080 <OC6Config>
 800abbc:	4603      	mov	r3, r0
 800abbe:	75fb      	strb	r3, [r7, #23]
      break;
 800abc0:	e000      	b.n	800abc4 <LL_TIM_OC_Init+0xb4>
      break;
 800abc2:	bf00      	nop
  }

  return result;
 800abc4:	7dfb      	ldrb	r3, [r7, #23]
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3718      	adds	r7, #24
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}
	...

0800abd0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b086      	sub	sp, #24
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a1b      	ldr	r3, [r3, #32]
 800abde:	f023 0201 	bic.w	r2, r3, #1
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a1b      	ldr	r3, [r3, #32]
 800abea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	699b      	ldr	r3, [r3, #24]
 800abf6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f023 0303 	bic.w	r3, r3, #3
 800abfe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800ac00:	68fa      	ldr	r2, [r7, #12]
 800ac02:	4b2d      	ldr	r3, [pc, #180]	@ (800acb8 <OC1Config+0xe8>)
 800ac04:	4013      	ands	r3, r2
 800ac06:	683a      	ldr	r2, [r7, #0]
 800ac08:	6812      	ldr	r2, [r2, #0]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	f023 0202 	bic.w	r2, r3, #2
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	691b      	ldr	r3, [r3, #16]
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	f023 0201 	bic.w	r2, r3, #1
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	685b      	ldr	r3, [r3, #4]
 800ac26:	4313      	orrs	r3, r2
 800ac28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a23      	ldr	r2, [pc, #140]	@ (800acbc <OC1Config+0xec>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d00f      	beq.n	800ac52 <OC1Config+0x82>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4a22      	ldr	r2, [pc, #136]	@ (800acc0 <OC1Config+0xf0>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d00b      	beq.n	800ac52 <OC1Config+0x82>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4a21      	ldr	r2, [pc, #132]	@ (800acc4 <OC1Config+0xf4>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d007      	beq.n	800ac52 <OC1Config+0x82>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	4a20      	ldr	r2, [pc, #128]	@ (800acc8 <OC1Config+0xf8>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d003      	beq.n	800ac52 <OC1Config+0x82>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	4a1f      	ldr	r2, [pc, #124]	@ (800accc <OC1Config+0xfc>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d11e      	bne.n	800ac90 <OC1Config+0xc0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	f023 0208 	bic.w	r2, r3, #8
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	695b      	ldr	r3, [r3, #20]
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	f023 0204 	bic.w	r2, r3, #4
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	699b      	ldr	r3, [r3, #24]
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	69db      	ldr	r3, [r3, #28]
 800ac8a:	005b      	lsls	r3, r3, #1
 800ac8c:	4313      	orrs	r3, r2
 800ac8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	693a      	ldr	r2, [r7, #16]
 800ac94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	4619      	mov	r1, r3
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f7ff fe2e 	bl	800a904 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	697a      	ldr	r2, [r7, #20]
 800acac:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3718      	adds	r7, #24
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	fffeff8f 	.word	0xfffeff8f
 800acbc:	40010000 	.word	0x40010000
 800acc0:	40010400 	.word	0x40010400
 800acc4:	40014000 	.word	0x40014000
 800acc8:	40014400 	.word	0x40014400
 800accc:	40014800 	.word	0x40014800

0800acd0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b086      	sub	sp, #24
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6a1b      	ldr	r3, [r3, #32]
 800acde:	f023 0210 	bic.w	r2, r3, #16
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	6a1b      	ldr	r3, [r3, #32]
 800acea:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	699b      	ldr	r3, [r3, #24]
 800acf6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800acfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800ad00:	68fa      	ldr	r2, [r7, #12]
 800ad02:	4b2f      	ldr	r3, [pc, #188]	@ (800adc0 <OC2Config+0xf0>)
 800ad04:	4013      	ands	r3, r2
 800ad06:	683a      	ldr	r2, [r7, #0]
 800ad08:	6812      	ldr	r2, [r2, #0]
 800ad0a:	0212      	lsls	r2, r2, #8
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800ad10:	697b      	ldr	r3, [r7, #20]
 800ad12:	f023 0220 	bic.w	r2, r3, #32
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	011b      	lsls	r3, r3, #4
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	f023 0210 	bic.w	r2, r3, #16
 800ad26:	683b      	ldr	r3, [r7, #0]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	011b      	lsls	r3, r3, #4
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a24      	ldr	r2, [pc, #144]	@ (800adc4 <OC2Config+0xf4>)
 800ad34:	4293      	cmp	r3, r2
 800ad36:	d00f      	beq.n	800ad58 <OC2Config+0x88>
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	4a23      	ldr	r2, [pc, #140]	@ (800adc8 <OC2Config+0xf8>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d00b      	beq.n	800ad58 <OC2Config+0x88>
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4a22      	ldr	r2, [pc, #136]	@ (800adcc <OC2Config+0xfc>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d007      	beq.n	800ad58 <OC2Config+0x88>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	4a21      	ldr	r2, [pc, #132]	@ (800add0 <OC2Config+0x100>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d003      	beq.n	800ad58 <OC2Config+0x88>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4a20      	ldr	r2, [pc, #128]	@ (800add4 <OC2Config+0x104>)
 800ad54:	4293      	cmp	r3, r2
 800ad56:	d11f      	bne.n	800ad98 <OC2Config+0xc8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	695b      	ldr	r3, [r3, #20]
 800ad62:	019b      	lsls	r3, r3, #6
 800ad64:	4313      	orrs	r3, r2
 800ad66:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	689b      	ldr	r3, [r3, #8]
 800ad72:	019b      	lsls	r3, r3, #6
 800ad74:	4313      	orrs	r3, r2
 800ad76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 800ad78:	693b      	ldr	r3, [r7, #16]
 800ad7a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	699b      	ldr	r3, [r3, #24]
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	4313      	orrs	r3, r2
 800ad86:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	69db      	ldr	r3, [r3, #28]
 800ad92:	00db      	lsls	r3, r3, #3
 800ad94:	4313      	orrs	r3, r2
 800ad96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	693a      	ldr	r2, [r7, #16]
 800ad9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	68fa      	ldr	r2, [r7, #12]
 800ada2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	68db      	ldr	r3, [r3, #12]
 800ada8:	4619      	mov	r1, r3
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f7ff fdb8 	bl	800a920 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	697a      	ldr	r2, [r7, #20]
 800adb4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800adb6:	2300      	movs	r3, #0
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3718      	adds	r7, #24
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	feff8fff 	.word	0xfeff8fff
 800adc4:	40010000 	.word	0x40010000
 800adc8:	40010400 	.word	0x40010400
 800adcc:	40014000 	.word	0x40014000
 800add0:	40014400 	.word	0x40014400
 800add4:	40014800 	.word	0x40014800

0800add8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b086      	sub	sp, #24
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6a1b      	ldr	r3, [r3, #32]
 800ade6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6a1b      	ldr	r3, [r3, #32]
 800adf2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	69db      	ldr	r3, [r3, #28]
 800adfe:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f023 0303 	bic.w	r3, r3, #3
 800ae06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800ae08:	68fa      	ldr	r2, [r7, #12]
 800ae0a:	4b2f      	ldr	r3, [pc, #188]	@ (800aec8 <OC3Config+0xf0>)
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	683a      	ldr	r2, [r7, #0]
 800ae10:	6812      	ldr	r2, [r2, #0]
 800ae12:	4313      	orrs	r3, r2
 800ae14:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	691b      	ldr	r3, [r3, #16]
 800ae20:	021b      	lsls	r3, r3, #8
 800ae22:	4313      	orrs	r3, r2
 800ae24:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800ae26:	697b      	ldr	r3, [r7, #20]
 800ae28:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	021b      	lsls	r3, r3, #8
 800ae32:	4313      	orrs	r3, r2
 800ae34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	4a24      	ldr	r2, [pc, #144]	@ (800aecc <OC3Config+0xf4>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d00f      	beq.n	800ae5e <OC3Config+0x86>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	4a23      	ldr	r2, [pc, #140]	@ (800aed0 <OC3Config+0xf8>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d00b      	beq.n	800ae5e <OC3Config+0x86>
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	4a22      	ldr	r2, [pc, #136]	@ (800aed4 <OC3Config+0xfc>)
 800ae4a:	4293      	cmp	r3, r2
 800ae4c:	d007      	beq.n	800ae5e <OC3Config+0x86>
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4a21      	ldr	r2, [pc, #132]	@ (800aed8 <OC3Config+0x100>)
 800ae52:	4293      	cmp	r3, r2
 800ae54:	d003      	beq.n	800ae5e <OC3Config+0x86>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4a20      	ldr	r2, [pc, #128]	@ (800aedc <OC3Config+0x104>)
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d11f      	bne.n	800ae9e <OC3Config+0xc6>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800ae5e:	697b      	ldr	r3, [r7, #20]
 800ae60:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	695b      	ldr	r3, [r3, #20]
 800ae68:	029b      	lsls	r3, r3, #10
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	689b      	ldr	r3, [r3, #8]
 800ae78:	029b      	lsls	r3, r3, #10
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800ae7e:	693b      	ldr	r3, [r7, #16]
 800ae80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	699b      	ldr	r3, [r3, #24]
 800ae88:	011b      	lsls	r3, r3, #4
 800ae8a:	4313      	orrs	r3, r2
 800ae8c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800ae8e:	693b      	ldr	r3, [r7, #16]
 800ae90:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	69db      	ldr	r3, [r3, #28]
 800ae98:	015b      	lsls	r3, r3, #5
 800ae9a:	4313      	orrs	r3, r2
 800ae9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	693a      	ldr	r2, [r7, #16]
 800aea2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	68fa      	ldr	r2, [r7, #12]
 800aea8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	4619      	mov	r1, r3
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f7ff fd43 	bl	800a93c <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	697a      	ldr	r2, [r7, #20]
 800aeba:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800aebc:	2300      	movs	r3, #0
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3718      	adds	r7, #24
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}
 800aec6:	bf00      	nop
 800aec8:	fffeff8f 	.word	0xfffeff8f
 800aecc:	40010000 	.word	0x40010000
 800aed0:	40010400 	.word	0x40010400
 800aed4:	40014000 	.word	0x40014000
 800aed8:	40014400 	.word	0x40014400
 800aedc:	40014800 	.word	0x40014800

0800aee0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a1b      	ldr	r3, [r3, #32]
 800aeee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6a1b      	ldr	r3, [r3, #32]
 800aefa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	685b      	ldr	r3, [r3, #4]
 800af00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	69db      	ldr	r3, [r3, #28]
 800af06:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800af10:	68fa      	ldr	r2, [r7, #12]
 800af12:	4b23      	ldr	r3, [pc, #140]	@ (800afa0 <OC4Config+0xc0>)
 800af14:	4013      	ands	r3, r2
 800af16:	683a      	ldr	r2, [r7, #0]
 800af18:	6812      	ldr	r2, [r2, #0]
 800af1a:	0212      	lsls	r2, r2, #8
 800af1c:	4313      	orrs	r3, r2
 800af1e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	031b      	lsls	r3, r3, #12
 800af2c:	4313      	orrs	r3, r2
 800af2e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	031b      	lsls	r3, r3, #12
 800af3c:	4313      	orrs	r3, r2
 800af3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	4a18      	ldr	r2, [pc, #96]	@ (800afa4 <OC4Config+0xc4>)
 800af44:	4293      	cmp	r3, r2
 800af46:	d00f      	beq.n	800af68 <OC4Config+0x88>
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	4a17      	ldr	r2, [pc, #92]	@ (800afa8 <OC4Config+0xc8>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d00b      	beq.n	800af68 <OC4Config+0x88>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a16      	ldr	r2, [pc, #88]	@ (800afac <OC4Config+0xcc>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d007      	beq.n	800af68 <OC4Config+0x88>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4a15      	ldr	r2, [pc, #84]	@ (800afb0 <OC4Config+0xd0>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d003      	beq.n	800af68 <OC4Config+0x88>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	4a14      	ldr	r2, [pc, #80]	@ (800afb4 <OC4Config+0xd4>)
 800af64:	4293      	cmp	r3, r2
 800af66:	d107      	bne.n	800af78 <OC4Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	699b      	ldr	r3, [r3, #24]
 800af72:	019b      	lsls	r3, r3, #6
 800af74:	4313      	orrs	r3, r2
 800af76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	697a      	ldr	r2, [r7, #20]
 800af7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800af84:	683b      	ldr	r3, [r7, #0]
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	4619      	mov	r1, r3
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f7ff fce4 	bl	800a958 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	693a      	ldr	r2, [r7, #16]
 800af94:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3718      	adds	r7, #24
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}
 800afa0:	feff8fff 	.word	0xfeff8fff
 800afa4:	40010000 	.word	0x40010000
 800afa8:	40010400 	.word	0x40010400
 800afac:	40014000 	.word	0x40014000
 800afb0:	40014400 	.word	0x40014400
 800afb4:	40014800 	.word	0x40014800

0800afb8 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b084      	sub	sp, #16
 800afbc:	af00      	add	r7, sp, #0
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6a1b      	ldr	r3, [r3, #32]
 800afc6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a1b      	ldr	r3, [r3, #32]
 800afd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800afd8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 800afda:	68ba      	ldr	r2, [r7, #8]
 800afdc:	4b22      	ldr	r3, [pc, #136]	@ (800b068 <OC5Config+0xb0>)
 800afde:	4013      	ands	r3, r2
 800afe0:	683a      	ldr	r2, [r7, #0]
 800afe2:	6812      	ldr	r2, [r2, #0]
 800afe4:	4313      	orrs	r3, r2
 800afe6:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	691b      	ldr	r3, [r3, #16]
 800aff2:	041b      	lsls	r3, r3, #16
 800aff4:	4313      	orrs	r3, r2
 800aff6:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	685b      	ldr	r3, [r3, #4]
 800b002:	041b      	lsls	r3, r3, #16
 800b004:	4313      	orrs	r3, r2
 800b006:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	4a18      	ldr	r2, [pc, #96]	@ (800b06c <OC5Config+0xb4>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d00f      	beq.n	800b030 <OC5Config+0x78>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	4a17      	ldr	r2, [pc, #92]	@ (800b070 <OC5Config+0xb8>)
 800b014:	4293      	cmp	r3, r2
 800b016:	d00b      	beq.n	800b030 <OC5Config+0x78>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	4a16      	ldr	r2, [pc, #88]	@ (800b074 <OC5Config+0xbc>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d007      	beq.n	800b030 <OC5Config+0x78>
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4a15      	ldr	r2, [pc, #84]	@ (800b078 <OC5Config+0xc0>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d003      	beq.n	800b030 <OC5Config+0x78>
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4a14      	ldr	r2, [pc, #80]	@ (800b07c <OC5Config+0xc4>)
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d109      	bne.n	800b044 <OC5Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	699b      	ldr	r3, [r3, #24]
 800b03c:	021b      	lsls	r3, r3, #8
 800b03e:	431a      	orrs	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	68ba      	ldr	r2, [r7, #8]
 800b048:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800b04a:	683b      	ldr	r3, [r7, #0]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	4619      	mov	r1, r3
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f7ff fc8f 	bl	800a974 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	68fa      	ldr	r2, [r7, #12]
 800b05a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3710      	adds	r7, #16
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	fffeff8f 	.word	0xfffeff8f
 800b06c:	40010000 	.word	0x40010000
 800b070:	40010400 	.word	0x40010400
 800b074:	40014000 	.word	0x40014000
 800b078:	40014400 	.word	0x40014400
 800b07c:	40014800 	.word	0x40014800

0800b080 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b084      	sub	sp, #16
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
 800b088:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6a1b      	ldr	r3, [r3, #32]
 800b08e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	6a1b      	ldr	r3, [r3, #32]
 800b09a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0a0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800b0a2:	68ba      	ldr	r2, [r7, #8]
 800b0a4:	4b22      	ldr	r3, [pc, #136]	@ (800b130 <OC6Config+0xb0>)
 800b0a6:	4013      	ands	r3, r2
 800b0a8:	683a      	ldr	r2, [r7, #0]
 800b0aa:	6812      	ldr	r2, [r2, #0]
 800b0ac:	0212      	lsls	r2, r2, #8
 800b0ae:	4313      	orrs	r3, r2
 800b0b0:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	691b      	ldr	r3, [r3, #16]
 800b0bc:	051b      	lsls	r3, r3, #20
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	051b      	lsls	r3, r3, #20
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	4a17      	ldr	r2, [pc, #92]	@ (800b134 <OC6Config+0xb4>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d00f      	beq.n	800b0fa <OC6Config+0x7a>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	4a16      	ldr	r2, [pc, #88]	@ (800b138 <OC6Config+0xb8>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d00b      	beq.n	800b0fa <OC6Config+0x7a>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4a15      	ldr	r2, [pc, #84]	@ (800b13c <OC6Config+0xbc>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d007      	beq.n	800b0fa <OC6Config+0x7a>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4a14      	ldr	r2, [pc, #80]	@ (800b140 <OC6Config+0xc0>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d003      	beq.n	800b0fa <OC6Config+0x7a>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4a13      	ldr	r2, [pc, #76]	@ (800b144 <OC6Config+0xc4>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d109      	bne.n	800b10e <OC6Config+0x8e>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	699b      	ldr	r3, [r3, #24]
 800b106:	029b      	lsls	r3, r3, #10
 800b108:	431a      	orrs	r2, r3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	68ba      	ldr	r2, [r7, #8]
 800b112:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	68db      	ldr	r3, [r3, #12]
 800b118:	4619      	mov	r1, r3
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f7ff fc3a 	bl	800a994 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	68fa      	ldr	r2, [r7, #12]
 800b124:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3710      	adds	r7, #16
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}
 800b130:	feff8fff 	.word	0xfeff8fff
 800b134:	40010000 	.word	0x40010000
 800b138:	40010400 	.word	0x40010400
 800b13c:	40014000 	.word	0x40014000
 800b140:	40014400 	.word	0x40014400
 800b144:	40014800 	.word	0x40014800

0800b148 <memset>:
 800b148:	4402      	add	r2, r0
 800b14a:	4603      	mov	r3, r0
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d100      	bne.n	800b152 <memset+0xa>
 800b150:	4770      	bx	lr
 800b152:	f803 1b01 	strb.w	r1, [r3], #1
 800b156:	e7f9      	b.n	800b14c <memset+0x4>

0800b158 <__libc_init_array>:
 800b158:	b570      	push	{r4, r5, r6, lr}
 800b15a:	4d0d      	ldr	r5, [pc, #52]	@ (800b190 <__libc_init_array+0x38>)
 800b15c:	4c0d      	ldr	r4, [pc, #52]	@ (800b194 <__libc_init_array+0x3c>)
 800b15e:	1b64      	subs	r4, r4, r5
 800b160:	10a4      	asrs	r4, r4, #2
 800b162:	2600      	movs	r6, #0
 800b164:	42a6      	cmp	r6, r4
 800b166:	d109      	bne.n	800b17c <__libc_init_array+0x24>
 800b168:	4d0b      	ldr	r5, [pc, #44]	@ (800b198 <__libc_init_array+0x40>)
 800b16a:	4c0c      	ldr	r4, [pc, #48]	@ (800b19c <__libc_init_array+0x44>)
 800b16c:	f000 f826 	bl	800b1bc <_init>
 800b170:	1b64      	subs	r4, r4, r5
 800b172:	10a4      	asrs	r4, r4, #2
 800b174:	2600      	movs	r6, #0
 800b176:	42a6      	cmp	r6, r4
 800b178:	d105      	bne.n	800b186 <__libc_init_array+0x2e>
 800b17a:	bd70      	pop	{r4, r5, r6, pc}
 800b17c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b180:	4798      	blx	r3
 800b182:	3601      	adds	r6, #1
 800b184:	e7ee      	b.n	800b164 <__libc_init_array+0xc>
 800b186:	f855 3b04 	ldr.w	r3, [r5], #4
 800b18a:	4798      	blx	r3
 800b18c:	3601      	adds	r6, #1
 800b18e:	e7f2      	b.n	800b176 <__libc_init_array+0x1e>
 800b190:	0800d910 	.word	0x0800d910
 800b194:	0800d910 	.word	0x0800d910
 800b198:	0800d910 	.word	0x0800d910
 800b19c:	0800d914 	.word	0x0800d914

0800b1a0 <memcpy>:
 800b1a0:	440a      	add	r2, r1
 800b1a2:	4291      	cmp	r1, r2
 800b1a4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b1a8:	d100      	bne.n	800b1ac <memcpy+0xc>
 800b1aa:	4770      	bx	lr
 800b1ac:	b510      	push	{r4, lr}
 800b1ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1b6:	4291      	cmp	r1, r2
 800b1b8:	d1f9      	bne.n	800b1ae <memcpy+0xe>
 800b1ba:	bd10      	pop	{r4, pc}

0800b1bc <_init>:
 800b1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1be:	bf00      	nop
 800b1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1c2:	bc08      	pop	{r3}
 800b1c4:	469e      	mov	lr, r3
 800b1c6:	4770      	bx	lr

0800b1c8 <_fini>:
 800b1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1ca:	bf00      	nop
 800b1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1ce:	bc08      	pop	{r3}
 800b1d0:	469e      	mov	lr, r3
 800b1d2:	4770      	bx	lr
